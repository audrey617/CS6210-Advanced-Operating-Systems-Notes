%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%%BeginProlog
%
% FrameMaker postscript_prolog 3.0, for use with FrameMaker 3.0
% This postscript_prolog file is Copyright (c) 1986-1991 Frame Technology
% Corporation.  All rights reserved.  This postscript_prolog file may be
% freely copied and distributed in conjunction with documents created using
% FrameMaker.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 

% Set up Color vs. Black-and-White

/FMPrintInColor false def
/colorimage where { pop
    /currentcolortransfer where { pop
	/FMPrintInColor true def
	statusdict begin 
	    /processcolors where { 
		pop processcolors 1 le {
		    /FMPrintInColor false def
		} if
	    }{
		/deviceinfo where {
		    pop deviceinfo /Colors known { 
			deviceinfo /Colors get 1 le {
			    /FMPrintInColor false def
			} if
		    } if
		} if
	    } ifelse
	end
	/currentcanvas where {  % NeWSprint?
	    pop systemdict /separationdict known not {
		/FMPrintInColor false def
	    } if
	} if
    } if
} if


% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def

/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 14 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
3 0 /Courier-Bold FMFONTDEFINE
4 0 /Helvetica-Bold FMFONTDEFINE
5 0 /Helvetica FMFONTDEFINE
6 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
0 14 Q
0 X
0 K
(An Overview of the Spring System) 200.51 679.2 T
1 12 Q
-0.02 (James G. Mitchell, Jonathan J. Gibbons, Graham Hamilton, Peter B. Kessler) 118.84 650.54 P
-0.02 (,) 485.42 650.54 P
(Y) 120.15 634.54 T
(ousef A. Khalidi, Panos Kougiouris, Peter W) 127.61 634.54 T
(. Madany) 342.82 634.54 T
(, Michael N. Nelson,) 387.37 634.54 T
(Michael L. Powell, and Sanjay R. Radia) 207.26 618.54 T
(Sun Microsystems Inc.) 248.59 592.54 T
(2550 Garcia A) 187.91 575.54 T
(venue, Mountain V) 257.66 575.54 T
(iew Ca 94303.) 349.93 575.54 T
0 11 Q
(Abstract) 168.54 521.81 T
2 10 Q
0.25 0.22 (Spring is a highly modular) 58.5 501.48 B
0.25 0.22 (, distributed, object-oriented) 171.26 501.48 B
0.25 0.22 (operating system. This paper describes the goals of the) 58.5 489.48 B
0.06 (Spring system and pr) 58.5 477.48 P
0.06 (ovides overviews of the Spring object) 143.04 477.48 P
0.25 0.17 (model, the security model, and the naming ar) 58.5 465.48 B
0.25 0.17 (chitectur) 248.69 465.48 B
0.25 0.17 (e.) 285.39 465.48 B
0.25 0.08 (Implementation details of the Spring micr) 58.5 453.48 B
0.25 0.08 (okernel, virtual) 229.45 453.48 B
0.25 0.01 (memory system, f) 58.5 441.48 B
0.25 0.01 (ile system, and UNIX emulation ar) 127.81 441.48 B
0.25 0.01 (e sup-) 268.03 441.48 B
(plied.) 58.5 429.48 T
0 12 Q
(1) 58.5 393.14 T
(Intr) 85.5 393.14 T
(oduction) 105.95 393.14 T
1 10 Q
0.25 0.26 (What would you do if you were given a clean sheet on) 58.5 372.48 B
-0.11 (which to design a new operating system? W) 58.5 360.48 P
-0.11 (ould you make) 233.28 360.48 P
0.24 (the new OS look the same as some existing system or dif-) 58.5 348.48 P
(ferent?) 58.5 336.48 T
0.25 0.26 (If you choose to make it look like UNIX, for example,) 58.5 318.48 B
0.2 (then a better implementation had better be a primary goal.) 58.5 306.48 P
0.25 0.35 (Changing the system as seen by application programs) 58.5 294.48 B
0.25 0.09 (would, however) 58.5 282.48 B
0.25 0.09 (, be a very bad thing to do, since you are) 124.06 282.48 B
0.25 0.1 (supposedly making it look the same as UNIX in order to) 58.5 270.48 B
0.25 0.15 (run existing software. In fact, if you take this route, you) 58.5 258.48 B
0.09 (will be strongly pressured to make the new) 58.5 246.48 P
0.09 (, improved sys-) 230.38 246.48 P
0.25 0.06 (tem) 58.5 234.48 B
2 F
0.25 0.06 (binary compatible) 76.47 234.48 B
1 F
0.25 0.06 ( with the existing one so that users) 150.73 234.48 B
0.25 0.05 (can run all their existing software. Any new functionality) 58.5 222.48 B
0.25 0.01 (that you would like to include would have to be done as a) 58.5 210.48 B
0.25 0.21 (strict addition to the system\325) 58.5 198.48 B
0.25 0.21 (s existing Application Pro-) 179.06 198.48 B
(gramming Interfaces \050APIs\051.) 58.5 186.48 T
0.25 0.09 (If you choose to make the new system dif) 58.5 169.48 B
0.25 0.09 (ferent than any) 230.71 169.48 B
0.25 0.45 (existing system, then you had better make it such an) 58.5 157.48 B
0.25 0.04 (improvement over them that programmers will be willing) 58.5 145.48 B
0.25 0.65 (to learn a new set of APIs to take advantage of its) 58.5 133.48 B
0.25 0.01 (improved functionality) 58.5 121.48 B
0.25 0.01 (. Indeed, you will have to convince) 150.21 121.48 B
0.25 0.15 (other companies to adopt and support your new APIs so) 58.5 109.48 B
-0.14 (that there will be suf) 58.5 97.48 P
-0.14 (\336cient future sales of systems with the) 139.99 97.48 P
0.25 0.17 (new APIs to warrant software development investments) 315 523.19 B
(by application developers.) 315 511.19 T
0.25 0.17 (Because the opportunity to begin afresh in OS design is) 315 494.19 B
0.25 0.05 (increasingly rare, the Spring project has chosen to be dif-) 315 482.19 B
0.25 0 (ferent and to develop the best technology we could. How-) 315 470.19 B
0.25 0.14 (ever) 315 458.19 B
0.25 0.14 (, we decided that we would innovate only where we) 332.36 458.19 B
0.25 0.19 (could achieve lar) 315 446.19 B
0.25 0.19 (ge increases over existing systems and) 386.77 446.19 B
0.25 0.3 (that we would try to keep as many as possible of their) 315 434.19 B
(good features.) 315 422.19 T
0.25 0.04 (What are the biggest problems of existing systems? From) 315 405.19 B
-0.04 (Sun\325) 315 393.19 P
-0.04 (s point of view as a supplier of UNIX system technol-) 333.34 393.19 P
(ogy in our Solaris products, the major issues are:) 315 381.19 T
3 11 Q
(\245) 315 365.19 T
1 10 Q
0.25 0.18 (the cost of maintaining, evolving, and delivering the) 328.74 365.19 B
0.25 0.28 (system, including kernel and non-kernel code \050e.g.,) 328.75 353.19 B
(window systems\051,) 328.75 341.19 T
3 11 Q
(\245) 315 326.19 T
1 10 Q
-0.09 (a basis for security that is not particularly \337exible, easy) 328.74 326.19 P
(to use or strongly secure,) 328.75 314.19 T
3 11 Q
(\245) 315 299.19 T
1 10 Q
0.25 0.23 (the dif) 328.74 299.19 B
0.25 0.23 (f) 356.23 299.19 B
0.25 0.23 (iculty of building distributed, multi-threaded) 359.23 299.19 B
(applications and services,) 328.75 287.19 T
3 11 Q
(\245) 315 272.19 T
1 10 Q
0.25 0.09 (the dif) 328.74 272.19 B
0.25 0.09 (f) 355.3 272.19 B
0.25 0.09 (iculty of supporting time-critical media \050audio) 358.17 272.19 B
(and video\051, especially in a networked environment,) 328.75 260.19 T
3 11 Q
(\245) 315 245.19 T
1 10 Q
0.25 0.2 (the lack of a unif) 328.74 245.19 B
0.25 0.2 (ied way of locating things by name) 400.49 245.19 B
0.25 0.41 (\050e.g., lookup is done dif) 328.75 233.19 B
0.25 0.41 (ferently for f) 435.17 233.19 B
0.25 0.41 (iles, devices,) 492 233.19 B
(users, etc.\051.) 328.75 221.19 T
0.25 0.26 (However) 315 204.19 B
0.25 0.26 (, we wanted to keep a number of features that) 353.08 204.19 B
-0.2 (have proven themselves in one or more systems; for exam-) 315 192.19 P
(ple,) 315 180.19 T
3 11 Q
(\245) 315 164.19 T
1 10 Q
0.25 0.44 (good performance on a wide variety of machines,) 328.74 164.19 B
(including multi-processor systems,) 328.75 152.19 T
3 11 Q
(\245) 315 137.19 T
1 10 Q
0.25 0.15 (memory protection, virtual memory) 328.74 137.19 B
0.25 0.15 (, and mapped f) 477.02 137.19 B
0.25 0.15 (ile) 538.71 137.19 B
(systems,) 328.75 125.19 T
3 11 Q
(\245) 315 110.19 T
1 10 Q
-0.23 (access to existing systems via application compatibility) 328.74 110.19 P
0.25 0.12 (and network interoperability \050e.g., standard protocols) 328.75 98.19 B
(and services\051,) 328.75 86.19 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
3 11 Q
0 X
0 K
(\245) 58.5 713.33 T
1 10 Q
(window systems and graphical user interfaces.) 72.25 713.33 T
0.25 0.05 (Sun\325) 58.5 696.33 B
0.25 0.05 (s belief in open systems means that we would like to) 77.03 696.33 B
0.25 0.07 (include) 58.5 684.33 B
2 F
0.25 0.07 (extending the system) 91.24 684.33 B
1 F
0.25 0.07 ( by more than one vendor as) 175.89 684.33 B
(an important aspect of) 58.5 672.33 T
2 F
(evolving) 150.15 672.33 T
1 F
( it.) 184.03 672.33 T
0.25 0.19 (When we looked at these lists, we immediately decided) 58.5 655.33 B
0.25 0.15 (that the Spring system should have a strong and explicit) 58.5 643.33 B
0.16 (architecture: one that would pay attention to the interfaces) 58.5 631.33 P
0.25 0.03 (between software components, which is really how a sys-) 58.5 619.33 B
0.25 0.27 (tem\325) 58.5 607.33 B
0.25 0.27 (s structure is expressed. Our architectural goal for) 77.38 607.33 B
(Spring then became) 58.5 595.33 T
3 11 Q
(\245) 58.5 579.33 T
1 10 Q
0.25 0.46 (Spring\325) 72.25 579.33 B
0.25 0.46 (s components should be def) 104.94 579.33 B
0.25 0.46 (ined by) 228.56 579.33 B
2 F
0.25 0.46 (str) 264.99 579.33 B
0.25 0.46 (ong) 276.57 579.33 B
-0.14 (interfaces) 72.25 567.33 P
1 F
-0.14 ( and it should be) 111.69 567.33 P
2 F
-0.14 (open, \337exible and extensible) 179.61 567.33 P
1 F
0.25 0.32 (By a strong interface we mean one that specif) 58.5 550.33 B
0.25 0.32 (ies) 256.97 550.33 B
2 F
0.25 0.32 (what) 272.1 550.33 B
1 F
0.25 0.23 (some software component does while saying very little) 58.5 538.33 B
(about) 58.5 526.33 T
2 F
(how) 83.22 526.33 T
1 F
( it is implemented) 99.89 526.33 T
0.24 (This way of stating our purpose led us to develop the idea) 58.5 509.33 P
0.25 0.01 (of an Interface Def) 58.5 497.33 B
0.25 0.01 (inition Language \050IDL\051 [15] so that we) 134.63 497.33 B
0.23 (could de\336ne software interfaces without having to tie our-) 58.5 485.33 P
0.25 0.23 (selves to a single programming language, which would) 58.5 473.33 B
0.12 (have made the system less open. W) 58.5 461.33 P
0.12 (e also believed that the) 200.36 461.33 P
0.25 0.05 (best way to get many of the system properties we wanted) 58.5 449.33 B
(was to use an object-oriented approach.) 58.5 437.33 T
0.25 0.16 (The marriage of strong interfaces and object-orientation) 58.5 420.33 B
0.25 0.06 (has been a natural and powerful one. It helps achieve our) 58.5 408.33 B
0.25 0.07 (goals of openness, extensibility) 58.5 396.33 B
0.25 0.07 (, easy distributed comput-) 186.27 396.33 B
-0.19 (ing, and security) 58.5 384.33 P
-0.19 (. In particular) 123.86 384.33 P
-0.19 (, it has made the operation of) 177.24 384.33 P
0.25 0.15 (invoking an operation on an object one that is) 58.5 372.33 B
2 F
0.25 0.15 (type safe) 253.12 372.33 B
1 F
0.25 0.15 (,) 290 372.33 B
2 F
0.25 0.01 (secur) 58.5 360.33 B
0.25 0.01 (e) 79.83 360.33 B
1 F
0.25 0.01 ( \050if desired\051, and) 84.28 360.33 B
2 F
0.25 0.01 (uniform) 154.04 360.33 B
1 F
0.25 0.01 ( whether the object and its) 185.77 360.33 B
0.25 0.06 (client are collocated in a single address space or machine) 58.5 348.33 B
(or are remote from one another) 58.5 336.33 T
(.) 182.63 336.33 T
0.02 (W) 58.5 319.33 P
0.02 (e have used a microkernel approach in concert with IDL) 67.14 319.33 P
0.25 0.13 (interfaces. The Spring Nucleus \050part of the microkernel\051) 58.5 307.33 B
0.25 0.25 (directly supports secure objects with high speed object) 58.5 295.33 B
0.25 0.47 (invocation between address spaces \050and by a system) 58.5 283.33 B
0.25 0.19 (extension, between networked machines\051. Almost all of) 58.5 271.33 B
0.25 0.12 (the system is implemented as a suite of) 58.5 259.33 B
2 F
0.25 0.12 (object managers) 224.19 259.33 B
1 F
0.25 0.03 (\050e.g., the f) 58.5 247.33 B
0.25 0.03 (ile system, which provides f) 99.68 247.33 B
0.25 0.03 (ile objects\051 running) 213.58 247.33 B
0.25 0.16 (in non-kernel mode, often in separate address spaces, to) 58.5 235.33 B
0.25 0.53 (protect themselves from applications \050and from one) 58.5 223.33 B
0.25 0.22 (another\051. Consequently) 58.5 211.33 B
0.25 0.22 (, it is as easy to add new system) 156.14 211.33 B
0.25 0.02 (functionality as it is to write an application in Spring, and) 58.5 199.33 B
0.25 0.25 (all such functionality is inherently part of a distributed) 58.5 187.33 B
(system.) 58.5 175.33 T
0.25 0.18 (Object managers are themselves objects: for example, a) 58.5 158.33 B
-0.02 (\336le system is an object manager that supports an operation) 58.5 146.33 P
0.25 0.12 (for opening f) 58.5 134.33 B
0.25 0.12 (iles by name. The f) 112.18 134.33 B
0.25 0.12 (ile objects that it returns) 191.79 134.33 B
-0.05 (from) 58.5 122.33 P
2 F
-0.05 (open) 80.39 122.33 P
1 F
-0.05 ( operations are generally implemented as part of) 99.83 122.33 P
0.23 (the same object manager because it is convenient and nat-) 58.5 110.33 P
0.25 0.07 (ural to do so. Because of the similarity of an object man-) 58.5 98.33 B
0.25 0.37 (ager and the traditional notion of a) 58.5 86.33 B
2 F
0.25 0.37 (server) 214.74 86.33 B
1 F
0.25 0.37 ( \050e.g., a f) 241.95 86.33 B
0.25 0.37 (ile) 281.76 86.33 B
0.25 0.41 (server\051, we use the two terms interchangeably in this) 315 713.33 B
(paper) 315 701.33 T
(.) 336.66 701.33 T
(The remainder of this paper will discuss) 315 684.33 T
3 11 Q
(\245) 315 668.33 T
1 10 Q
(IDL,) 328.74 668.33 T
3 11 Q
(\245) 315 653.33 T
1 10 Q
(the model and implementation of objects in Spring,) 328.74 653.33 T
3 11 Q
(\245) 315 638.33 T
1 10 Q
(the overall structure of the Spring system,) 328.74 638.33 T
3 11 Q
(\245) 315 623.33 T
1 10 Q
(the Spring Nucleus,) 328.74 623.33 T
3 11 Q
(\245) 315 608.33 T
1 10 Q
0.25 0.14 (the implementations of distributed object invocation,) 328.74 608.33 B
0.25 0.03 (security) 328.75 596.33 B
0.25 0.03 (, virtual memory) 359.99 596.33 B
0.25 0.03 (, f) 427.24 596.33 B
0.25 0.03 (ile systems, UNIX compati-) 435.35 596.33 B
(bility) 328.75 584.33 T
(, and uni\336ed naming.) 349.22 584.33 T
0.25 0.34 (W) 315 567.33 B
0.25 0.34 (e will f) 323.98 567.33 B
0.25 0.34 (inish by drawing some conclusions from our) 355.03 567.33 B
(experience designing and implementing the system.) 315 555.33 T
0 12 Q
(2) 315 519 T
(Interface De\336nition Language \050IDL\051) 342 519 T
1 10 Q
0.25 0.47 (The Interface Def) 315 498.33 B
0.25 0.47 (inition Language developed by the) 394.04 498.33 B
-0.1 (Spring project is substantially the same as the IDL that has) 315 486.33 P
0.23 (been adopted by the Object Management Group as a stan-) 315 474.33 P
0.25 0.33 (dard for def) 315 462.33 B
0.25 0.33 (ining distributed, object-oriented software) 366.1 462.33 B
0.25 0.11 (components. As such, IDL \322compilers\323 are or have been) 315 450.33 B
(implemented by a number of companies.) 315 438.33 T
0.25 0.16 (What does an IDL compiler do? After all, interfaces are) 315 420.33 B
0.25 0.19 (not supposed to be implementations, so what is there to) 315 408.33 B
0.25 0.17 (compile? T) 315 396.33 B
0.25 0.17 (ypically) 361.56 396.33 B
0.25 0.17 (, an IDL compiler is used to produce) 394.52 396.33 B
0.25 0.1 (three pieces of source code in some chosen tar) 315 384.33 B
0.25 0.1 (get imple-) 507.09 384.33 B
(mentation language, e.g., C, C++, Smalltalk, etc.:) 315 372.33 T
4 9 Q
(1.) 315 356.33 T
2 10 Q
0.25 0.16 (A language specif) 328.74 356.33 B
0.25 0.16 (ic form of the IDL interface) 403.11 356.33 B
1 F
0.25 0.16 (: For C) 519.18 356.33 B
0.22 (and C++ this is a header \336le with C or C++ de\336nitions) 328.75 345.09 P
0.25 0.46 (for whatever methods, constants, types, etc. were) 328.75 333.84 B
0.25 0.05 (def) 328.75 322.6 B
0.25 0.05 (ined in the IDL interface. W) 341.13 322.6 B
0.25 0.05 (e will give an example) 456.35 322.6 B
(below) 328.75 311.35 T
(.) 352.54 311.35 T
4 9 Q
(2.) 315 294.11 T
2 10 Q
0.25 0.14 (Client side stub code) 328.74 294.11 B
1 F
0.25 0.14 (: Code meant to be dynamically) 416.11 294.11 B
-0.14 (linked into a client\325) 328.75 282.86 P
-0.14 (s program to access an object that is) 405.83 282.86 P
0.25 0.21 (implemented in another address space or on another) 328.75 271.62 B
(machine.) 328.75 260.37 T
4 9 Q
(3.) 315 243.13 T
2 10 Q
0.19 (Server side stub code) 328.74 243.13 P
1 F
0.19 (: Code to be linked into an object) 414.59 243.13 P
0.25 0.16 (manager to translate incoming remote object invoca-) 328.75 231.88 B
0.25 0.34 (tions into the run-time environment of the object\325) 328.75 220.64 B
0.25 0.34 (s) 545.11 220.64 B
(implementation.) 328.75 209.39 T
0.25 0.1 (These three outputs from an IDL compiler enable clients) 315 193.15 B
-0.18 (and implementations in a particular language, e.g., C++, to) 315 181.15 P
0.25 0.22 (treat IDL-def) 315 169.15 B
0.25 0.22 (ined objects as if they were just objects in) 370.53 169.15 B
0.25 0.2 (C++. Thus, a programmer writing in C++ would use an) 315 157.15 B
0.25 0.29 (IDL-to-C++ compiler to get C++ header f) 315 145.15 B
0.25 0.29 (iles and stub) 494.97 145.15 B
-0.2 (code to de\336ne objects as if they were implemented in C++.) 315 133.15 P
0.25 0.19 (At the same time, the object\325) 315 121.15 B
0.25 0.19 (s implementation might be) 436.74 121.15 B
0.25 0.03 (written in C and would, therefore, have used an IDL-to-C) 315 109.15 B
-0.07 (compiler to generate the server side stub code to transform) 315 97.15 P
FMENDPAGE
%%EndPage: "2" 3
%%Page: "3" 3
612 792 0 FMBEGINPAGE
1 10 Q
0 X
0 K
0.25 0.23 (incoming calls into corresponding C procedure invoca-) 58.5 713.33 B
(tions on the C \322objects\323 corresponding to the IDL objects.) 58.5 701.33 T
0 11 Q
(2.1) 58.5 668.67 T
(An example) 85.5 668.67 T
1 10 Q
0.25 0.09 (T) 58.5 652.33 B
0.25 0.09 (o give the f) 64 652.33 B
0.25 0.09 (lavor of IDL, Figure 1 shows an example of) 110.61 652.33 B
-0.18 (IDL use to de\336ne the Spring IO interface. For the purposes) 58.5 640.33 P
-0 (of this overview) 58.5 628.33 P
-0 (, details have been elided, but the example) 122.83 628.33 P
(is derived from an actual use of IDL.) 58.5 616.33 T
0.25 0.08 (The interface def) 58.5 474 B
0.25 0.08 (ines objects of type) 128.03 474 B
2 F
0.25 0.08 (IO) 210.61 474 B
1 F
0.25 0.08 (. In this example,) 221.31 474 B
0.25 0.13 (any) 58.5 462 B
2 F
0.25 0.13 (IO) 76.21 462 B
1 F
0.25 0.13 ( object has two operations def) 87.02 462 B
0.25 0.13 (ined on it,) 211.34 462 B
2 F
0.25 0.13 (r) 256.43 462 B
0.25 0.13 (ead) 260.09 462 B
1 F
0.25 0.13 ( and) 274.92 462 B
2 F
0.25 0.08 (write) 58.5 450 B
1 F
0.25 0.08 (. The) 79.48 450 B
2 F
0.25 0.08 (r) 103.53 450 B
0.25 0.08 (ead) 107.14 450 B
1 F
0.25 0.08 ( operation takes a parameter) 121.83 450 B
0.25 0.08 (,) 237.52 450 B
2 F
0.25 0.08 (size) 242.94 450 B
1 F
0.25 0.08 (, of type) 258.28 450 B
2 F
0.25 0.19 (long) 58.5 438 B
1 F
0.25 0.19 (, and returns an object of type) 77.05 438 B
2 F
0.25 0.19 (raw_data) 206.59 438 B
1 F
0.25 0.19 (. The) 246.47 438 B
2 F
0.25 0.19 (write) 271.17 438 B
1 F
-0.2 (method returns nothing \050) 58.5 426 P
2 F
-0.2 (void) 157.05 426 P
1 F
-0.2 (\051 and takes a single ar) 174.27 426 P
-0.2 (gument,) 260 426 P
2 F
(data) 58.5 414 T
1 F
(, whose type is) 76.28 414 T
2 F
(raw_data.) 138.22 414 T
1 F
0.25 0.12 (As noted above, instead of returning normally) 58.5 397 B
0.25 0.12 (, a method) 248.96 397 B
(may raise one of a number of de\336ned exceptions.) 58.5 385 T
(A complete description of IDL is given in [15].) 58.5 368 T
0 12 Q
(3) 58.5 331.67 T
(Objects in Spring) 85.5 331.67 T
1 10 Q
0.25 0.25 (Although all Spring interfaces are def) 58.5 311 B
0.25 0.25 (ined in IDL, IDL) 219.63 311 B
0.05 (says nothing about how operations on an object are imple-) 58.5 299 P
0.25 0.05 (mented, or even how an operation request should be con-) 58.5 287 B
(veyed to an object.) 58.5 275 T
-0.08 (The users of an object merely invoke operations de\336ned in) 58.5 258 P
0.2 (its interface. How and where the operation is actually per-) 58.5 246 P
0.25 0.09 (formed is the responsibility of the object run-time and of) 58.5 234 B
0.25 0.1 (the object implementation. Sometimes the operation will) 58.5 222 B
0.25 0.39 (be performed in the same address space as the client,) 58.5 210 B
0.25 0 (sometimes in another address space on the same machine,) 58.5 198 B
(sometimes on another machine.) 58.5 186 T
0.25 0 (W) 58.5 169 B
0.25 0 (e will often use the phrase \322invoke an object\323 as a short) 67.14 169 B
(form for \322invoke an operation on an object\323.) 58.5 157 T
0 11 Q
(3.1) 58.5 124.34 T
(Server) 85.5 124.34 T
(-based objects) 116.25 124.34 T
1 10 Q
0.25 0.19 (Many objects in Spring are implemented in servers that) 58.5 108 B
0.25 0.05 (are in dif) 58.5 96 B
0.25 0.05 (ferent address spaces from their clients. W) 95.41 96 B
0.25 0.05 (e pro-) 268.45 96 B
58.5 81 292.5 720 C
58.5 488.67 291.49 613 C
76.5 517.5 292.5 598.5 R
7 X
0 K
V
1 8 Q
0 X
(interface io {) 76.5 593.17 T
(    raw_data read\050in long size\051 raises \050access_denied, alerted,) 76.5 582.17 T
-0 (                                                                       failure, end_of_data\051) 76.5 571.17 P
(    void write\050in raw_data data\051 raises \050access_denied, alerted,) 76.5 549.17 T
-0.18 (                                             incomplete_write, failure, end_of_data\051) 76.5 538.17 P
(};) 76.5 527.17 T
107.14 495.5 235.71 509.79 R
7 X
V
107.14 494.79 235.71 500.79 C
107.14 498.79 341.14 498.79 2 L
0.25 H
2 Z
0 X
0 K
N
58.5 488.67 291.49 613 C
1 9 Q
0 X
0 K
(FIGURE  1.) 107.14 503.79 T
(IO Interface in IDL) 161.14 503.79 T
58.5 81 292.5 720 C
0 0 612 792 C
1 10 Q
0 X
0 K
0.05 (vide special support for these kinds of objects by automat-) 315 713.33 P
0.25 0.35 (ically generating) 315 701.33 B
2 F
0.25 0.35 (stubs) 391.23 701.33 B
1 F
0.25 0.35 ( \050see Section 2\051 which take the) 413.54 701.33 B
0.25 0.09 (ar) 315 689.33 B
0.25 0.09 (guments for these calls and marshal them for transmis-) 322.77 689.33 B
0.25 0.24 (sion to the server and which unmarshal any results and) 315 677.33 B
0.25 0.08 (return these to the client application. These stubs use our) 315 665.33 B
0.25 0.04 (subcontract mechanism \050see Section 3.3\051 to communicate) 315 653.33 B
(with the remote server) 315 641.33 T
(.) 404.15 641.33 T
0.25 0.02 (T) 315 459.32 B
0.25 0.02 (ypically) 320.43 459.32 B
0.25 0.02 (, server) 352.15 459.32 B
0.25 0.02 (-based objects use the Spring) 381.79 459.32 B
2 F
0.25 0.02 (doors) 502.77 459.32 B
1 F
0.25 0.02 ( com-) 525.64 459.32 B
0.25 0.09 (munication mechanism \050see section 5.1\051 to communicate) 315 447.32 B
0.25 0.03 (between the client and the server) 315 435.32 B
0.25 0.03 (. Most subcontracts opti-) 448.09 435.32 B
0.25 0.03 (mize the case when the client and the server happen to be) 315 423.32 B
0.25 0.2 (in the same address space by simply performing a local) 315 411.32 B
(call, rather than calling through the kernel.) 315 399.32 T
0 11 Q
(3.2) 315 366.65 T
(Serverless objects) 342 366.65 T
1 10 Q
0.25 0.15 (Spring also supports serverless objects, where the entire) 315 350.32 B
0.25 0.09 (state of the object is always in the client\325) 315 338.32 B
0.25 0.09 (s address space.) 483.6 338.32 B
0.25 0.41 (This implementation mechanism is suitable for light-) 315 326.32 B
0.02 (weight objects such as names or raw_data. When a server-) 315 314.32 P
0.25 0.07 (less object is passed between address spaces, the object\325) 315 302.32 B
0.25 0.07 (s) 545.11 302.32 B
0.25 0.16 (state is copied to the new address space. Thus passing a) 315 290.32 B
0.25 0.02 (serverless object is more like passing a struct, while pass-) 315 278.32 B
0.25 0.03 (ing a server) 315 266.32 B
0.25 0.03 (-based object is more like passing a pointer to) 362.31 266.32 B
(its remote state.) 315 254.32 T
315 81 549 720 C
315 473.98 549 638 C
366.06 576.5 433.73 622 R
7 X
0 K
V
0.5 H
2 Z
0 X
N
369.21 585.5 418.71 612.5 R
7 X
V
1 10 Q
0 X
(client) 382.85 605.83 T
(application) 371.74 593.83 T
347.43 574.67 438.77 574.67 2 L
3 H
8 X
N
313.5 556.17 351.06 583.17 R
7 X
V
0 X
(IDL) 323.95 576.5 T
( interface) 313.54 564.5 T
366.06 541 433.73 574 R
7 X
V
0.5 H
0 X
N
369.21 544.2 413.37 569.78 R
7 X
V
0 X
(client) 380.18 563.11 T
(stubs) 381.01 551.11 T
366.06 521.33 433.73 541 R
7 X
V
0 X
N
369.21 523.24 418.71 537.15 R
7 X
V
0 X
(subcontract) 370.91 530.48 T
479.39 576.5 547.06 622 R
7 X
V
0 X
N
494.41 585.5 543.91 612.5 R
7 X
V
0 X
(server) 506.94 605.83 T
(application) 496.94 593.83 T
479.39 541 547.06 576.67 R
7 X
V
0 X
N
499.74 544.2 543.91 569.78 R
7 X
V
0 X
(server) 509.61 563.11 T
(stubs) 511.55 551.11 T
479.39 521.33 547.06 541 R
7 X
V
0 X
N
494.41 523.24 543.91 537.15 R
7 X
V
0 X
(subcontract) 496.11 530.48 T
452.75 533.69 461.43 531.33 452.82 528.73 452.78 531.21 4 Y
V
438.1 531 452.79 531.21 2 L
1 H
N
456.1 531.33 479.43 531.33 2 L
N
270 360 9.33 19.42 480.1 550.75 A
486.95 583.35 489.43 592 491.92 583.35 489.43 583.35 4 Y
V
489.43 551.33 489.43 583.35 2 L
N
180 270 10 16.08 436.77 547.08 A
429.43 554.62 426.85 546 424.47 554.68 426.95 554.65 4 Y
V
426.96 554.65 427.35 587.5 2 L
N
328.1 483 518.1 501 R
7 X
V
328.1 486 518.1 492 C
328.1 490 562.1 490 2 L
0.25 H
2 Z
0 X
0 K
N
315 473.98 549 638 C
1 9 Q
0 X
0 K
(FIGURE  2.) 328.1 495 T
(A call on a server) 382.1 495 T
(-based object) 445.4 495 T
315 81 549 720 C
0 0 612 792 C
315 81 549 720 C
315 103.02 549 250.98 C
366.06 189.48 471.73 234.98 R
7 X
0 K
V
0.5 H
2 Z
0 X
N
370.98 198.48 448.27 225.48 R
7 X
V
1 10 Q
0 X
(client) 398.52 218.82 T
(application) 387.41 206.82 T
347.43 187.65 487.1 188.48 2 L
3 H
8 X
N
313.5 169.15 351.06 196.15 R
7 X
V
0 X
(IDL) 323.95 189.48 T
( interface) 313.54 177.48 T
366.06 149.48 471.73 186.98 R
7 X
V
0.5 H
0 X
N
370.48 154.68 439.45 180.26 R
7 X
V
0 X
(object) 392.74 173.59 T
(implementation) 373.57 161.59 T
460.43 170.11 457.85 161.49 455.47 170.17 457.95 170.14 4 Y
V
457.96 170.14 458.35 202.98 2 L
1 H
N
329.1 113.48 519.1 131.48 R
7 X
V
329.1 116.48 519.1 122.48 C
329.1 120.48 563.1 120.48 2 L
0.25 H
2 Z
0 X
0 K
N
315 103.02 549 250.98 C
1 9 Q
0 X
0 K
(FIGURE  3.) 329.1 125.48 T
(A call on a serverless object) 383.1 125.48 T
315 81 549 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "3" 4
%%Page: "4" 4
612 792 0 FMBEGINPAGE
0 11 Q
0 X
0 K
(3.3) 58.5 712.67 T
(Subcontract) 85.5 712.67 T
1 10 Q
0.25 0.03 (Spring provides a f) 58.5 696.33 B
0.25 0.03 (lexible mechanism for plugging in dif-) 135.58 696.33 B
0.25 0.29 (ferent kinds of object runtime machinery) 58.5 684.33 B
0.25 0.29 (. This mecha-) 234.14 684.33 B
0.25 0.36 (nism, known as) 58.5 672.33 B
2 F
0.25 0.36 (subcontract,) 129.68 672.33 B
1 F
0.25 0.36 (allows control over how) 186.86 672.33 B
0.25 0.09 (object invocation is implemented, over how object refer-) 58.5 660.33 B
0.25 0.03 (ences are transmitted between address spaces, how object) 58.5 648.33 B
0.25 0.05 (references are released, and similar object runtime opera-) 58.5 636.33 B
(tions [2].) 58.5 624.33 T
0.25 0.14 (For example, the widely used) 58.5 606.33 B
2 F
0.25 0.14 (singleton) 184.27 606.33 B
1 F
0.25 0.14 ( subcontract pro-) 222.18 606.33 B
0.25 0.29 (vides simple access to objects in other address spaces.) 58.5 594.33 B
0.25 0.07 (When a client invokes a singleton object, the subcontract) 58.5 582.33 B
0.25 0.42 (implements the object invocation by transmitting the) 58.5 570.33 B
0.23 (request to the address space where the object\325) 58.5 558.33 P
0.23 (s implemen-) 242.55 558.33 P
(tation lives.) 58.5 546.33 T
-0.06 (W) 58.5 529.33 P
-0.06 (e have also implemented subcontracts that support repli-) 67.14 529.33 P
-0.21 (cation. These subcontracts implement object invocation by) 58.5 517.33 P
0.25 0.19 (transmitting a request to one or more of a set of servers) 58.5 505.33 B
(that are conspiring to support a replicated object.) 58.5 493.33 T
-0.08 (In addition we have used subcontract to implement a num-) 58.5 476.33 P
-0.19 (ber of dif) 58.5 464.33 P
-0.19 (ferent object runtime mechanisms, including sup-) 95.15 464.33 P
(port for cheap objects, for caching, and for crash recovery) 58.5 452.33 T
(.) 289.71 452.33 T
0 12 Q
(4) 58.5 416 T
(Overall system structur) 85.5 416 T
(e) 206.59 416 T
1 10 Q
0.25 0.11 (Spring is or) 58.5 395.33 B
0.25 0.11 (ganized as a microkernel system. Running in) 106.78 395.33 B
0.25 0.24 (kernel mode are the) 58.5 383.33 B
2 F
0.25 0.24 (nucleus) 145.97 383.33 B
1 F
0.25 0.24 (, which manages processes) 178.21 383.33 B
0.25 0.03 (and inter) 58.5 371.33 B
0.25 0.03 (-process communication, and the) 94.04 371.33 B
2 F
0.25 0.03 (virtual memory) 230.54 371.33 B
0.25 0.11 (manager) 58.5 359.33 B
1 F
0.25 0.11 (, which controls the memory management hard-) 94.43 359.33 B
0.25 0.22 (ware. The nucleus is entered by a trap mechanism. The) 58.5 347.33 B
0.25 0.09 (virtual memory manager responds to page faults but also) 58.5 335.33 B
0.25 0.27 (provides objects that interact with external pagers \050see) 58.5 323.33 B
0.25 0.03 (Section 8.2\051 and, in this guise, looks like any other object) 58.5 311.33 B
(server) 58.5 299.33 T
(.) 82.38 299.33 T
58.5 81 292.5 720 C
58.5 84.67 292.5 296 C
79.5 112.24 269.12 146.4 R
7 X
0 K
V
0.5 H
2 Z
0 X
N
70.49 155.18 128.18 180.57 12.69 RR
7 X
V
0 X
N
140.99 212.8 198.68 230.18 8.69 RR
7 X
V
0 X
N
73.89 213.78 131.58 240.67 13.44 RR
7 X
V
0 X
N
144.92 252.63 202.61 278.02 12.69 RR
7 X
V
0 X
N
141.33 155.18 199.03 179.07 11.94 RR
7 X
V
0 X
N
218 184.61 275.69 210 12.69 RR
7 X
V
0 X
N
210.15 218.03 267.85 243.42 12.69 RR
7 X
V
0 X
N
5 8 Q
(network) 82.03 172.88 T
(proxy) 82.03 162.88 T
(caching) 233.23 200.92 T
(fs) 233.23 190.92 T
(unix) 87.81 233.62 T
144.19 265.67 201.11 265.67 2 L
10 X
V
N
0 X
(libue) 156.76 257.71 T
(csh) 159.84 269.25 T
80.97 252.63 138.66 278.02 12.69 RR
7 X
V
0 X
N
82.24 265.67 139.16 265.67 2 L
10 X
V
N
0 X
(libue) 92.82 257.71 T
(machine) 155.14 169.99 T
(name server) 149.14 161.49 T
(dynamic linker) 145.36 220.27 T
(tty) 225.69 232.49 T
(server) 225.69 222.49 T
217.67 252.3 275.36 289.35 18 RR
7 X
V
0 X
N
(Spring) 234.91 276.86 T
(X1) 94.08 268.49 T
(1 server) 103.27 268.49 T
60.91 86.6 290.91 103.52 R
7 X
V
60.91 88.52 290.91 94.52 C
60.91 92.52 294.91 92.52 2 L
0.25 H
2 Z
0 X
0 K
N
58.5 84.67 292.5 296 C
1 9 Q
0 X
0 K
(FIGURE  4.) 60.91 97.52 T
(Major system components of a Spring node) 114.91 97.52 T
218.83 155.18 276.53 180.57 12.69 RR
7 X
V
0.5 H
2 Z
0 X
N
5 8 Q
(Spring) 229.5 171.52 T
(\336le system) 228.67 162.68 T
196.57 117.38 254.26 142.76 12.69 RR
7 X
V
0 X
N
(vm) 213.43 133.76 T
(manager) 213.43 125.76 T
(Kernel) 153.93 117.71 T
(process) 87.81 226.4 T
(server) 87.81 218.4 T
89.23 116.8 146.93 142.18 12.69 RR
7 X
V
0 X
N
(nucleus) 102.77 128.65 T
140.91 182.61 199.51 206.5 11.94 RR
7 X
V
0 X
N
(authentication) 146.94 196.42 T
(       manager) 140.85 187.92 T
70.04 184.61 128.64 205 10.19 RR
7 X
V
0 X
N
( TCP/UDP/IP) 74.56 192.42 T
(Application) 227.41 265.53 T
58.5 81 292.5 720 C
0 0 612 792 C
1 10 Q
0 X
0 K
0.25 0.06 (All other system services, including naming, paging, net-) 315 713.33 B
0.25 0.34 (work IO, f) 315 701.33 B
0.25 0.34 (ilesystems, keyboard management, etc., are) 360.27 701.33 B
0.25 0.08 (implemented as user) 315 689.33 B
0.25 0.08 (-level servers. These servers provide) 398.94 689.33 B
0.25 0.22 (object-oriented interfaces to the resources they manage) 315 677.33 B
0.25 0.02 (and clients communicate with system servers by invoking) 315 665.33 B
(these objects.) 315 653.33 T
0.25 0.45 (Spring is inherently distributed. All the services and) 315 636.33 B
0.25 0.11 (objects available on one node are also available on other) 315 624.33 B
(nodes in the same distributed system.) 315 612.33 T
0 12 Q
(5) 315 576 T
(The nucleus) 342 576 T
1 10 Q
0.25 0.34 (The nucleus is Spring\325) 315 555.33 B
0.25 0.34 (s microkernel. It supports three) 412.87 555.33 B
(basic abstractions:) 315 543.33 T
2 F
(domains) 391.1 543.33 T
1 F
(,) 424.99 543.33 T
2 F
(thr) 429.99 543.33 T
(eads) 441.29 543.33 T
1 F
(, and) 459.62 543.33 T
2 F
(doors) 481.56 543.33 T
1 F
( [1].) 504.34 543.33 T
2 F
0.24 (Domains) 315 525.33 P
1 F
0.24 ( are analogous to processes in Unix or to tasks in) 351.11 525.33 P
0.25 0.12 (Mach. They provide an address space for applications to) 315 513.33 B
0.25 0.06 (run in and act as a container for various kinds of applica-) 315 501.33 B
(tion resources such as threads and doors.) 315 489.33 T
2 F
0.25 0.19 (Thr) 315 472.33 B
0.25 0.19 (eads) 329.66 472.33 B
1 F
0.25 0.19 ( execute within domains. T) 348.75 472.33 B
0.25 0.19 (ypically each Spring) 462.64 472.33 B
0.25 0.08 (domain is multi-threaded, with separate threads perform-) 315 460.33 B
(ing dif) 315 448.33 T
(ferent parts of an application.) 341.21 448.33 T
2 F
0.25 0.13 (Doors) 315 431.33 B
1 F
0.25 0.13 ( support object-oriented calls between domains. A) 340.63 431.33 B
0.25 0.02 (door describes a particular entry point to a domain, repre-) 315 419.33 B
0.25 0.03 (sented by both a PC and a unique value nominated by the) 315 407.33 B
0.25 0.06 (domain. This unique value is typically used by the object) 315 395.33 B
0.25 0.01 (server to identify the state of the object; e.g., if the imple-) 315 383.33 B
0.17 (mentation is written in C++ it might be a pointer to a C++) 315 371.33 P
(object.) 315 359.33 T
0 11 Q
(5.1) 315 326.67 T
(Doors) 342 326.67 T
1 10 Q
0.25 0.06 (Doors are pieces of protected nucleus state. Each domain) 315 310.33 B
0.25 0.08 (has a table of the doors to which it has access. A domain) 315 298.33 B
0.25 0.14 (refers to doors using) 315 286.33 B
2 F
0.25 0.14 (door identif) 403.58 286.33 B
0.25 0.14 (iers) 451.93 286.33 B
1 F
0.25 0.14 (, which are mapped) 467.51 286.33 B
0.01 (through the domain\325) 315 274.33 P
0.01 (s door table into actual doors. A given) 396.14 274.33 P
0.25 0.04 (door may be referenced by several dif) 315 262.33 B
0.25 0.04 (ferent door identif) 469.42 262.33 B
0.25 0.04 (i-) 542.89 262.33 B
(ers in several dif) 315 250.33 T
(ferent domains.) 381.19 250.33 T
0.25 0.03 (Possession of a valid door gives the possessor the right to) 315 232.33 B
(send an invocation request to the given door) 315 220.33 T
(.) 491.37 220.33 T
0.25 0.03 (A valid door can only be obtained with the consent of the) 315 203.33 B
-0.06 (tar) 315 191.33 P
-0.06 (get domain or with the consent of someone who already) 325.37 191.33 P
(has a door identi\336er for the same door) 315 179.33 T
(.) 466.92 179.33 T
0.25 0.13 (As far as the tar) 315 162.33 B
0.25 0.13 (get domain is concerned, all invocations) 381.42 162.33 B
0.25 0.19 (on a given door are equivalent. It is only aware that the) 315 150.33 B
0.06 (invoker has somehow acquired an appropriate door identi-) 315 138.33 P
0.25 0.21 (f) 315 126.33 B
0.25 0.21 (ier) 317.99 126.33 B
0.25 0.21 (. It does not know who the invoker is or which door) 328.61 126.33 B
(identi\336er they have used.) 315 114.33 T
FMENDPAGE
%%EndPage: "4" 5
%%Page: "5" 5
612 792 0 FMBEGINPAGE
0 11 Q
0 X
0 K
(5.2) 58.5 493.35 T
(Object Invocation V) 85.5 493.35 T
(ia Doors) 180.42 493.35 T
1 10 Q
-0.19 (Using doors, Spring provides a highly ef) 58.5 477.02 P
-0.19 (\336cient mechanism) 219.64 477.02 P
0.25 0 (for cross-address-space object invocation. A thread in one) 58.5 465.02 B
0.25 0.04 (address space can issue a door invocation for an object in) 58.5 453.02 B
0.25 0.39 (another address space. The nucleus allocates a server) 58.5 441.02 B
0.25 0.24 (thread in the tar) 58.5 429.02 B
0.25 0.24 (get address space and quickly transfers) 126.24 429.02 B
0.25 0.22 (control to that thread, passing it information associated) 58.5 417.02 B
0.14 (with the door plus the ar) 58.5 405.02 P
0.14 (gument data passed by the calling) 156.52 405.02 P
(thread.) 58.5 393.02 T
0.08 (When the called thread wishes to return, the nucleus deac-) 58.5 375.02 P
0.25 0.04 (tivates the calling thread and reactivates the caller thread,) 58.5 363.02 B
(passing it any return data speci\336ed by the called thread.) 58.5 351.02 T
0.25 0.11 (For a call with minimal ar) 58.5 334.02 B
0.25 0.11 (guments, Spring can execute a) 166.55 334.02 B
0.25 0.4 (low-level cross-address-space door call in 1) 58.5 322.02 B
0.25 0.4 (1) 252 322.02 B
6 F
0.25 0.4 (m) 260.54 322.02 B
1 F
0.25 0.4 (s on a) 266.69 322.02 B
0.25 0.15 (SP) 58.5 310.02 B
0.25 0.15 (ARCstation 2, which is signif) 69 310.02 B
0.25 0.15 (icantly faster than using) 192.37 310.02 B
0.24 (more general purpose inter) 58.5 298.02 P
0.24 (-process communication mech-) 166.49 298.02 P
(anisms [1].) 58.5 286.02 T
0.25 0.06 (Doors can be passed as ar) 58.5 269.02 B
0.25 0.06 (guments or results of calls. The) 163.98 269.02 B
0.25 0.14 (nucleus will create appropriate door table entries for the) 58.5 257.02 B
-0.21 (given doors in the recipient\325) 58.5 245.02 P
-0.21 (s door table and give the recip-) 169.88 245.02 P
(ient door identi\336ers for them.) 58.5 233.02 T
0 12 Q
(6) 58.5 196.69 T
(Network Pr) 85.5 196.69 T
(oxies) 145.6 196.69 T
1 10 Q
0.25 0.44 (T) 58.5 176.02 B
0.25 0.44 (o provide object invocation across the network, the) 64.35 176.02 B
0.25 0.28 (nucleus invocation mechanism is extended by) 58.5 164.02 B
2 F
0.25 0.28 (network) 258.58 164.02 B
0.17 (pr) 58.5 152.02 P
0.17 (oxies) 67.02 152.02 P
1 F
0.17 ( that connect up the nuclei of dif) 87.57 152.02 P
0.17 (ferent machines in) 218.29 152.02 P
0.25 0.22 (a transparent way) 58.5 140.02 B
0.25 0.22 (. These proxies are normal user) 132.64 140.02 B
0.25 0.22 (-mode) 266.07 140.02 B
0.25 0.21 (server domains and receive no special support from the) 58.5 128.02 B
0.25 0 (nucleus. One Spring machine might include several proxy) 58.5 116.02 B
(domains that speak dif) 58.5 104.02 T
(ferent network protocols.) 148.59 104.02 T
58.5 81 292.5 720 C
58.5 500.69 285.01 720 C
58.5 500.69 285.01 720 R
7 X
0 K
V
143.33 589.83 171.14 598.83 R
V
0.5 H
2 Z
0 X
N
143.33 616.83 171.14 625.83 R
7 X
V
0 X
N
143.33 607.83 171.14 616.83 R
7 X
V
0 X
N
143.33 598.83 171.14 607.83 R
7 X
V
0 X
N
143.33 625.83 171.14 634.83 R
7 X
V
0 X
N
143.68 662 172 671 R
7 X
V
0 X
N
143.68 689 172 698 R
7 X
V
0 X
N
143.68 680 172 689 R
7 X
V
0 X
N
143.68 671 172 680 R
7 X
V
0 X
N
143.68 698 172 707 R
7 X
V
0 X
N
207 675.5 230.5 693.5 R
7 X
V
0 X
N
207 639.5 230.5 657.5 R
7 X
V
0 X
N
207 603.5 230.5 621.5 R
7 X
V
0 X
N
201.05 692.22 208 686.5 199.07 687.67 200.06 689.94 4 Y
V
172 702 200.06 689.94 2 L
N
198.87 682.01 207.81 681 199.7 677.11 199.28 679.56 4 Y
V
172 675 199.29 679.56 2 L
N
199.99 641.88 207.99 646 203.39 638.27 201.69 640.08 4 Y
V
172 612 201.7 640.07 2 L
N
198.98 610.3 207.81 612 201.22 605.88 200.1 608.09 4 Y
V
172 594 200.1 608.09 2 L
N
200.88 656.23 207.82 650.5 198.89 651.68 199.88 653.96 4 Y
V
172 666 199.89 653.96 2 L
N
247 656 286 690 R
7 X
V
1 10 Q
0 X
(Target) 253.45 683.33 T
(Domain) 250.39 671.33 T
246.5 593 287.5 627.5 R
7 X
V
0 X
(Target) 253.95 620.83 T
(Domain) 250.89 608.83 T
239.85 686.98 248.5 684.5 239.85 682.02 239.85 684.5 4 Y
V
230.5 684.5 239.85 684.5 2 L
N
239.66 667.15 246.49 673 243.8 664.41 241.73 665.78 4 Y
V
230.5 648.5 241.74 665.78 2 L
N
238.1 615.92 246.99 614.5 238.71 611 238.4 613.46 4 Y
V
230.5 612.5 238.41 613.45 2 L
N
144 552.67 175 579.67 R
7 X
V
0 X
(Door) 149.23 573 T
(tables) 147.84 561 T
201 561.67 236 579.67 R
7 X
V
0 X
(Doors) 201 573 T
65 606 103 620 R
7 X
V
0 X
(Domain) 65 613.33 T
62.5 670 102.5 687.5 R
7 X
V
0 X
(Domain) 62.5 680.83 T
134.35 696.48 143 694 134.35 691.52 134.35 694 4 Y
V
97.5 694 134.35 694 2 L
N
134.32 678.39 143 676 134.37 673.43 134.35 675.91 4 Y
V
97.5 675.5 134.35 675.91 2 L
N
134.35 624.48 143 622 134.35 619.52 134.35 622 4 Y
V
99.5 622 134.35 622 2 L
N
134.35 606.48 143 604 134.35 601.52 134.35 604 4 Y
V
98.73 604 134.35 604 2 L
N
79.5 553.67 133.5 579.67 R
7 X
V
0 X
(Door) 96.22 573 T
(Identifiers) 85.95 561 T
86.5 512 274.5 530 R
7 X
V
86.5 515 274.5 521 C
86.5 519 320.5 519 2 L
0.25 H
2 Z
0 X
0 K
N
58.5 500.69 285.01 720 C
1 9 Q
0 X
0 K
(FIGURE  5.) 86.5 524 T
(Domains, doors, and door tables) 140.5 524 T
58.5 81 292.5 720 C
0 0 612 792 C
1 10 Q
0 X
0 K
0.25 0.16 (Proxies transparently forward door invocations between) 315 713.33 B
0.25 0.01 (domains on dif) 315 701.33 B
0.25 0.01 (ferent machines. In Figure 6, when a client) 375.46 701.33 B
-0.05 (on machine B invokes door Y) 315 689.33 P
-0.05 (, this door invocation goes to) 433.15 689.33 P
0.25 0.18 (network proxy B; B forwards the call over the net to its) 315 677.33 B
0.25 0.06 (buddy) 315 665.33 B
0.25 0.06 (, proxy A; proxy A does a door invocation; and the) 339.63 665.33 B
(door invocation then arrives in the server domain.) 315 653.33 T
0.25 0.01 (Notice that neither the client nor the server need be aware) 315 469.53 B
0.25 0.18 (that the proxies exist. The client just performs a normal) 315 457.53 B
0.25 0.2 (door invocation, the server just sees a normal incoming) 315 445.53 B
(door invocation.) 315 433.53 T
0.25 0.19 (Door identif) 315 416.53 B
0.25 0.19 (iers are mapped into) 366.12 416.53 B
2 F
0.25 0.19 (network handles) 454.94 416.53 B
1 F
0.25 0.19 ( when) 523.84 416.53 B
0.25 0.27 (they are transmitted over the network, and are mapped) 315 404.53 B
(back into doors when they are received from the network.) 315 392.53 T
0.25 0.05 (A network handle contains a network address for the cre-) 315 375.53 B
0.25 0.1 (ating proxy) 315 363.53 B
0.25 0.1 (, and a set of bits to identify a particular door) 361.52 363.53 B
0.25 0.14 (that is exported by this proxy) 315 351.53 B
0.25 0.14 (. In theory the set of bits is) 436.63 351.53 B
0.25 0 (lar) 315 339.53 B
0.25 0 (ge enough to make it hard for a malicious user to guess) 325.37 339.53 B
0.25 0.12 (the value of a network handle, thereby providing protec-) 315 327.53 B
(tion against users for) 315 315.53 T
(ging network handles.) 398.42 315.53 T
0 12 Q
(7) 315 279.2 T
(Spring\325) 342 279.2 T
(s security model) 380.23 279.2 T
1 10 Q
0.25 0.51 (One of Spring\325) 315 258.53 B
0.25 0.51 (s goals is to provide secure access to) 382.06 258.53 B
0.25 0.02 (objects, so that object implementations can control access) 315 246.53 B
0.25 0.03 (to particular data or services. T) 315 234.53 B
0.25 0.03 (o provide security we sup-) 441.09 234.53 B
-0.09 (port two basic mechanisms, Access Control Lists and soft-) 315 222.53 P
(ware capabilities.) 315 210.53 T
0.05 (Any object can support an Access Control List \050ACL\051 that) 315 192.53 P
0.25 0.04 (def) 315 180.53 B
0.25 0.04 (ines which users of groups of users are allowed access) 327.33 180.53 B
0.25 0.02 (to that object. These Access Control Lists can be checked) 315 168.53 B
0.25 0.23 (at runtime to determine whether a given client is really) 315 156.53 B
(allowed to access a given object.) 315 144.53 T
0.25 0.14 (When a given client proves that it is allowed to access a) 315 127.53 B
-0.2 (given object, the object\325) 315 115.53 P
-0.2 (s server creates an) 410.51 115.53 P
2 F
-0.2 (object r) 485.24 115.53 P
-0.2 (efer) 515.5 115.53 P
-0.2 (ence) 530.68 115.53 P
1 F
0.25 0.24 (that acts as a software capability) 315 103.53 B
0.25 0.24 (. This object reference) 453.52 103.53 B
0.25 0.09 (uses a nucleus door as part of its representation so that it) 315 91.53 B
315 81 549 720 C
315 483.2 549 650 C
315 483.2 556.99 650 R
7 X
0 K
V
330.21 598.5 367.71 644 R
V
0.5 H
2 Z
0 X
N
332.65 607.5 365.28 634.5 R
7 X
V
1 10 Q
0 X
(Client) 336.74 627.83 T
(Domain) 332.85 615.83 T
376.71 599 411.21 644 R
7 X
V
0 X
N
378.71 608 409.21 635 R
7 X
V
0 X
(Proxy) 382.02 628.33 T
(B) 390.63 616.33 T
328.71 525 412.21 579 R
7 X
V
0 X
N
332.98 534 396.28 543 R
7 X
V
0 X
(Nucleus B) 343.66 536.33 T
354.43 564.5 385.33 573.5 R
7 X
V
0 X
(Door Y) 354.74 566.83 T
352.69 561.5 385.82 577 R
0.4 H
N
506.21 597.5 543.71 643 R
7 X
V
0.5 H
0 X
N
508.65 606.5 541.28 633.5 R
7 X
V
0 X
(Server) 511.92 626.83 T
(Domain) 508.86 614.83 T
462.71 598 497.21 643 R
7 X
V
0 X
N
464.71 607 493.71 634 R
7 X
V
0 X
(Proxy) 467.27 627.33 T
(A) 475.6 615.33 T
461.71 524 545.21 578 R
7 X
V
0 X
N
477.65 533 540.95 542 R
7 X
V
0 X
(Nucleus A) 488.06 535.33 T
488.6 563.5 519.5 572.5 R
7 X
V
0 X
(Door X) 488.91 565.83 T
488.11 560.5 521.24 576 R
0.4 H
N
432.39 624.81 443.92 621.5 432.39 618.19 432.39 621.5 4 Y
V
410.92 621.5 432.39 621.5 2 L
N
437.42 622 463.42 622 2 L
N
527.03 587.2 530.42 596.5 532.47 586.81 529.75 587.01 4 Y
V
0.5 H
270 339 10 26.5 520.42 596.5 A
482.61 575.64 486.92 567.5 478.95 572.12 480.78 573.88 4 Y
V
180 232 10 30 486.92 597.5 A
395.71 590.22 398.92 599 400.85 589.86 398.28 590.04 4 Y
V
270 342 13 29 385.92 599 A
346.03 576.14 352.42 569.5 343.48 571.74 344.76 573.94 4 Y
V
180 238 14.5 29 352.42 598.5 A
314.76 495 554.76 511.17 R
7 X
V
315 496.17 549 502.17 C
314.76 500.17 548.76 500.17 2 L
0.25 H
2 Z
0 X
0 K
N
315 483.2 549 650 C
1 9 Q
0 X
0 K
(FIGURE  6.) 314.76 505.17 T
(Using proxies to forward a call between machines) 368.76 505.17 T
315 81 549 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "5" 6
%%Page: "6" 6
612 792 0 FMBEGINPAGE
1 10 Q
0 X
0 K
-0.02 (cannot be for) 58.5 713.33 P
-0.02 (ged by a malicious user) 111.04 713.33 P
-0.02 (. This door points to a) 204.83 713.33 P
2 F
-0.11 (fr) 58.5 701.33 P
-0.11 (ont object) 64.8 701.33 P
1 F
-0.11 ( inside the server) 104.41 701.33 P
-0.11 (. A front object is) 171.58 701.33 P
2 F
-0.11 (not) 243.82 701.33 P
1 F
-0.11 ( a Spring) 256.6 701.33 P
0.01 (object, but rather whatever the server) 58.5 689.33 P
0.01 (\325) 207.76 689.33 P
0.01 (s language of imple-) 210.54 689.33 P
(mentation de\336nes an object to be.) 58.5 677.33 T
0.25 0.23 (A front object encapsulates information identifying the) 58.5 660.33 B
0.25 0.24 (principal \050e.g., a user\051 to which the software capability) 58.5 648.33 B
(was issued and the access rights granted to that principal.) 58.5 636.33 T
0.25 0.19 (A given server may create many dif) 58.5 619.33 B
0.25 0.19 (ferent front objects,) 209.6 619.33 B
0.25 0.2 (encapsulating dif) 58.5 607.33 B
0.25 0.2 (ferent access rights, all pointing to the) 130.55 607.33 B
0.25 0.35 (same piece of underlying state. Later) 58.5 595.33 B
0.25 0.35 (, when the client) 220.05 595.33 B
0.25 0.24 (issues an object invocation on the object reference, the) 58.5 583.33 B
0.25 0.34 (invocation request is transmitted securely through the) 58.5 571.33 B
0.25 0.13 (nucleus door and delivered to the front object. The front) 58.5 559.33 B
0.11 (object then checks that the request is permissible based on) 58.5 547.33 P
0.25 0.33 (the encapsulated access rights, and if so, forwards the) 58.5 535.33 B
0.07 (request into the server) 58.5 523.33 P
0.07 (. For example, if the client issued an) 146.75 523.33 P
0.25 0.43 (update request, the front object would check that the) 58.5 511.33 B
(encapsulated access included write access.) 58.5 499.33 T
0.14 (When a client is given an object reference that is acting as) 58.5 482.33 P
0.18 (a capability they can pass that object reference on to other) 58.5 470.33 P
0.25 0.12 (clients. These other clients can then use the object refer-) 58.5 458.33 B
0.02 (ence freely and will receive all the access that was granted) 58.5 446.33 P
(to the original client.) 58.5 434.33 T
0.25 0.11 (For example, say that user X has a f) 58.5 212.6 B
0.25 0.11 (ile object foo, which) 207.39 212.6 B
-0.04 (has a restricted access control list specifying that only X is) 58.5 200.6 P
-0.04 (allowed to read the \336le. However X would like to print the) 58.5 188.6 P
0.25 0.15 (f) 58.5 176.6 B
0.25 0.15 (ile on a printserver P) 61.43 176.6 B
0.25 0.15 (. P is not on the ACL for foo, so it) 147.99 176.6 B
0.03 (would not normally have access to foo\325) 58.5 164.6 P
0.03 (s data. However) 215.89 164.6 P
0.03 (, X) 280.25 164.6 P
0.25 0.12 (can obtain an object reference that will act as a software) 58.5 152.6 B
0.25 0 (capability) 58.5 140.6 B
0.25 0 (, encapsulating the read access that X is allowed) 97.32 140.6 B
0.25 0.33 (to foo. X can then pass that object reference on to the) 58.5 128.6 B
(printserver P and P will be able to read the \336le.) 58.5 116.6 T
58.5 81 292.5 720 C
58.5 226.26 292.5 431 C
84.5 320 152 412 R
7 X
0 K
V
0.5 H
2 Z
0 X
N
102.44 365 135.06 392 R
7 X
V
1 10 Q
0 X
(Client) 106.53 385.33 T
(Domain) 102.64 373.33 T
85 270 283.5 306.5 R
7 X
V
0 X
N
202.76 279 266.06 288 R
7 X
V
0 X
(Nucleus) 218.03 281.33 T
138.21 285.5 167.12 294.5 R
7 X
V
0 X
(Door) 142.39 287.83 T
136.48 282.5 169.61 298 R
0.4 H
N
129.36 296.57 136.2 290.51 127.19 292.02 128.27 294.29 4 Y
V
0.5 H
180 243 17.5 34.5 136.21 325 A
97.71 327 137.62 350 R
7 X
V
0 X
(Object) 104.34 343.33 T
(reference) 99.07 331.33 T
93.98 324 140.61 354 R
0.4 H
N
160.5 318.5 283 413 R
7 X
V
0.5 H
0 X
N
174.71 324.5 242.62 358.5 R
7 X
V
0 X
(front object) 185.48 351.83 T
(access = rw) 185.3 339.83 T
(principal = kgh) 178.07 327.83 T
170.98 322.5 254.11 361.5 R
0.4 H
N
197.93 314.54 201.7 323 202.98 313.83 200.46 314.18 4 Y
V
0.5 H
270 344 32 32 169.71 323 A
175.21 379 230.62 402 R
7 X
V
0 X
(underlying) 181.25 395.33 T
(object) 190.7 383.33 T
171.48 376 234.11 406 R
0.4 H
N
252.21 384.99 277.12 395.2 R
7 X
V
0 X
(ACL) 254.67 388.53 T
247.98 382 280.11 398.5 R
N
200.72 365.23 204.21 376 206.96 365.01 203.84 365.12 4 Y
V
0.5 H
270 309 1 14 203.21 376 A
238.86 393.04 247.71 390.5 238.86 387.96 238.86 390.5 4 Y
V
75.26 243.5 251.1 257.67 R
7 X
V
75.26 242.67 251.1 248.67 C
75.26 246.67 309.26 246.67 2 L
0.25 H
2 Z
0 X
0 K
N
58.5 226.26 292.5 431 C
1 9 Q
0 X
0 K
(FIGURE  7.) 75.26 251.67 T
(A client accessing a secure object) 129.26 251.67 T
58.5 81 292.5 720 C
0 0 612 792 C
1 10 Q
0 X
0 K
0.25 0.16 (The use of software capabilities in Spring makes it easy) 315 713.33 B
0.25 0.25 (for application programs to pass objects to servers in a) 315 701.33 B
(way that allows the server to actually use the given object.) 315 689.33 T
0 12 Q
(8) 315 653 T
(V) 342 653 T
(irtual Memory) 350.22 653 T
1 10 Q
0.25 0.18 (Spring implements an extensible, demand-paged virtual) 315 632.33 B
0.14 (memory system that separates the functionality of caching) 315 620.33 P
(pages from the tasks of storing and retrieving pages [7].) 315 608.33 T
0 11 Q
(8.1) 315 575.67 T
(Overview) 342 575.67 T
1 10 Q
0.25 0.09 (A per) 315 559.33 B
0.25 0.09 (-machine virtual memory manager \050VMM\051 handles) 337.99 559.33 B
0.25 0.04 (mapping, sharing, protecting, transferring, and caching of) 315 547.33 B
0.25 0.05 (local memory) 315 535.33 B
0.25 0.05 (. The VMM depends on) 370.44 535.33 B
2 F
0.25 0.05 (external pagers) 471 535.33 B
1 F
0.25 0.05 ( for) 534.45 535.33 B
0.25 0.25 (accessing backing store and maintaining inter) 315 523.33 B
0.25 0.25 (-machine) 510 523.33 B
(coherency) 315 511.33 T
(.) 355.44 511.33 T
0.25 0.05 (Most clients of the virtual memory system only deal with) 315 493.33 B
2 F
0.25 0.4 (addr) 315 481.33 B
0.25 0.4 (ess space) 335.1 481.33 B
1 F
0.25 0.4 ( and) 376.39 481.33 B
2 F
0.25 0.4 ( memory) 395.16 481.33 B
1 F
0.25 0.4 (objects. An address space) 436.03 481.33 B
0.25 0.32 (object represents the virtual address space of a Spring) 315 469.33 B
0.25 0.06 (domain while a memory object is an abstraction of mem-) 315 457.33 B
0.25 0.11 (ory that can be mapped into address spaces. An example) 315 445.33 B
0.25 0.24 (of a memory object is a f) 315 433.33 B
0.25 0.24 (ile object \050the f) 421.98 433.33 B
0.25 0.24 (ile interface in) 487.11 433.33 B
0.25 0.62 (Spring inherits from the memory object interface\051.) 315 421.33 B
(Address space objects are implemented by the VMM.) 315 409.33 T
0.25 0.42 (A memory object has operations to set and query the) 315 392.33 B
0.25 0.02 (length, and an operation to) 315 380.33 B
2 F
0.25 0.02 (bind) 426.28 380.33 B
1 F
0.25 0.02 ( to the object \050see Section) 444.15 380.33 B
0.25 0.04 (8.2\051. There are no page-in/out or read/write operations on) 315 368.33 B
0.25 0.25 (memory objects. The Spring f) 315 356.33 B
0.25 0.25 (ile interface provides f) 442.1 356.33 B
0.25 0.25 (ile) 538.5 356.33 B
0.25 0.31 (read/write operations \050but not page-in/page-out opera-) 315 344.33 B
0.25 0.07 (tions\051. Separating the memory abstraction from the inter-) 315 332.33 B
0.24 (face that provides the paging operations is a feature of the) 315 320.33 P
0.25 0.11 (Spring virtual memory system that we found very useful) 315 308.33 B
0.25 0.36 (in implementing our f) 315 296.33 B
0.25 0.36 (ile system [13]. This separation) 410.27 296.33 B
0.25 0.41 (enables the memory object server to be in a dif) 315 284.33 B
0.25 0.41 (ferent) 523.65 284.33 B
315 81 549 720 C
322.45 81 541.55 264.74 C
343.23 221.66 509.44 250.81 R
6 X
0 K
V
0.5 H
2 Z
0 X
N
481.74 221.66 492.82 250.81 R
4 X
V
0 X
N
359.85 221.66 382.02 250.81 R
4 X
V
0 X
N
420.8 221.66 442.96 250.82 R
4 X
V
0 X
N
398.64 221.66 404.18 250.81 R
4 X
V
0 X
N
325.78 181.64 372.71 184.85 R
11 X
V
0 X
N
426.33 181.64 473.26 184.85 R
N
479.96 181.64 526.89 184.85 R
N
379.41 181.64 419.63 184.85 R
N
335.45 191.67 328.71 187.36 332.14 194.59 333.27 192.53 4 Y
V
353.11 218.44 359.85 222.74 356.42 215.52 355.3 217.58 4 Y
V
333.27 192.53 355.3 217.58 2 L
0 Z
N
377 192.86 373 185.93 372.72 193.93 374.67 192.62 4 Y
V
378.01 215.82 382.01 222.74 382.29 214.75 380.34 216.06 4 Y
V
374.67 192.61 380.35 216.06 2 L
N
391.07 192.55 386.57 185.94 386.88 193.93 388.72 192.48 4 Y
V
394.13 216.13 398.63 222.75 398.32 214.75 396.48 216.2 4 Y
V
388.72 192.47 396.48 216.2 2 L
N
399.81 216.04 404.17 222.75 404.02 214.75 402.15 216.16 4 Y
V
397.36 191.93 392.99 185.22 393.14 193.22 395.02 191.81 4 Y
V
402.15 216.16 395.02 191.8 2 L
N
445.17 215.06 442.95 222.75 448.91 217.41 446.61 216.91 4 Y
V
463.62 193.62 465.85 185.94 459.89 191.28 462.18 191.77 4 Y
V
446.62 216.91 462.19 191.77 2 L
N
421.31 214.76 420.79 222.75 425.46 216.25 423.12 216.26 4 Y
V
433.9 192.49 434.42 184.51 429.75 191 432.1 190.99 4 Y
V
423.12 216.26 432.1 190.99 2 L
N
496.32 215.55 492.82 222.74 499.6 218.5 497.42 217.62 4 Y
V
523.06 192.41 526.57 185.22 519.78 189.46 521.96 190.34 4 Y
V
497.42 217.62 521.96 190.34 2 L
N
484.24 215.15 481.73 222.75 487.89 217.63 485.61 217.05 4 Y
V
504.06 193.53 506.56 185.94 500.41 191.05 502.69 191.63 4 Y
V
485.61 217.05 502.69 191.62 2 L
N
386.11 181.64 392.82 184.85 R
11 X
V
0 X
N
433.04 181.64 466.55 184.85 R
11 X
V
0 X
N
506.77 181.64 526.89 184.85 R
11 X
V
0 X
N
5 8 Q
(memory objects) 327.02 172.42 T
(address space) 474.66 255.18 T
323.12 149.08 540.12 158.08 R
7 X
V
323.12 143.08 540.12 149.08 C
323.12 147.08 557.12 147.08 2 L
0.25 H
2 Z
0 X
0 K
N
322.45 81 541.55 264.74 C
1 9 Q
0 X
0 K
(FIGURE  8.) 323.12 152.08 T
(User) 377.12 152.08 T
(\325) 394.44 152.08 T
(s view of address spaces) 396.95 152.08 T
325.74 77.98 540.12 142.74 R
7 X
V
5 8 Q
0 X
-0.17 (An address space is a linear range of addresses with regions) 325.74 137.41 P
-0.26 (mapped to memory objects. Each region is mapped to a \050part) 325.74 127.41 P
-0.13 (of\051 a memory object. Each page within a mapped region may) 325.74 117.41 P
0.2 (be mapped with read/write/execute permissions and may be) 325.74 107.41 P
(locked in memory) 325.74 97.41 T
(.) 387.83 97.41 T
321.5 90.99 550.08 90.99 2 L
0.4 H
2 Z
N
457.57 221.31 471.86 249.89 R
4 X
V
2 X
N
453.17 217.95 457.57 222.03 458.9 216.18 456.03 217.07 4 Y
0 X
V
450.54 188.97 446.14 184.89 444.8 190.74 447.67 189.85 4 Y
V
456.04 217.07 447.67 189.85 2 L
0 Z
N
467.03 217.75 471.85 221.32 472.53 215.35 469.78 216.55 4 Y
V
460.96 188.46 456.14 184.89 455.46 190.85 458.21 189.65 4 Y
V
469.78 216.55 458.21 189.65 2 L
N
315 81 549 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "6" 7
%%Page: "7" 7
612 792 0 FMBEGINPAGE
1 10 Q
0 X
0 K
0.25 0.1 (machine than the) 58.5 713.33 B
2 F
0.25 0.1 (pager) 131.76 713.33 B
1 F
0.25 0.1 ( object server which provides the) 155.59 713.33 B
(contents of the memory object.) 58.5 701.33 T
0 11 Q
(8.2) 58.5 668.67 T
(Cache and Pager Objects) 85.5 668.67 T
1 10 Q
0.25 0.24 (In order to allow data to be coherently cached by more) 58.5 652.33 B
0.25 0.13 (than one VMM, there needs to be a two-way connection) 58.5 640.33 B
0.25 0.46 (between the VMM and an external pager \050e.g., a f) 58.5 628.33 B
0.25 0.46 (ile) 281.58 628.33 B
0.25 0.36 (server\051. The VMM needs a connection to the external) 58.5 616.33 B
0.25 0 (pager to allow the VMM to obtain and write out data, and) 58.5 604.33 B
0.25 0.38 (the external pager needs a connection to the VMM to) 58.5 592.33 B
0.25 0.11 (allow the provider to perform coherency actions \050e.g., to) 58.5 580.33 B
0.25 0.21 (invalidate data cached by the VMM\051. W) 58.5 568.33 B
0.25 0.21 (e represent this) 228.31 568.33 B
(two-way connection as two objects.) 58.5 556.33 T
0.17 (The VMM obtains data by invoking a) 58.5 538.33 P
2 F
0.17 (pager) 213.28 538.33 P
1 F
0.17 (object imple-) 239.28 538.33 P
0.25 0.18 (mented by an external pager) 58.5 526.33 B
0.25 0.18 (, and an external pager per-) 177.21 526.33 B
0.25 0.5 (forms coherency actions by invoking a) 58.5 514.33 B
2 F
0.25 0.5 (cache) 236.55 514.33 B
1 F
0.25 0.5 (object) 265.59 514.33 B
(implemented by a VMM.) 58.5 502.33 T
0.25 0.18 (When a VMM is asked to map a memory object into an) 58.5 485.33 B
0.25 0.19 (address space, the VMM must be able to obtain a pager) 58.5 473.33 B
0.25 0.07 (object to allow it to manipulate the object\325) 58.5 461.33 B
0.25 0.07 (s data. Associ-) 232.49 461.33 B
0.25 0.01 (ated with this pager object must be a cache object that the) 58.5 449.33 B
(external pager can use for coherency) 58.5 437.33 T
(.) 204.73 437.33 T
0.25 0.37 (A VMM wants to ensure that two equivalent memory) 58.5 420.33 B
0.25 0.17 (objects \050e.g., two memory objects that refer to the same) 58.5 408.33 B
0.25 0.04 (f) 58.5 396.33 B
0.25 0.04 (ile on disk\051, when mapped, will share the data cached by) 61.32 396.33 B
0.25 0.02 (the VMM. T) 58.5 384.33 B
0.25 0.02 (o do this, the VMM invokes a) 109.34 384.33 B
2 F
0.25 0.02 (bind) 233.92 384.33 B
1 F
0.25 0.02 ( operation) 251.79 384.33 B
0.25 0.02 (on the memory object. The bind) 58.5 372.33 B
0.25 0.02 (operation returns a) 191.53 372.33 B
2 F
0.25 0.02 (cach-) 270.22 372.33 B
0.25 0.43 (e_rights) 58.5 360.33 B
1 F
0.25 0.43 (object, which is always implemented by the) 97.94 360.33 B
0.25 0.64 (VMM itself. If two equivalent memory objects are) 58.5 348.33 B
0.25 0.64 (mapped, then the same cache_rights object will be) 58.5 336.33 B
0.25 0.35 (returned. The VMM uses the returned object to f) 58.5 324.33 B
0.25 0.35 (ind a) 271.13 324.33 B
0.25 0.38 (pager) 58.5 312.33 B
0.25 0.38 (-cache object connection to use, and to f) 82.41 312.33 B
0.25 0.38 (ind any) 260.25 312.33 B
(pages cached for the memory object.) 58.5 300.33 T
0.25 0.13 (When a memory object receives a bind operation from a) 58.5 283.33 B
0.25 0.04 (VMM, it must determine if there is already a pager) 58.5 271.33 B
0.25 0.04 (-cache) 266.23 271.33 B
0.25 0.4 (object connection for the memory object at the given) 58.5 259.33 B
0.17 (VMM. If there is no connection, the external pager imple-) 58.5 247.33 P
0.25 0.2 (menting the memory object contacts the VMM, and the) 58.5 235.33 B
0.25 0.08 (VMM and the external pager exchange pager) 58.5 223.33 B
0.25 0.08 (, cache, and) 243.92 223.33 B
0.25 0.2 (cache_rights objects. Once the connection is set up, the) 58.5 211.33 B
0.12 (memory object returns the appropriate cache_rights object) 58.5 199.33 P
(to the VMM.) 58.5 187.33 T
0.25 0.31 (T) 58.5 170.33 B
0.25 0.31 (ypically) 64.22 170.33 B
0.25 0.31 (, there are many pager) 98.26 170.33 B
0.25 0.31 (-cache object channels) 194.99 170.33 B
0.25 0.18 (between a given pager and a VMM \050see Figure 9 for an) 58.5 158.33 B
(example\051.) 58.5 146.33 T
0 11 Q
(8.3) 58.5 113.67 T
(Maintaining Data Coher) 85.5 113.67 T
(ency) 200.8 113.67 T
1 10 Q
0.25 0.03 (The task of maintaining data coherency between dif) 58.5 97.33 B
0.25 0.03 (ferent) 269.03 97.33 B
0.25 0.08 (VMMs that are caching a memory object is the responsi-) 58.5 85.33 B
0.25 0.34 (bility of the external pager implementing the memory) 315 454.85 B
0.25 0.33 (object.) 315 442.85 B
0.25 0.33 (The coherency protocol is not specif) 347.65 442.85 B
0.25 0.33 (ied by the) 506.08 442.85 B
0.25 0.02 (architecture\321external pagers are free to implement what-) 315 430.85 B
0.25 0.13 (ever coherency protocol they wish. The cache and pager) 315 418.85 B
0.25 0.21 (object interfaces provide basic building blocks for con-) 315 406.85 B
0.25 0.32 (structing the coherency protocol. Our current external) 315 394.85 B
0.25 0.01 (pager implementations use a single-writer/multiple-reader) 315 382.85 B
(per) 315 370.85 T
(-block coherency protocol [12, 13].) 327.57 370.85 T
0 12 Q
(9) 315 334.52 T
(File System) 342 334.52 T
1 10 Q
0.25 0.22 (The f) 315 313.85 B
0.25 0.22 (ile system architecture def) 337.18 313.85 B
0.25 0.22 (ines) 448.6 313.85 B
2 F
0.25 0.22 (f) 468.57 313.85 B
0.25 0.22 (ile) 471.01 313.85 B
1 F
0.25 0.22 ( objects that are) 481.67 313.85 B
0.25 0.4 (implemented by f) 315 301.85 B
0.25 0.4 (ile servers. The f) 391.89 301.85 B
0.25 0.4 (ile object interface) 466.49 301.85 B
0.25 0.06 (inherits from the) 315 289.85 B
2 F
0.25 0.06 (memory object) 386.04 289.85 B
1 F
0.25 0.06 ( and) 446.25 289.85 B
2 F
0.25 0.06 (io) 466.51 289.85 B
1 F
0.25 0.06 ( interfaces. There-) 474.41 289.85 B
0.25 0.16 (fore, f) 315 277.85 B
0.25 0.16 (ile objects may be memory mapped \050because they) 340.27 277.85 B
0.25 0.14 (are also memory objects\051, and they can also be accessed) 315 265.85 B
(using the read/write operations of the io interface.) 315 253.85 T
0.23 (Spring includes \336le systems giving access to \336les on local) 315 235.85 P
0.25 0.16 (disks as well as over the network. Each f) 315 223.85 B
0.25 0.16 (ile system uses) 486.2 223.85 B
0.25 0.19 (the Spring security and naming architectures to provide) 315 211.85 B
(access control and directory services.) 315 199.85 T
0.25 0.08 (A Spring f) 315 183.85 B
0.25 0.08 (ile system typically consists of several layered) 358.01 183.85 B
0.25 0.1 (f) 315 171.85 B
0.25 0.1 (ile servers [5]. The pager) 317.88 171.85 B
0.25 0.1 (-cache object paradigm is used) 421.56 171.85 B
0.25 0.07 (by f) 315 159.85 B
0.25 0.07 (ile systems as a general layering mechanism between) 330.8 159.85 B
0.25 0.23 (the dif) 315 147.85 B
0.25 0.23 (ferent f) 342.52 147.85 B
0.25 0.23 (ile servers and virtual memory managers.) 373.22 147.85 B
0.25 0.18 (Among other things, this has enabled us to provide per) 315 135.85 B
0.25 0.18 (-) 545.67 135.85 B
0.25 0.3 (machine caching of data and attributes to decrease the) 315 123.85 B
(number of network accesses for remote \336les.) 315 111.85 T
315 81 549 720 C
316.62 461.52 547.38 720 C
477.83 591.45 541.62 639.3 R
7 X
0 K
V
0.4 H
2 Z
0 X
N
333.15 591.28 458.01 639.46 R
7 X
V
0 X
N
5 10 Q
(VMM 1) 371.39 596.49 T
(VMM 2) 494.03 596.91 T
319.27 563.96 544.17 575.12 R
7 X
V
319.27 560.12 544.17 566.12 C
319.27 564.12 553.27 564.12 2 L
0.25 H
2 Z
0 X
0 K
N
316.62 461.52 547.38 720 C
1 9 Q
0 X
0 K
(FIGURE  9.) 319.27 569.12 T
(Pager) 373.27 569.12 T
(-cache object example) 393.58 569.12 T
333.12 664.78 414.21 707.84 R
7 X
V
0.4 H
2 Z
0 X
N
7 X
90 450 16.75 10.68 354.68 679.2 G
0 X
90 450 16.75 10.68 354.68 679.2 A
5 10 Q
(Pager 1) 357.38 696.75 T
5 8 Q
(pager) 344.05 681.67 T
(object) 344.05 674 T
439.87 662.8 444.75 669.14 447.8 661.74 443.84 662.27 4 Y
V
445.03 640.74 440.15 634.4 437.1 641.79 441.07 641.27 4 Y
V
443.84 662.27 441.07 641.26 2 L
0 Z
N
486.79 661.56 486.61 669.56 493.63 665.72 490.21 663.64 4 Y
V
507.36 642.82 507.54 634.82 500.52 638.66 503.94 640.74 4 Y
V
490.22 663.64 503.95 640.73 2 L
N
351.01 662.35 355.01 669.28 359.01 662.35 355.01 662.35 4 Y
V
359.01 641.32 355.01 634.4 351.01 641.32 355.01 641.32 4 Y
V
355.01 662.35 355.01 641.32 2 L
N
389.69 661.79 393.69 668.72 397.69 661.79 393.69 661.79 4 Y
V
397.69 641.32 393.69 634.4 389.69 641.32 393.69 641.32 4 Y
V
393.69 661.79 393.69 641.32 2 L
N
320.17 467.46 535.83 558.64 R
7 X
V
1 9 Q
0 X
0.02 (A VMM and an external pager have a two-way pager) 320.17 552.64 P
0.02 (-cache) 512.35 552.64 P
0.22 0.03 (object connection. In this example, Pager 1 is the pager for) 320.17 541.64 B
0.22 0.17 (two distinct memory objects cached by VMM 1, so there) 320.17 530.64 B
0.21 (are two pager) 320.17 519.64 P
0.21 (-cache object connections, one for each mem-) 369.38 519.64 P
0.22 0.04 (ory object. Pager 2 is the pager for a single memory object) 320.17 508.64 B
0.22 0.2 (cached at both VMM 1 and VMM 2, so there is a pager) 320.17 497.64 B
0.22 0.2 (-) 532.83 497.64 B
0.22 0.16 (cache object connection between Pager 2 and each of the) 320.17 486.64 B
(VMMs.) 320.17 475.64 T
7 X
90 450 16.75 10.68 393.66 679.57 G
2 Z
0 X
90 450 16.75 10.68 393.66 679.57 A
5 8 Q
(pager) 383.02 682.04 T
(object) 383.02 674.37 T
425.67 665.15 506.77 708.21 R
N
90 450 16.75 10.68 447.24 679.57 A
5 10 Q
(Pager 2) 449.94 697.12 T
5 8 Q
(pager) 436.6 682.04 T
(object) 436.6 674.37 T
90 450 16.75 10.68 486.21 679.95 A
(pager) 475.58 682.41 T
(object) 475.58 674.74 T
7 X
90 450 16.75 10.68 355.56 624.32 G
0 X
90 450 16.75 10.68 355.56 624.32 A
(cache) 344.93 626.78 T
(object) 344.93 619.12 T
7 X
90 450 16.75 10.68 396.21 624.27 G
0 X
90 450 16.75 10.68 396.21 624.27 A
(cache) 385.58 626.74 T
(object) 385.58 619.07 T
7 X
90 450 16.75 10.68 438.96 624.22 G
0 X
90 450 16.75 10.68 438.96 624.22 A
(cache) 428.33 626.69 T
(object) 428.33 619.02 T
7 X
90 450 16.75 10.68 508.4 624.27 G
0 X
90 450 16.75 10.68 508.4 624.27 A
(cache) 497.77 626.74 T
(object) 497.77 619.07 T
315 81 549 720 C
0 0 612 792 C
FMENDPAGE
%%EndPage: "7" 8
%%Page: "8" 8
612 792 0 FMBEGINPAGE
0 11 Q
0 X
0 K
(9.1) 58.5 712.67 T
(File Server Implementations) 85.5 712.67 T
1 10 Q
0.25 0.29 (The Spring Storage File System \050SFS\051 is implemented) 58.5 696.33 B
(using two layers as shown in Figure 10.) 58.5 684.33 T
0.25 0.01 (The base disk layer implements an on-disk Unix compati-) 58.5 552.37 B
0.25 0.09 (ble f) 58.5 540.37 B
0.25 0.09 (ile system) 76.7 540.37 B
0.25 0.09 (. It does not, however) 118.13 540.37 B
0.25 0.09 (, implement a coher-) 207.37 540.37 B
0.25 0.06 (ency algorithm. Instead, an instance of the coherency f) 58.5 528.37 B
0.25 0.06 (ile) 282.37 528.37 B
0.25 0.59 (server is stacked on the disk layer) 58.5 516.37 B
0.25 0.59 (, and all f) 215.11 516.37 B
0.25 0.59 (iles are) 259.54 516.37 B
(exported to clients via the coherency layer) 58.5 504.37 T
(.) 227.35 504.37 T
0.25 0.29 (The coherency layer implements a per) 58.5 487.37 B
0.25 0.29 (-block multiple-) 222.92 487.37 B
0.25 0.33 (reader/single-writer coherency protocol. Among other) 58.5 475.37 B
0.14 (things, the implementation keeps track of the state of each) 58.5 463.37 P
0.25 0.3 (f) 58.5 451.37 B
0.25 0.3 (ile block \050read-only) 61.58 451.37 B
2 F
0.25 0.3 (vs.) 150.02 451.37 B
1 F
0.25 0.3 ( read-write\051 and of each cache) 161.75 451.37 B
-0.01 (object that holds the block at any point in time. Coherency) 58.5 439.37 P
0.25 0.14 (actions are triggered depending on the state and the cur-) 58.5 427.37 B
0.25 0.34 (rent request using a single-writer/multiple-reader per) 58.5 415.37 B
0.25 0.34 (-) 289.17 415.37 B
0.25 0.4 (block coherency algorithm. The coherency layer also) 58.5 403.37 B
(caches \336le attributes.) 58.5 391.37 T
-0.12 (The Caching File System \050CFS\051 is an attribute-caching \336le) 58.5 374.37 P
0.25 0.25 (system. Its main function is to interpose itself between) 58.5 362.37 B
0.25 0.08 (remote f) 58.5 350.37 B
0.25 0.08 (iles and local clients when they are passed to the) 92.41 350.37 B
0.25 0.31 (local machine so as to increase the ef) 58.5 338.37 B
0.25 0.31 (f) 220.22 338.37 B
0.25 0.31 (iciency of many) 223.3 338.37 B
0.25 0.22 (operations. Once interposed on, all calls to remote f) 58.5 326.37 B
0.25 0.22 (iles) 277.96 326.37 B
(end up being diverted to the local CFS.) 58.5 314.37 T
0.25 0.27 (An interesting aspect of CFS is the manner in which it) 58.5 297.37 B
2 F
0.25 0.04 (dynamically) 58.5 285.37 B
1 F
0.25 0.04 ( interposes on individual remote DFS f) 107.83 285.37 B
0.25 0.04 (iles. A) 265.89 285.37 B
2 F
0.01 (caching) 58.5 273.37 P
1 F
0.01 (subcontract is used to contact the local CFS in the) 92.67 273.37 P
0.25 0.03 (process of unmarshalling f) 58.5 261.37 B
0.25 0.03 (ile objects. When CFS is asked) 165.89 261.37 B
0.25 0.06 (to interpose on a f) 58.5 249.38 B
0.25 0.06 (ile, it becomes a cache manager for the) 132.34 249.38 B
0.25 0.17 (remote f) 58.5 237.38 B
0.25 0.17 (ile by invoking the bind operation on the f) 93.13 237.38 B
0.25 0.17 (ile as) 270.59 237.38 B
(described in Section 8.2.) 58.5 225.38 T
0 12 Q
(10) 58.5 189.04 T
(Spring Naming) 85.5 189.04 T
1 10 Q
-0.14 (An operating system has various kinds of objects that need) 58.5 168.38 P
0.2 (to be given names, such as users, \336les, printers, machines,) 58.5 156.38 P
0.25 0.38 (services, etc. Most operating systems provide several) 58.5 144.38 B
0.25 0.07 (name services, each tailored for a specif) 58.5 132.38 B
0.25 0.07 (ic kind of object.) 222.72 132.38 B
0.25 0.03 (Such) 58.5 120.38 B
2 F
0.25 0.03 (type specif) 81.38 120.38 B
0.25 0.03 (ic) 123.85 120.38 B
1 F
0.25 0.03 (name services are usually built into the) 133.89 120.38 B
0.25 0.1 (subsystem implementing those objects. For example, f) 58.5 108.38 B
0.25 0.1 (ile) 282.3 108.38 B
0.22 (systems typically implement their own naming service for) 58.5 96.38 P
(naming \336les \050directories\051.) 58.5 84.38 T
58.5 81 292.5 720 C
59.31 567.04 291.69 681 C
85.67 571.95 268.17 586.12 R
7 X
0 K
V
85.67 571.12 268.17 577.12 C
85.67 575.12 319.67 575.12 2 L
0.25 H
2 Z
0 X
0 K
N
59.31 567.04 291.69 681 C
1 9 Q
0 X
0 K
(FIGURE  10.) 85.67 580.12 T
(Spring SFS) 139.67 580.12 T
118.97 605.16 211.74 661.1 R
7 X
V
0.4 H
2 Z
2 X
N
134.42 636.84 197.2 653.23 R
7 X
V
0 Z
0 X
N
135.63 611.74 198.42 627.47 R
7 X
V
0 X
N
5 8 Q
(Coherency layer) 136.76 642.49 T
(Disk layer) 150.45 616.47 T
(SFS) 102.07 657.24 T
210.38 640.16 198.85 643.47 210.38 646.77 210.38 643.47 4 Y
V
223.52 646.77 235.06 643.47 223.52 640.16 223.52 643.47 4 Y
V
210.38 643.47 223.52 643.47 2 L
N
(All \336les are) 236.89 642.29 T
60.29 605.71 103.21 624.37 9.33 RR
N
(Disk drive) 63.63 613.35 T
116.11 612.46 104.57 615.77 116.11 619.08 116.11 615.77 4 Y
V
123.04 619.08 134.57 615.77 123.04 612.46 123.04 615.77 4 Y
V
116.11 615.77 123.04 615.77 2 L
N
(exported by) 236.89 634.29 T
(coherency) 236.89 626.29 T
(layer) 236.89 618.29 T
58.5 81 292.5 720 C
0 0 612 792 C
1 10 Q
0 X
0 K
0.25 0.05 (In contrast, Spring provides a uniform name service [17].) 315 713.33 B
0.25 0.16 (In principle, any object can be bound to any name. This) 315 701.33 B
0.25 0.07 (applies whether the object is local to a process, local to a) 315 689.33 B
0.25 0.01 (machine, or resident elsewhere on the network, whether it) 315 677.33 B
0.25 0.14 (is transient or persistent; whether it is a standard system) 315 665.33 B
0.25 0.24 (object, a process environment object, or a user specif) 315 653.33 B
0.25 0.24 (ic) 541.54 653.33 B
0.25 0.04 (object. Name services and name spaces do not need to be) 315 641.33 B
0.25 0.14 (segregated by object type. Dif) 315 629.33 B
0.25 0.14 (ferent name spaces can be) 440.25 629.33 B
(composed to create new name spaces.) 315 617.33 T
-0.17 (By using a common name service, we avoid burdening cli-) 315 600.33 P
0.25 0 (ents with the requirement to use dif) 315 588.33 B
0.25 0 (ferent names or dif) 458.11 588.33 B
0.25 0 (fer-) 534.56 588.33 B
0.25 0.23 (ent name services depending on what objects are being) 315 576.33 B
0.25 0.06 (accessed. Similarly) 315 564.33 B
0.25 0.06 (, we avoid burdening all object imple-) 392.92 564.33 B
0.21 (mentations with constructing name spaces\321the name ser-) 315 552.33 P
0.25 0.25 (vice provides critical support to integrate new kinds of) 315 540.33 B
0.25 0.09 (objects and new implementations of existing objects into) 315 528.33 B
0.25 0.03 (Spring. Object implementations maintain control over the) 315 516.33 B
0.12 (representation and storage of their objects, who is allowed) 315 504.33 P
0.25 0.02 (access to them, and other crucial details. Although Spring) 315 492.33 B
0.25 0.3 (has a common name service and naming interface, the) 315 480.33 B
0.25 0.14 (architecture allows dif) 315 468.33 B
0.25 0.14 (ferent name servers with dif) 408 468.33 B
0.25 0.14 (ferent) 524.97 468.33 B
0.25 0.09 (implementation properties to be used as part of the name) 315 456.33 B
(service.) 315 444.33 T
0.25 0.01 (The name service allows an object to be associated with a) 315 427.33 B
0.25 0.1 (name in a) 315 415.33 B
2 F
0.25 0.1 (context) 358.15 415.33 B
1 F
0.25 0.1 (, an object that contains a set of name\320) 387.75 415.33 B
0.25 0.27 (to\320object associations, or) 315 403.33 B
2 F
0.25 0.27 (name bindings) 426.87 403.33 B
1 F
0.25 0.27 (, and which is) 489.21 403.33 B
0.25 0.41 (used by clients to perform all naming operations. An) 315 391.33 B
-0.18 (object may be bound to several dif) 315 379.33 P
-0.18 (ferent names in possibly) 452.05 379.33 P
0.25 0.31 (several dif) 315 367.33 B
0.25 0.31 (ferent contexts at the same time. Indeed, an) 360.4 367.33 B
(object need not be bound to a name at all.) 315 355.33 T
0.25 0.35 (By binding contexts in other contexts we can create a) 315 338.33 B
2 F
-0.01 (naming graph) 315 326.33 P
1 F
-0.01 ( \050informally called a name space\051, a directed) 371.38 326.33 P
0.14 (graph with nodes and labeled edges, where the nodes with) 315 314.33 P
(outgoing edges are contexts.) 315 302.33 T
0.25 0 (Unlike naming in traditional systems, Spring contexts and) 315 285.33 B
0.25 0.14 (name spaces are f) 315 273.33 B
0.25 0.14 (irst class objects: they can be accessed) 388.32 273.33 B
0.25 0.14 (and manipulated directly) 315 261.33 B
0.25 0.14 (. For example, two applications) 417.67 261.33 B
0.25 0.11 (can exchange and share a private name space. T) 315 249.33 B
0.25 0.11 (radition-) 513.76 249.33 B
0.25 0.06 (ally) 315 237.33 B
0.25 0.06 (, such applications would have had to build their own) 329.6 237.33 B
0.07 (naming facility) 315 225.33 P
0.07 (, or incorporate the private name space into) 375.25 225.33 P
0.25 0.04 (a lar) 315 213.33 B
0.25 0.04 (ger system\320wide name space, and access it indirectly) 332.73 213.33 B
(via the root or working context.) 315 201.33 T
0.25 0.02 (Since Spring objects are not persistent by default, naming) 315 184.33 B
0.25 0.33 (is used to provide persistence [16]. It is expected that) 315 172.33 B
0.25 0.23 (applications generally will \050re\051acquire objects from the) 315 160.33 B
0.25 0.14 (name service. If the part of the name space in which the) 315 148.33 B
-0.01 (object is found is persistent, then the object will have been) 315 136.33 P
(made persistent also.) 315 124.33 T
0.25 0.37 (A Spring name server managing a persistent part of a) 315 107.33 B
0.25 0.14 (name space converts objects to and from their persistent) 315 95.33 B
FMENDPAGE
%%EndPage: "8" 9
%%Page: "9" 9
612 792 0 FMBEGINPAGE
1 10 Q
0 X
0 K
0.25 0.26 (form \050much like the UNIX f) 58.5 713.33 B
0.25 0.26 (ile system, which converts) 179.07 713.33 B
0.25 0.25 (open f) 58.5 701.33 B
0.25 0.25 (iles to and from their persistent form\051. However) 84.98 701.33 B
0.25 0.25 (,) 290 701.33 B
0.25 0.09 (since naming is a generic service for an open\320ended col-) 58.5 689.33 B
0.25 0.22 (lection of object types, a context cannot be expected to) 58.5 677.33 B
0.25 0.31 (know how to make each object type persistent. Spring) 58.5 665.33 B
0.25 0.34 (object managers have ultimate control of the \050hidden\051) 58.5 653.33 B
0.25 0.31 (states of their objects. Therefore we provide a general) 58.5 641.33 B
0.25 0.13 (interface between object managers and the name service) 58.5 629.33 B
0.25 0.04 (that allows persistence to be integrated into the name ser-) 58.5 617.33 B
0.25 0.01 (vice while allowing the implementation to control how its) 58.5 605.33 B
0.25 0.09 (\050hidden\051 objects\325 states are mapped to and from a persis-) 58.5 593.33 B
(tent representation.) 58.5 581.33 T
-0.05 (Because the name service is the most common mechanism) 58.5 564.33 P
-0.23 (for acquiring objects, it is a natural place for access control) 58.5 552.33 P
0.25 0.12 (and authentication. Since the name service must provide) 58.5 540.33 B
0.25 0.04 (these functions to protect the name space, it is reasonable) 58.5 528.33 B
0.25 0.02 (to use the same mechanism to protect named objects. The) 58.5 516.33 B
0.25 0.07 (naming architecture allows object managers to determine) 58.5 504.33 B
0.25 0.04 (how much to trust a particular name server) 58.5 492.33 B
0.25 0.04 (, and an object) 232.87 492.33 B
0.25 0.51 (manager is permitted to forego the convenience and) 58.5 480.33 B
0.25 0.11 (implement its own access control and authentication if it) 58.5 468.33 B
0.25 0.04 (wishes. Similarly) 58.5 456.33 B
0.25 0.04 (, name servers can choose to trust or not) 128.19 456.33 B
(to trust other name servers.) 58.5 444.33 T
0.25 0.32 (The Spring name service does not prescribe particular) 58.5 427.33 B
0.25 0.01 (naming policies; dif) 58.5 415.33 B
0.25 0.01 (ferent policies can be built on the top.) 139.1 415.33 B
0.25 0.03 (Our current policy is to provide a combination of system-) 58.5 403.33 B
0.25 0.14 (supplied shared name spaces, per) 58.5 391.33 B
0.25 0.14 (-user name spaces, and) 196.69 391.33 B
-0.09 (per) 58.5 379.33 P
-0.09 (-domain name spaces that can be customized by attach-) 71.07 379.33 P
0.25 0.28 (ing name spaces from dif) 58.5 367.33 B
0.25 0.28 (ferent parts of the distributed) 167.08 367.33 B
(environment.) 58.5 355.33 T
0.25 0 (By default, at start-up each domain is passed from its par-) 58.5 338.33 B
0.25 0.09 (ent a private domain name space, which incorporates the) 58.5 326.33 B
0.14 (user and system name spaces. A domain can acquire other) 58.5 314.33 P
(name spaces and contexts if it desires.) 58.5 302.33 T
0 12 Q
(1) 58.5 266 T
(1) 63.84 266 T
(UNIX Emulation) 85.5 266 T
1 10 Q
0.22 (Spring can run Solaris binaries using the UNIX emulation) 58.5 245.33 P
0.25 0.25 (subsystem [6]. It is implemented entirely by user) 58.5 233.33 B
0.25 0.25 (-level) 267.96 233.33 B
0.25 0.04 (code, employs no actual UNIX code, and provides binary) 58.5 221.33 B
0.22 (compatibility for a lar) 58.5 209.33 P
0.22 (ge set of Solaris programs. The sub-) 146.47 209.33 P
0.25 0.13 (system uses services already provided by the underlying) 58.5 197.33 B
0.25 0.19 (Spring system and only implements UNIX-specif) 58.5 185.33 B
0.25 0.19 (ic fea-) 266.02 185.33 B
0.23 (tures that have no counterpart in Spring \050e.g., signals\051. No) 58.5 173.33 P
0.16 (modi\336cations to the base Spring system were necessary to) 58.5 161.33 P
(implement Solaris emulation.) 58.5 149.33 T
0.22 (The implementation consists of two components: a shared) 58.5 131.33 P
0.25 0.33 (library \050) 58.5 119.33 B
2 F
0.25 0.33 (libue.so) 94.21 119.33 B
1 F
0.25 0.33 (\051 that is dynamically linked with each) 128.24 119.33 B
0.25 0.6 (Solaris binary) 58.5 107.33 B
0.25 0.6 (, and a set of UNIX-specif) 122.38 107.33 B
0.25 0.6 (ic services) 244.29 107.33 B
0.25 0.06 (exported via Spring objects implemented by a) 315 713.33 B
2 F
0.25 0.06 (UNIX pr) 505.67 713.33 B
0.25 0.06 (o-) 540.67 713.33 B
(cess server) 315 701.33 T
1 F
( \050in a separate domain\051. See Figure 4.) 359.15 701.33 T
0.25 0.17 (The UNIX process server implements functions that are) 315 683.33 B
-0.15 (not part of the Spring base system and which cannot reside) 315 671.33 P
(in) 315 659.33 T
2 F
(libue.so) 325.28 659.33 T
1 F
( due to security reasons.) 356.67 659.33 T
0 11 Q
(1) 315 626.67 T
(1.1) 319.89 626.67 T
(Libue) 342 626.67 T
1 10 Q
0.25 0.02 (When a program is) 315 610.33 B
2 F
0.25 0.02 (exec) 395.17 610.33 B
1 F
0.25 0.02 (ed,) 413 610.33 B
2 F
0.25 0.02 (libue.so) 427.76 610.33 B
1 F
0.25 0.02 ( is dynamically linked) 459.29 610.33 B
0.25 0.08 (with the application image in place of) 315 598.33 B
2 F
0.25 0.08 (libc) 473.45 598.33 B
1 F
0.25 0.08 (, thus enabling) 488.77 598.33 B
(the application to run unchanged.) 315 586.33 T
-0.06 (The) 315 570.33 P
2 F
-0.06 (libue.so) 332.99 570.33 P
1 F
-0.06 ( library encapsulates some of the functionality) 364.38 570.33 P
0.02 (that normally resides in a monolithic UNIX kernel. In par-) 315 558.33 P
0.25 0.02 (ticular) 315 546.33 B
0.25 0.02 (, it delivers signals forwarded by the UNIX process) 340.28 546.33 B
0.25 0.09 (server) 315 534.33 B
0.25 0.09 (, and keeps track of the association between UNIX) 339.58 534.33 B
(\336le descriptor numbers \050fd\325) 315 522.33 T
(s\051 and Spring \336le objects.) 424.15 522.33 T
0.25 0.3 (For each UNIX system call, we implemented a library) 315 504.33 B
(stub. In general, there are three kinds of calls:) 315 492.33 T
4 9 Q
(1.) 315 476.33 T
1 10 Q
0.25 0.04 (Calls that simply take as an ar) 328.74 476.33 B
0.25 0.04 (gument an fd, parse any) 451.3 476.33 B
0.25 0.16 (passed f) 328.75 465.09 B
0.25 0.16 (lags, and invoke a Spring service \050e.g.,) 362.21 465.09 B
2 F
0.25 0.16 (r) 527.91 465.09 B
0.25 0.16 (ead) 531.59 465.09 B
1 F
0.25 0.16 (,) 546.5 465.09 B
2 F
0.25 0.11 (write) 328.75 453.84 B
1 F
0.25 0.11 (, and) 349.87 453.84 B
2 F
0.25 0.11 (mmap) 372.98 453.84 B
1 F
0.25 0.11 (\051. Most f) 397.87 453.84 B
0.25 0.11 (ile system and virtual mem-) 433.55 453.84 B
(ory operations fall in this category) 328.75 442.6 T
(.) 465.58 442.6 T
4 9 Q
(2.) 315 425.35 T
1 10 Q
0.25 0.19 (Calls that eventually call a UNIX-specif) 328.74 425.35 B
0.25 0.19 (ic service in) 497.89 425.35 B
0.25 0.14 (the UNIX process server) 328.75 414.11 B
0.25 0.14 (. Examples include) 431.31 414.11 B
2 F
0.25 0.14 (pipe) 513.61 414.11 B
1 F
0.25 0.14 ( and) 531.39 414.11 B
2 F
(kill) 328.75 402.86 T
1 F
(.) 341.53 402.86 T
4 9 Q
(3.) 315 385.62 T
1 10 Q
0.25 0.23 (Calls that change the local state without calling any) 328.74 385.62 B
-0.16 (other domain.) 328.75 374.37 P
2 F
-0.16 (Dup) 386.49 374.37 P
1 F
-0.16 (, parts of) 403.71 374.37 P
2 F
-0.16 (fcntl) 441.02 374.37 P
1 F
-0.16 (, and many signal han-) 458.8 374.37 P
(dling calls fall into this category) 328.75 363.13 T
(.) 457.26 363.13 T
0 11 Q
(1) 315 331.22 T
(1.2) 319.89 331.22 T
(UNIX Pr) 342 331.22 T
(ocess Server) 384.26 331.22 T
1 10 Q
0.25 0.04 (The UNIX process server maintains the parent-child rela-) 315 314.88 B
0.25 0.37 (tionship among processes, keeps track of process and) 315 302.88 B
0.25 0.14 (group ids, provides sockets and pipes, and forwards sig-) 315 290.88 B
(nals.) 315 278.88 T
0.17 (The UNIX process server is involved in forking and exec-) 315 260.88 P
-0.18 (ing of new processes. It is also involved in forwarding \050but) 315 248.88 P
0.14 (not delivering signals\051. Since it keeps track of process and) 315 236.88 P
0.25 0.04 (group ids, it enforces UNIX security semantics when ser-) 315 224.88 B
(vicing requests from client processes.) 315 212.88 T
0 12 Q
(12) 315 176.55 T
(Conclusions) 342 176.55 T
1 10 Q
-0.24 (The Spring project chose to build a dif) 315 155.88 P
-0.24 (ferent operating sys-) 467.28 155.88 P
0.25 0.1 (tem, one based on the notions of strong interfaces, open-) 315 143.88 B
0.25 0.12 (ness and extensibility and designed to be distributed and) 315 131.88 B
0.25 0.01 (suited to multiprocessors. Using object-oriented ideas and) 315 119.88 B
0.25 0.11 (strong interfaces has been a natural f) 315 107.88 B
0.25 0.11 (it, with a number of) 466.75 107.88 B
(bene\336ts:) 315 95.88 T
FMENDPAGE
%%EndPage: "9" 10
%%Page: "10" 10
612 792 0 FMBEGINPAGE
3 11 Q
0 X
0 K
(\245) 58.5 713.33 T
1 10 Q
0.25 0.12 (A standardized basis for open, distributed object sys-) 72.25 713.33 B
0.25 0.05 (tems via the Interface Def) 72.25 701.33 B
0.25 0.05 (inition Language and a sim-) 177.95 701.33 B
(ple client model for objects) 72.25 689.33 T
3 11 Q
(\245) 58.5 674.33 T
1 10 Q
(Easy distributed services and applications) 72.25 674.33 T
3 11 Q
(\245) 58.5 659.33 T
1 10 Q
0.25 0.17 (Readily extensible system facilities, such as f) 72.25 659.33 B
0.25 0.17 (ile sys-) 262.61 659.33 B
(tems and name services) 72.25 647.33 T
3 11 Q
(\245) 58.5 632.33 T
1 10 Q
0.25 0.3 (Unity of architecture together with a wide range of) 72.25 632.33 B
0.25 0.32 (implementation opportunities as in virtual memory) 72.25 620.33 B
0.25 0.45 (management, naming, subcontract, and serverless) 72.25 608.33 B
(objects) 72.25 596.33 T
3 11 Q
(\245) 58.5 581.33 T
1 10 Q
0.25 0.11 (Highly ef) 72.25 581.33 B
0.25 0.11 (f) 111.35 581.33 B
0.25 0.11 (icient inter) 114.24 581.33 B
0.25 0.11 (-address space object invocation) 158.66 581.33 B
(in support of a microkernel-based architecture.) 72.25 569.33 T
0.25 0.14 (Finally) 58.5 552.33 B
0.25 0.14 (, designing in security mechanisms from the start) 87.2 552.33 B
0.25 0.23 (has provided a system that can support a wide range of) 58.5 540.33 B
0.25 0.01 (secure mechanisms in a networked environment, from the) 58.5 528.33 B
(most relaxed to the most secure.) 58.5 516.33 T
0 12 Q
(13) 58.5 480 T
(Refer) 85.5 480 T
(ences) 113.93 480 T
1 9 Q
0.22 0.45 ([1] Graham Hamilton and Panos Kougiouris, \322The Spring) 58.5 460 B
0.22 0.15 (Nucleus: A Microkernel for Objects,\323 Proc. 1993 Summer) 72.9 450 B
(USENIX Conference, pp. 147-160, June 1993.) 72.9 440 T
0.22 0.06 ([2] Graham Hamilton, Michael L. Powell, and James G. Mitch-) 58.5 424.5 B
0.22 0.05 (ell, \322Subcontract: A Flexible Base for Distributed Program-) 72.9 414.5 B
0.22 0.08 (ming,\323 Proc. 14th ACM Symposium on Operating Systems) 72.9 404.5 B
(Principles, pp. 69-79, December 1993.) 72.9 394.5 T
0.22 0.01 ([3] Graham Hamilton and Sanjay Radia, \322Using Interface Inher-) 58.5 379 B
0.22 0.05 (itance to Address Problems in System Software Evolution,\323) 72.9 369 B
0.22 0.19 (Proc. ACM W) 72.9 359 B
0.22 0.19 (orkshop on Interface Def) 126.99 359 B
0.22 0.19 (inition Languages,) 222.01 359 B
(January 1994.) 72.9 349 T
0.22 0.29 ([4] Peter B. Kessler) 58.5 333.5 B
0.22 0.29 (, \322A Client-Side Stub Interpreter) 135.62 333.5 B
0.22 0.29 (,\323 Proc.) 262.99 333.5 B
0.22 0.01 (ACM W) 72.9 323.5 B
0.22 0.01 (orkshop on Interface Def) 103.72 323.5 B
0.22 0.01 (inition Languages, January) 194.46 323.5 B
(1994.) 72.9 313.5 T
0.22 0.09 ([5] Y) 58.5 298 B
0.22 0.09 (ousef A. Khalidi and Michael N. Nelson, \322Extensible File) 77.51 298 B
-0.05 (Systems in Spring,\323 Proc. 14th ACM Symposium on Operat-) 72.9 288 P
(ing Systems Principles, pp. 1-14, December 1993.) 72.9 278 T
0.22 0.01 ([6] Y) 58.5 262.5 B
0.22 0.01 (ousef A. Khalidi and Michael N. Nelson, \322An Implementa-) 77.1 262.5 B
0.22 0.3 (tion of UNIX on an Object-oriented Operating System,\323) 72.9 252.5 B
0.22 0.02 (Proc. W) 329.4 714 B
0.22 0.02 (inter 1993 USENIX Conference, pp. 469-479, Janu-) 358.91 714 B
(ary 1993.) 329.4 704 T
0.22 0.04 ([7] Y) 315 688.5 B
0.22 0.04 (ousef A. Khalidi and Michael N. Nelson, \322The Spring V) 333.77 688.5 B
0.22 0.04 (ir-) 540.42 688.5 B
0.22 0.41 (tual Memory System,\323 Sun Microsystems Laboratories) 329.4 678.5 B
(T) 329.4 668.5 T
(echnical Report SMLI-93-9, March 1993.) 334.27 668.5 T
-0.13 ([8] Y) 315 653 P
-0.13 (ousef A. Khalidi and Michael N. Nelson, \322A Flexible Exter-) 333.21 653 P
0.22 0.04 (nal Paging Interface,\323 Proc. 2nd W) 329.4 643 B
0.22 0.04 (orkshop on Microkernels) 457.26 643 B
(and Other Kernel Architectures, September 1993.) 329.4 633 T
0.22 0.26 ([9] Michael N. Nelson and Graham Hamilton, \322High Perfor-) 315 617.5 B
0.22 0.32 (mance Dynamic Linking Through Caching,\323 Proc. 1993) 329.4 607.5 B
(Summer USENIX Conference, pp. 253-266, June 1993.) 329.4 597.5 T
0.22 0.01 ([10] Michael N. Nelson, Graham Hamilton, and Y) 315 582 B
0.22 0.01 (ousef A. Kha-) 497.68 582 B
0.22 0.31 (lidi, \322Caching in an Object-Oriented System,\323 Proc. 3rd) 329.4 572 B
0.22 0.09 (International W) 329.4 562 B
0.22 0.09 (orkshop on Object Orientation in Operating) 386.98 562 B
(Systems \050I-WOOOS III\051, pp. 95-106, December 1993.) 329.4 552 T
-0.19 ([1) 315 536.5 P
-0.19 (1] Michael N. Nelson and Y) 322.16 536.5 P
-0.19 (ousef A. Khalidi, \322Generic Support) 422.29 536.5 P
0.22 0.08 (for Caching and Disconnected Operation,\323 Proc. 4th W) 329.4 526.5 B
0.22 0.08 (ork-) 533.84 526.5 B
0.22 0.17 (shop on W) 329.4 516.5 B
0.22 0.17 (orkstation Operating Systems \050WWOS-IV\051, pp.) 369.63 516.5 B
(61-65, October 1993.) 329.4 506.5 T
0.22 0.48 ([12] Michael N. Nelson, Y) 315 491 B
0.22 0.48 (ousef A. Khalidi, and Peter W) 423.41 491 B
0.22 0.48 (.) 546.27 491 B
0.22 0.19 (Madany) 329.4 481 B
0.22 0.19 (, \322Experience Building a File System on a Highly) 359.46 481 B
0.05 (Modular Operating System,\323 Proc. 4th Symposium on Expe-) 329.4 471 P
0.22 0.56 (riences with Distributed and Multiprocessor Systems) 329.4 461 B
(\050SEDMS IV\051, September 1993.) 329.4 451 T
0.22 0.48 ([13] Michael N. Nelson, Y) 315 435.5 B
0.22 0.48 (ousef A. Khalidi, and Peter W) 423.41 435.5 B
0.22 0.48 (.) 546.27 435.5 B
0.22 0.02 (Madany) 329.4 425.5 B
0.22 0.02 (, \322The Spring File System,\323 Sun Microsystems Lab-) 358.41 425.5 B
(oratories T) 329.4 415.5 T
(echnical Report SMLI-93-10, March 1993.) 368.01 415.5 T
0.08 ([14] Michael N. Nelson and Sanjay R. Radia, \322A Uniform Name) 315 400 P
0.22 0.04 (Service for Spring\325) 329.4 390 B
0.22 0.04 (s Unix Environment,\323 Proc. W) 399.07 390 B
0.22 0.04 (inter 1994) 511.68 390 B
(USENIX Conference, Jan. 1994.) 329.4 380 T
0 ([15] Object Management Group, \322Common Object Request Bro-) 315 364.5 P
0.22 0.54 (ker Architecture and Specif) 329.4 354.5 B
0.22 0.54 (ication,\323 OMG Document) 443.43 354.5 B
(91.12.1, December 1991.) 329.4 344.5 T
0.22 0.05 ([16] Sanjay Radia, Peter Madany) 315 329 B
0.22 0.05 (, and Michael L. Powell, \322Per-) 436.52 329 B
-0.14 (sistence in the Spring System,\323 Proc. 3rd International W) 329.4 319 P
-0.14 (ork-) 534.01 319 P
0.22 0.59 (shop on Object Orientation in Operating Systems \050I-) 329.4 309 B
(WOOOS III\051, pp. 12-23, December 1993.) 329.4 299 T
0.22 0.05 ([17] Sanjay R. Radia, Michael N. Nelson, and Michael L. Pow-) 315 283.5 B
0.22 0.02 (ell, \322The Spring Name Service,\323 Sun Microsystems Labora-) 329.4 273.5 B
(tories T) 329.4 263.5 T
(echnical Report) 356.52 263.5 T
(SMLI-93-16, October 1993) 415.5 263.5 T
2 F
(.) 514.74 263.5 T
FMENDPAGE
%%EndPage: "10" 11
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 10 1
%%DocumentFonts: Times-Bold
%%+ Times-Roman
%%+ Times-Italic
%%+ Courier-Bold
%%+ Helvetica-Bold
%%+ Helvetica
%%+ Symbol
