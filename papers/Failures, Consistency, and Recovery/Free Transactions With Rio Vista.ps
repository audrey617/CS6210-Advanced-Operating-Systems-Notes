%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 5.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 612 792 0 1 12 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Bold FMFONTDEFINE
2 1 /Symbol FMFONTDEFINE
3 0 /Times-Italic FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /Courier-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
( 1) 302.65 42.62 T
1 10 Q
-0.06 (Abstract:) 54 609.72 P
0 F
-0.06 (T) 98.44 609.72 P
-0.06 (ransactions and reco) 104.2 609.72 P
-0.06 (v) 185.57 609.72 P
-0.06 (erable memories are po) 190.42 609.72 P
-0.06 (w-) 283.57 609.72 P
2.17 (erful mechanisms for handling f) 54 598.72 P
2.17 (ailures and manipulating) 190.9 598.72 P
0.73 (persistent data. Unfortunately) 54 587.72 P
0.73 (, standard reco) 173.39 587.72 P
0.73 (v) 233.28 587.72 P
0.73 (erable memo-) 238.13 587.72 P
1.01 (ries incur an o) 54 576.72 P
1.01 (v) 113.82 576.72 P
1.01 (erhead of se) 118.67 576.72 P
1.01 (v) 168.76 576.72 P
1.01 (eral milliseconds per transac-) 173.61 576.72 P
0.16 (tion. This paper presents a system that impro) 54 565.72 P
0.16 (v) 234.4 565.72 P
0.16 (es transaction) 239.25 565.72 P
1.75 (o) 54 554.72 P
1.75 (v) 58.85 554.72 P
1.75 (erhead by a f) 63.7 554.72 P
1.75 (actor of 2000 for w) 120.78 554.72 P
1.75 (orking sets that \336t in) 204.88 554.72 P
-0.12 (main memory) 54 543.72 P
-0.12 (. Of this f) 109.07 543.72 P
-0.12 (actor of 2000, a f) 146.95 543.72 P
-0.12 (actor of 20 is due to) 214.98 543.72 P
-0.17 (the Rio \336le cache, which absorbs synchronous writes to disk) 54 532.72 P
1.29 (without losing data during system crashes. The remaining) 54 521.72 P
0.66 (f) 54 510.72 P
0.66 (actor of 100 is due to V) 57.23 510.72 P
0.66 (ista, a 720-line, reco) 154.99 510.72 P
0.66 (v) 238.18 510.72 P
0.66 (erable-mem-) 243.03 510.72 P
1.17 (ory library tailored for Rio. V) 54 499.72 P
1.17 (ista lo) 178.13 499.72 P
1.17 (wers transaction o) 203.22 499.72 P
1.17 (v) 278.17 499.72 P
1.17 (er-) 283.02 499.72 P
1.01 (head to 5) 54 488.72 P
2 F
1.01 (m) 96.2 488.72 P
0 F
1.01 (sec by using no redo log, no system calls, and) 101.96 488.72 P
1.4 (only one memory-to-memory cop) 54 477.72 P
1.4 (y) 193.36 477.72 P
1.4 (. This drastic reduction) 197.71 477.72 P
2.46 (in o) 54 466.72 P
2.46 (v) 71.59 466.72 P
2.46 (erhead leads to a o) 76.44 466.72 P
2.46 (v) 160.56 466.72 P
2.46 (erall speedup of 150-556x for) 165.41 466.72 P
(benchmarks based on TPC-B and TPC-C.) 54 455.72 T
1 11 Q
(1. Intr) 54 439.05 T
(oduction) 83.74 439.05 T
0 10 Q
2 (An) 75.6 425.72 P
2 (y application that modi\336es a \336le tak) 87.67 425.72 P
2 (es a risk\321a) 242.91 425.72 P
-0.07 (crash during a series of updates can irreparably damage per-) 54 414.72 P
1.38 (manent data. Grouping a series of updates into an) 54 403.72 P
3 F
1.38 (atomic) 266.9 403.72 P
1.27 (tr) 54 392.72 P
1.27 (ansaction) 60.52 392.72 P
0 F
1.27 ( addresses this problem by ensuring that either) 99.41 392.72 P
(all the updates are applied, or none are [Gray93].) 54 381.72 T
4.03 (T) 75.6 368.72 P
4.03 (ransactions are acclaimed widely as a po) 81.36 368.72 P
4.03 (werful) 268.02 368.72 P
-0.04 (mechanism for handling f) 54 357.72 P
-0.04 (ailures. T) 156.82 357.72 P
-0.04 (ransactions simplify pro-) 194.21 357.72 P
2.11 (gramming by restricting the v) 54 346.72 P
2.11 (ariety of states in which a) 181.08 346.72 P
2.12 (crash can lea) 54 335.72 P
2.12 (v) 109.69 335.72 P
2.12 (e a system. Reco) 114.54 335.72 P
2.12 (v) 187.97 335.72 P
2.12 (erable memory pro) 192.82 335.72 P
2.12 (vides) 273.01 335.72 P
0.19 (atomic updates and persistence for a re) 54 324.72 P
0.19 (gion of virtual mem-) 210.5 324.72 P
1.26 (ory [Satyanarayanan93]. Reco) 54 313.72 P
1.26 (v) 177.72 313.72 P
1.26 (erable memory allo) 182.57 313.72 P
1.26 (ws pro-) 262.59 313.72 P
2.36 (grams to manipulate permanent data structures safely in) 54 302.72 P
1.25 (their nati) 54 291.72 P
1.25 (v) 90.83 291.72 P
1.25 (e, in-memory form\321programs need not con) 95.68 291.72 P
1.25 (v) 278.72 291.72 P
1.25 (ert) 283.57 291.72 P
14.2 (between persistent and non-persistent formats) 54 280.72 P
([Atkinson83].) 54 269.72 T
2.23 (Unfortunately) 75.6 256.72 P
2.23 (, while transactions are useful in both) 131.05 256.72 P
1.99 (k) 54 245.72 P
1.99 (ernel and application programming, their high o) 58.9 245.72 P
1.99 (v) 262.62 245.72 P
1.99 (erhead) 267.47 245.72 P
0.99 (pre) 54 234.72 P
0.99 (v) 66.52 234.72 P
0.99 (ents them from being used ubiquitously to manipulate) 71.37 234.72 P
1.13 (all persistent data. Committing a transaction has tradition-) 317.88 609.72 P
1.34 (ally required at least one synchronous disk I/O. This se) 317.88 598.72 P
1.34 (v-) 549.67 598.72 P
1.84 (eral-millisecond o) 317.88 587.72 P
1.84 (v) 392.05 587.72 P
1.84 (erhead has persuaded most systems to) 396.9 587.72 P
0.04 (gi) 317.88 576.72 P
0.04 (v) 325.41 576.72 P
0.04 (e up the precise f) 330.26 576.72 P
0.04 (ailure semantics of transactions in f) 398.62 576.72 P
0.04 (a) 540.63 576.72 P
0.04 (v) 544.87 576.72 P
0.04 (or) 549.67 576.72 P
1.11 (of f) 317.88 565.72 P
1.11 (aster b) 333.05 565.72 P
1.11 (ut less-precise beha) 360.34 565.72 P
1.11 (vior) 440.67 565.72 P
1.11 (. F) 456.23 565.72 P
1.11 (or e) 467.76 565.72 P
1.11 (xample, man) 483.99 565.72 P
1.11 (y \336le) 536.61 565.72 P
1.47 (systems can lose up to 30 seconds of recently committed) 317.88 554.72 P
-0.2 (data after a crash and depend on ad-hoc mechanisms such as) 317.88 543.72 P
0.66 (ordered writes and consistenc) 317.88 532.72 P
0.66 (y checks to maintain \336le sys-) 438.3 532.72 P
(tem inte) 317.88 521.72 T
(grity) 350.23 521.72 T
(.) 368.47 521.72 T
0.04 (The main contrib) 339.48 508.72 P
0.04 (ution of this paper is to present a sys-) 408.24 508.72 P
0.93 (tem that reduces transaction o) 317.88 497.72 P
0.93 (v) 440.86 497.72 P
0.93 (erhead by a f) 445.71 497.72 P
0.93 (actor of 2000.) 500.32 497.72 P
-0.22 (W) 317.88 486.72 P
-0.22 (e belie) 326.52 486.72 P
-0.22 (v) 352.43 486.72 P
-0.22 (e the resulting 5) 357.28 486.72 P
2 F
-0.22 (m) 423.06 486.72 P
0 F
-0.22 (sec o) 428.82 486.72 P
-0.22 (v) 448.72 486.72 P
-0.22 (erhead mak) 453.57 486.72 P
-0.22 (es transactions) 499.62 486.72 P
0.37 (cheap enough that applications and k) 317.88 475.72 P
0.37 (ernels can use them to) 467.65 475.72 P
1.93 (manipulate all persistent data. T) 317.88 464.72 P
1.93 (w) 452.86 464.72 P
1.93 (o components, Rio and) 459.98 464.72 P
(V) 317.88 453.72 T
(ista, combine to enable this remarkable speedup.) 324.5 453.72 T
0.05 (The Rio \336le cache is an area of main memory that sur-) 339.48 440.72 P
1.62 (vi) 317.88 429.72 P
1.62 (v) 325.41 429.72 P
1.62 (es operating system crashes [Chen96]. Combined with) 330.26 429.72 P
2.65 (an uninterruptible po) 317.88 418.72 P
2.65 (wer supply) 406.81 418.72 P
2.65 (, Rio pro) 452.98 418.72 P
2.65 (vides persistent) 493.41 418.72 P
0.32 (memory to applications that can be used as a safe, in-mem-) 317.88 407.72 P
1.08 (ory b) 317.88 396.72 P
1.08 (uf) 339.59 396.72 P
1.08 (fer for \336le system data. Existing reco) 347.67 396.72 P
1.08 (v) 502.06 396.72 P
1.08 (erable-mem-) 506.91 396.72 P
2.96 (ory libraries such as R) 317.88 385.72 P
2.96 (VM [Satyanarayanan93] can run) 418.34 385.72 P
1.78 (unchanged on Rio and g) 317.88 374.72 P
1.78 (ain a 20-fold increase in perfor-) 422.18 374.72 P
(mance.) 317.88 363.72 T
1.26 (V) 339.48 350.72 P
1.26 (ista is a user) 346.1 350.72 P
1.26 (-le) 398.85 350.72 P
1.26 (v) 409.15 350.72 P
1.26 (el, reco) 414 350.72 P
1.26 (v) 444.54 350.72 P
1.26 (erable-memory library tai-) 449.39 350.72 P
0.99 (lored to run on Rio. Because V) 317.88 339.72 P
0.99 (ista assumes its memory is) 447.37 339.72 P
-0.03 (persistent, its logging and reco) 317.88 328.72 P
-0.03 (v) 440.08 328.72 P
-0.03 (ery mechanisms are f) 444.93 328.72 P
-0.03 (ast and) 529.98 328.72 P
0.85 (simple. The code for V) 317.88 317.72 P
0.85 (ista totals 720 lines of C, including) 413.16 317.72 P
0.35 (the basic transaction routines, reco) 317.88 306.72 P
0.35 (v) 457.69 306.72 P
0.35 (ery code, and persistent) 462.54 306.72 P
0.93 (heap management. V) 317.88 295.72 P
0.93 (ista achie) 403.83 295.72 P
0.93 (v) 442 295.72 P
0.93 (es a 100-fold speedup o) 446.85 295.72 P
0.93 (v) 545.38 295.72 P
0.93 (er) 550.23 295.72 P
0.68 (e) 317.88 284.72 P
0.68 (xisting reco) 322.17 284.72 P
0.68 (v) 369.64 284.72 P
0.68 (erable-memory libraries, e) 374.49 284.72 P
0.68 (v) 481.4 284.72 P
0.68 (en when both run) 486.25 284.72 P
1.98 (on Rio. W) 317.88 273.72 P
1.98 (e e) 362.43 273.72 P
1.98 (xpect V) 375.64 273.72 P
1.98 (ista performance to scale well with) 408.4 273.72 P
0.97 (f) 317.88 262.72 P
0.97 (aster computers because its transactions use no disk I/Os,) 321.11 262.72 P
0.99 (no system calls, and only one memory-to-memory cop) 317.88 251.72 P
0.99 (y\321) 543 251.72 P
-0.06 (f) 317.88 240.72 P
-0.06 (actors that ha) 321.11 240.72 P
-0.06 (v) 374.11 240.72 P
-0.06 (e been identi\336ed repeatedly as bottlenecks to) 378.96 240.72 P
(scaling [Ousterhout90, Anderson91, Rosenblum95].) 317.88 229.72 T
1 11 Q
(2. Related W) 317.88 213.05 T
(ork) 377.85 213.05 T
0 10 Q
2.05 (Out of the v) 339.48 199.72 P
2.05 (ast literature on transaction processing,) 393.43 199.72 P
0.62 (V) 317.88 188.72 P
0.62 (ista is related most closely to R) 324.5 188.72 P
0.62 (VM and a number of per-) 452.42 188.72 P
(sistent stores.) 317.88 177.72 T
2.22 (R) 339.48 164.72 P
2.22 (VM is an important, widely referenced, user) 345.35 164.72 P
2.22 (-le) 535.63 164.72 P
2.22 (v) 545.93 164.72 P
2.22 (el) 550.78 164.72 P
18.62 (library that pro) 317.88 153.72 P
18.62 (vides reco) 414.97 153.72 P
18.62 (v) 474.27 153.72 P
18.62 (erable memory) 479.11 153.72 P
1.94 ([Satyanarayanan93]. R) 317.88 142.72 P
1.94 (VM pro) 410.66 142.72 P
1.94 (vides a simple, lightweight) 444.39 142.72 P
1.76 (layer that handles atomicity and persistence. T) 317.88 131.72 P
1.76 (o k) 513.47 131.72 P
1.76 (eep the) 527.64 131.72 P
1.4 (library simple and lightweight, the designers of R) 317.88 120.72 P
1.4 (VM did) 525.21 120.72 P
0.98 (not support other transactional properties, such as serializ-) 317.88 109.72 P
1.02 (ability and nesting, ar) 317.88 98.72 P
1.02 (guing that these could be better pro-) 407.43 98.72 P
(vided as independent layers on top of R) 317.88 87.72 T
(VM [Lampson83].) 475.67 87.72 T
0 0 0 1 0 0 0 K
54 616.39 558 738 C
0 0 0 1 0 0 0 K
1 14 Q
0 X
0 0 0 1 0 0 0 K
(Fr) 207.63 726.67 T
(ee T) 222.15 726.67 T
(ransactions with Rio V) 246.38 726.67 T
(ista) 382.37 726.67 T
0 10 Q
(Da) 233.79 706.33 T
(vid E. Lo) 245.25 706.33 T
(well and Peter M. Chen) 282.5 706.33 T
(Computer Science and Engineering Di) 216.19 686.33 T
(vision) 370.36 686.33 T
(Department of Electrical Engineering and Computer Science) 183.86 676.33 T
(Uni) 258.79 666.33 T
(v) 273.54 666.33 T
(ersity of Michig) 278.39 666.33 T
(an) 342.77 666.33 T
({dlo) 233.32 656.33 T
(well,pmchen}@eecs.umich.edu) 250.65 656.33 T
(http://www) 242.35 646.33 T
(.eecs.umich.edu/Rio) 287.27 646.33 T
0 0 0 1 0 0 0 K
0 0 612 792 C
54 144 294.12 226 C
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
1.8 (This research w) 78.27 207.83 P
1.8 (as supported in part by NSF grant) 145.07 207.83 P
2.78 (MIP-9521386, Digital Equipment Corporation, and the) 56.67 196.83 P
0.07 (Uni) 56.67 185.83 P
0.07 (v) 71.42 185.83 P
0.07 (ersity of Michig) 76.27 185.83 P
0.07 (an. Peter Chen w) 140.8 185.83 P
0.07 (as also supported by) 209.24 185.83 P
1.58 (an NSF CAREER and Research Initiation A) 56.67 174.83 P
1.58 (w) 242.43 174.83 P
1.58 (ard \050MIP-) 249.55 174.83 P
(9624869 and MIP-9409229\051.) 56.67 163.83 T
55.56 220 187.56 220 2 L
0.25 H
2 Z
N
0 0 0 1 0 0 0 K
0 0 612 792 C
54 72 294.12 144 C
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10 Q
0 X
0 0 0 1 0 0 0 K
(16th A) 159.43 757 T
(CM Symposium on Oper) 185.52 757 T
(ating Systems Principles, October 1997) 283.97 757 T
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
( 2) 302.65 42.62 T
0 10 Q
1.42 (Figure 1 sho) 75.6 478.56 P
1.42 (ws the steps in) 128.2 478.56 P
1.42 (v) 190.68 478.56 P
1.42 (olv) 195.48 478.56 P
1.42 (ed in a simple R) 208.11 478.56 P
1.42 (VM) 278.01 478.56 P
-0.15 (transaction. After declaring the be) 54 467.56 P
-0.15 (ginning of the transaction,) 189.59 467.56 P
-0.18 (the program noti\336es R) 54 456.56 P
-0.18 (VM of the range of memory the trans-) 142.37 456.56 P
0.11 (action may update. R) 54 445.56 P
0.11 (VM copies this range to an in-memory) 138.51 445.56 P
2.44 (re) 54 434.56 P
2.44 (gion called the undo log. The program then writes to) 61.62 434.56 P
1.13 (memory using normal store instructions. If the transaction) 54 423.56 P
0.34 (commits, R) 54 412.56 P
0.34 (VM reclaims the space in the undo log and syn-) 99.66 412.56 P
2.26 (chronously writes the updated data to an on-disk re) 54 401.56 P
2.26 (gion) 276.34 401.56 P
1.52 (called the redo log. If the user aborts the transaction, the) 54 390.56 P
1.19 (undo log is used to quickly re) 54 379.56 P
1.19 (v) 179.2 379.56 P
1.19 (erse the changes to the in-) 184.05 379.56 P
-0.19 (memory cop) 54 368.56 P
-0.19 (y of the database. After man) 103.98 368.56 P
-0.19 (y transactions com-) 216.18 368.56 P
-0.22 (mit and the redo log \336lls up, R) 54 357.56 P
-0.22 (VM truncates the log by prop-) 173.87 357.56 P
1.87 (ag) 54 346.56 P
1.87 (ating ne) 63.39 346.56 P
1.87 (w data to the database on disk and reclaiming) 96.95 346.56 P
0.01 (space in the redo log. After a process or system crash, R) 54 335.56 P
0.01 (VM) 278.01 335.56 P
0.19 (reco) 54 324.56 P
0.19 (v) 71.06 324.56 P
0.19 (ers by replaying committed transactions from the redo) 75.91 324.56 P
(log to the database.) 54 313.56 T
0.14 (In addition to pro) 75.6 300.56 P
0.14 (viding atomicity and durability) 145.59 300.56 P
0.14 (, writ-) 269.54 300.56 P
0.02 (ing data to the redo log accelerates commit, because writing) 54 289.56 P
-0.2 (sequentially to the redo log is f) 54 278.56 P
-0.2 (aster than writing to scattered) 176.6 278.56 P
1.82 (locations in the database. Writing to the redo log in this) 54 267.56 P
1.16 (manner is kno) 54 256.56 P
1.16 (wn as a) 112.74 256.56 P
3 F
1.16 (no-for) 148.72 256.56 P
1.16 (ce) 173.35 256.56 P
0 F
1.16 ( polic) 182.23 256.56 P
1.16 (y) 205.75 256.56 P
1.16 (, because dirty data-) 210.1 256.56 P
1.78 (base pages need not be forced synchronously to disk for) 54 245.56 P
0.06 (e) 54 234.56 P
0.06 (v) 58.19 234.56 P
0.06 (ery transaction [Haerder83]. This polic) 63.04 234.56 P
0.06 (y is used by nearly) 218.9 234.56 P
(all transaction systems.) 54 223.56 T
1.69 (Note from Figure 1 that R) 75.6 210.56 P
1.69 (VM performs up to three) 187.39 210.56 P
1.75 (cop) 54 199.56 P
1.75 (y operations for each transaction. R) 68.34 199.56 P
1.75 (VM performs tw) 218.5 199.56 P
1.75 (o) 289.12 199.56 P
-0.2 (copies during the transaction: one to an in-memory undo log) 54 188.56 P
0.27 (and one to an on-disk redo log. Log truncation adds at least) 54 177.56 P
(one additional cop) 54 166.56 T
(y for each modi\336ed datum in the log.) 127.78 166.56 T
0.7 (Persistent stores such as IBM 801 Storage [Chang88]) 75.6 153.56 P
2.16 (and ObjectStore [Lamb91] pro) 54 142.56 P
2.16 (vide a single-le) 183.35 142.56 P
2.16 (v) 248.51 142.56 P
2.16 (el storage) 253.36 142.56 P
2.42 (interf) 54 131.56 P
2.42 (ace to permanent data [Bensoussan72]. Lik) 75.56 131.56 P
2.42 (e R) 260.28 131.56 P
2.42 (VM,) 275.51 131.56 P
0.23 (most persistent stores write data to a redo log to a) 54 120.56 P
0.23 (v) 254.38 120.56 P
0.23 (oid forc-) 259.18 120.56 P
(ing pages to the database for each transaction.) 54 109.56 T
3.39 (R) 75.6 96.56 P
3.39 (VM and persistent stores b) 81.47 96.56 P
3.39 (uild and maintain an) 202.02 96.56 P
3.04 (application\325) 54 85.56 P
3.04 (s address space dif) 101.22 85.56 P
3.04 (ferently) 184.79 85.56 P
3.04 (. R) 215.24 85.56 P
3.04 (VM) 229.16 85.56 P
3 F
3.04 (copies) 250.81 85.56 P
0 F
3.04 ( the) 276.36 85.56 P
1.63 (database into the application\325) 317.88 478.56 P
1.63 (s address space using) 439.71 478.56 P
4 F
3.92 (read) 534 478.56 P
0 F
0.84 (and maintains it using) 317.88 467.56 P
4 F
2.01 (read) 411.79 467.56 P
0 F
0.84 ( and) 435.79 467.56 P
4 F
2.01 (write) 456.9 467.56 P
0 F
0.84 (. In contrast, per-) 486.9 467.56 P
-0.19 (sistent stores) 317.88 456.56 P
3 F
-0.19 (map) 371.39 456.56 P
0 F
-0.19 ( the database into the application\325) 388.61 456.56 P
-0.19 (s address) 521.81 456.56 P
0.71 (space and depend on the VM system to trigger data mo) 317.88 445.56 P
0.71 (v) 545.38 445.56 P
0.71 (e-) 550.23 445.56 P
1.1 (ment. W) 317.88 434.56 P
1.1 (e discuss the implications of these tw) 352.62 434.56 P
1.1 (o choices in) 508.02 434.56 P
(Section 3.) 317.88 423.56 T
1.53 (V) 339.48 410.56 P
1.53 (ista dif) 346.1 410.56 P
1.53 (fers from current reco) 374.88 410.56 P
1.53 (v) 466.78 410.56 P
1.53 (erable memories and) 471.63 410.56 P
2.4 (persistent stores in that V) 317.88 399.56 P
2.4 (ista is tailored for the reliable) 428.53 399.56 P
1.94 (memory pro) 317.88 388.56 P
1.94 (vided by Rio. T) 368.83 388.56 P
1.94 (ailoring V) 436.64 388.56 P
1.94 (ista for Rio allo) 478.81 388.56 P
1.94 (ws) 546.89 388.56 P
1.38 (V) 317.88 377.56 P
1.38 (ista to eliminate the redo log and its accompan) 324.5 377.56 P
1.38 (ying tw) 521.44 377.56 P
1.38 (o) 553 377.56 P
4.54 (cop) 317.88 366.56 P
4.54 (y operations per transaction. V) 332.22 366.56 P
4.54 (ista also eliminates) 472.81 366.56 P
0.82 (e) 317.88 355.56 P
0.82 (xpensi) 322.17 355.56 P
0.82 (v) 348.03 355.56 P
0.82 (e system calls such as) 352.88 355.56 P
4 F
1.96 (fsync) 446.67 355.56 P
0 F
0.82 ( and) 476.67 355.56 P
4 F
1.96 (msync) 497.74 355.56 P
0 F
0.82 (, which) 527.74 355.56 P
(other systems must use to \337ush data to disk.) 317.88 344.56 T
0.97 (Ha) 339.48 331.56 P
0.97 (ving placed our w) 350.94 331.56 P
0.97 (ork in conte) 425.69 331.56 P
0.97 (xt, we ne) 475.25 331.56 P
0.97 (xt describe) 513.43 331.56 P
1.6 (the tw) 317.88 320.56 P
1.6 (o systems that combine to reduce transaction o) 344.1 320.56 P
1.6 (v) 542.05 320.56 P
1.6 (er-) 546.9 320.56 P
(head.) 317.88 309.56 T
1 11 Q
(3. The Rio File Cache) 317.88 292.9 T
0 10 Q
1.87 (Lik) 339.48 279.56 P
1.87 (e most \336le caches, Rio b) 353.27 279.56 P
1.87 (uf) 460.21 279.56 P
1.87 (fers \336le data in main) 468.29 279.56 P
0.89 (memory to accelerate future accesses. Rio seeks to protect) 317.88 268.56 P
0.04 (this area of memory from its tw) 317.88 257.56 P
0.04 (o common modes of f) 444.64 257.56 P
0.04 (ailure:) 532.45 257.56 P
2.04 (po) 317.88 246.56 P
2.04 (wer loss and system crashes [Chen96]. While systems) 327.63 246.56 P
0.77 (can protect ag) 317.88 235.56 P
0.77 (ainst po) 375.45 235.56 P
0.77 (wer loss in a straightforw) 407.36 235.56 P
0.77 (ard manner) 511.97 235.56 P
2.27 (\050by using a $100 UPS, for e) 317.88 224.56 P
2.27 (xample [APC96]\051, softw) 442.74 224.56 P
2.27 (are) 545.79 224.56 P
1.79 (errors are trickier) 317.88 213.56 P
1.79 (. Rio uses virtual memory protection to) 390.32 213.56 P
1.81 (pre) 317.88 202.56 P
1.81 (v) 330.4 202.56 P
1.81 (ent operating system errors such as wild stores from) 335.25 202.56 P
0.02 (corrupting the \336le cache during a system crash. This protec-) 317.88 191.56 P
-0.09 (tion does not signi\336cantly af) 317.88 180.56 P
-0.09 (fect performance. After a crash,) 431.18 180.56 P
0.62 (Rio writes the \336le cache data in memory to disk, a process) 317.88 169.56 P
(called) 317.88 158.56 T
3 F
(warm r) 344.26 158.56 T
(eboot) 373.06 158.56 T
0 F
(.) 395.28 158.56 T
2.49 (T) 339.48 145.56 P
2.49 (o v) 344.79 145.56 P
2.49 (erify Rio\325) 359.63 145.56 P
2.49 (s reliability ag) 400.73 145.56 P
2.49 (ainst softw) 462.87 145.56 P
2.49 (are crashes,) 508.87 145.56 P
1.22 (Chen et al. crashed the operating system se) 317.88 134.56 P
1.22 (v) 498.33 134.56 P
1.22 (eral thousand) 503.18 134.56 P
1.72 (times using a wide v) 317.88 123.56 P
1.72 (ariety of randomly chosen program-) 406.72 123.56 P
0.35 (ming b) 317.88 112.56 P
0.35 (ugs. Their results sho) 346.09 112.56 P
0.35 (wed that Rio is e) 432.44 112.56 P
0.35 (v) 500.8 112.56 P
0.35 (en more reli-) 505.65 112.56 P
0.17 (able than a \336le system that writes data immediately through) 317.88 101.56 P
-0.2 (to disk. T) 317.88 90.56 P
-0.2 (o further establish Rio\325) 354.73 90.56 P
-0.2 (s ability to mak) 446.07 90.56 P
-0.2 (e memory as) 507.31 90.56 P
-0.09 (safe as disk, the Rio team has been storing their home direc-) 317.88 79.56 P
0 0 0 1 0 0 0 K
54 485.23 558 738 C
0 0 0 1 0 0 0 K
73.13 706.2 73.13 703.22 62.75 706.2 73.13 709.17 4 Y
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
73.13 706.2 73.13 703.22 62.75 706.2 73.13 709.17 4 Y
V
538.72 706.2 538.72 709.17 549.1 706.2 538.72 703.22 4 Y
N
538.72 706.2 538.72 709.17 549.1 706.2 538.72 703.22 4 Y
V
73.38 706.2 538.47 706.2 2 L
N
7 X
90 450 16.36 4.44 247.93 595.26 G
2 Z
0 X
90 450 16.36 4.44 247.93 595.26 A
7 X
90 450 16.36 4.44 247.93 598.22 G
0 X
90 450 16.36 4.44 247.93 598.22 A
7 X
90 450 16.36 4.44 247.93 601.18 G
0 X
90 450 16.36 4.44 247.93 601.18 A
7 X
90 450 16.36 4.44 247.93 604.13 G
0 X
90 450 16.36 4.44 247.93 604.13 A
7 X
90 450 16.36 4.44 288.55 595.26 G
0 X
90 450 16.36 4.44 288.55 595.26 A
7 X
90 450 16.36 4.44 288.55 598.22 G
0 X
90 450 16.36 4.44 288.55 598.22 A
7 X
90 450 16.36 4.44 288.55 601.18 G
0 X
90 450 16.36 4.44 288.55 601.18 A
7 X
90 450 16.36 4.44 288.55 604.13 G
0 X
90 450 16.36 4.44 288.55 604.13 A
233.98 626.49 301.66 641.28 R
N
0 10 Q
(memory) 251.15 629.91 T
(database) 226.15 576.95 T
(redo) 279.71 581.6 T
233.52 655.91 301.83 673.66 R
N
(CPU) 257.95 660.8 T
267.68 652.4 270.65 652.4 267.68 642.02 264.7 652.4 4 Y
0 Z
N
267.68 652.4 270.65 652.4 267.68 642.02 264.7 652.4 4 Y
V
267.68 655.91 267.68 652.65 2 L
2 Z
N
(transaction) 133.8 727.48 T
236.6 709.16 236.6 703.24 2 L
N
246.22 709.16 246.22 703.24 2 L
N
255.85 709.16 255.85 703.24 2 L
N
279.91 709.16 279.91 703.24 2 L
N
294.34 709.16 294.34 703.24 2 L
N
(writes) 251.11 714.73 T
155.07 709.16 155.07 703.24 2 L
N
373.35 709.16 373.35 703.24 2 L
N
490.12 709.16 490.12 703.24 2 L
N
(log truncation) 461.4 713.41 T
(be) 144.71 714.46 T
(gin) 154 714.46 T
(transaction) 352.87 727.48 T
(end) 367.59 714.46 T
7 X
90 450 16.36 4.44 357.21 595.26 G
0 X
90 450 16.36 4.44 357.21 595.26 A
7 X
90 450 16.36 4.44 357.21 598.22 G
0 X
90 450 16.36 4.44 357.21 598.22 A
7 X
90 450 16.36 4.44 357.21 601.18 G
0 X
90 450 16.36 4.44 357.21 601.18 A
7 X
90 450 16.36 4.44 357.21 604.13 G
0 X
90 450 16.36 4.44 357.21 604.13 A
7 X
90 450 16.36 4.44 397.82 595.26 G
0 X
90 450 16.36 4.44 397.82 595.26 A
7 X
90 450 16.36 4.44 397.82 598.22 G
0 X
90 450 16.36 4.44 397.82 598.22 A
7 X
90 450 16.36 4.44 397.82 601.18 G
0 X
90 450 16.36 4.44 397.82 601.18 A
7 X
90 450 16.36 4.44 397.82 604.13 G
0 X
90 450 16.36 4.44 397.82 604.13 A
343.25 626.49 410.94 641.28 R
N
(memory) 360.43 629.91 T
(database) 335.43 576.95 T
(redo) 388.99 581.6 T
342.8 655.91 411.1 673.66 R
N
(CPU) 367.22 660.8 T
7 X
90 450 16.36 4.44 466.48 595.26 G
0 X
90 450 16.36 4.44 466.48 595.26 A
7 X
90 450 16.36 4.44 466.48 598.22 G
0 X
90 450 16.36 4.44 466.48 598.22 A
7 X
90 450 16.36 4.44 466.48 601.18 G
0 X
90 450 16.36 4.44 466.48 601.18 A
7 X
90 450 16.36 4.44 466.48 604.13 G
0 X
90 450 16.36 4.44 466.48 604.13 A
7 X
90 450 16.36 4.44 507.09 595.26 G
0 X
90 450 16.36 4.44 507.09 595.26 A
7 X
90 450 16.36 4.44 507.09 598.22 G
0 X
90 450 16.36 4.44 507.09 598.22 A
7 X
90 450 16.36 4.44 507.09 601.18 G
0 X
90 450 16.36 4.44 507.09 601.18 A
7 X
90 450 16.36 4.44 507.09 604.13 G
0 X
90 450 16.36 4.44 507.09 604.13 A
452.52 626.49 520.21 641.28 R
N
(memory) 469.7 629.91 T
(database) 444.7 576.18 T
(redo) 498.26 581.6 T
452.07 655.91 520.37 673.66 R
N
(CPU) 476.49 660.8 T
399.31 620.54 402.29 620.54 399.31 610.17 396.34 620.54 4 Y
0 Z
N
399.31 620.54 402.29 620.54 399.31 610.17 396.34 620.54 4 Y
V
399.31 625.65 399.31 620.79 2 L
2 Z
N
465.51 619.44 468.48 619.44 465.51 609.06 462.53 619.44 4 Y
0 Z
N
465.51 619.44 468.48 619.44 465.51 609.06 462.53 619.44 4 Y
V
465.51 626.61 465.51 619.69 2 L
2 Z
N
(log) 282.21 570.6 T
(log) 391.48 570.6 T
(log) 500.75 570.6 T
7 X
90 450 16.36 4.44 138.66 595.26 G
0 X
90 450 16.36 4.44 138.66 595.26 A
7 X
90 450 16.36 4.44 138.66 598.22 G
0 X
90 450 16.36 4.44 138.66 598.22 A
7 X
90 450 16.36 4.44 138.66 601.18 G
0 X
90 450 16.36 4.44 138.66 601.18 A
7 X
90 450 16.36 4.44 138.66 604.13 G
0 X
90 450 16.36 4.44 138.66 604.13 A
7 X
90 450 16.36 4.44 179.28 595.26 G
0 X
90 450 16.36 4.44 179.28 595.26 A
7 X
90 450 16.36 4.44 179.28 598.22 G
0 X
90 450 16.36 4.44 179.28 598.22 A
7 X
90 450 16.36 4.44 179.28 601.18 G
0 X
90 450 16.36 4.44 179.28 601.18 A
7 X
90 450 16.36 4.44 179.28 604.13 G
0 X
90 450 16.36 4.44 179.28 604.13 A
124.7 626.49 192.39 641.28 R
N
(memory) 141.88 629.91 T
(database) 116.88 576.95 T
(redo) 170.44 581.6 T
124.25 655.91 192.56 673.66 R
N
(CPU) 148.68 660.8 T
(log) 172.94 570.6 T
409.36 699.69 455.43 710.46 R
7 X
V
N
1 24 Q
0 X
(. . .) 418.21 704.31 T
65.47 626.49 107.78 641.28 R
N
0 10 Q
(undo log) 68.98 629.91 T
119.75 633.54 119.75 630.56 109.37 633.54 119.75 636.51 4 Y
0 Z
N
119.75 633.54 119.75 630.56 109.37 633.54 119.75 636.51 4 Y
V
124.62 633.54 120 633.54 2 L
V
2 Z
N
1 F
-0.1 (Figur) 54.62 544.56 P
-0.1 (e 1: Operations in a T) 78.33 544.56 P
-0.1 (ypical Reco) 170.16 544.56 P
-0.1 (v) 219.12 544.56 P
-0.1 (erable Memory System.) 224.02 544.56 P
0 F
-0.1 ( Reco) 325.19 544.56 P
-0.1 (v) 347.99 544.56 P
-0.1 (erable memory systems perform up to three copies) 352.84 544.56 P
0.36 (for each transaction. The) 54.62 533.56 P
0.36 (y \336rst cop) 154.95 533.56 P
0.36 (y the before-image to an in-memory re) 195.56 533.56 P
0.36 (gion called the undo log, which is used to support) 352.52 533.56 P
1.25 (user) 54.62 522.56 P
1.25 (-initiated aborts. When the transaction commits, the) 71.08 522.56 P
1.25 (y reclaim the space in the undo log and synchronously write the) 285.63 522.56 P
0.09 (updated data to an on-disk re) 54.62 511.56 P
0.09 (gion called the redo log. After man) 170.73 511.56 P
0.09 (y transactions commit and the redo log \336lls up, the) 311.38 511.56 P
0.09 (y truncate) 514.82 511.56 P
54.62 490.23 554.62 497.23 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.92 493.38 556.47 493.38 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
54 485.23 558 738 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(the log by propag) 54.62 500.56 T
(ating ne) 124.84 500.56 T
(w data to the database on disk and reclaiming space in the redo log.) 156.53 500.56 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
( 3) 302.65 42.62 T
0 10 Q
0.38 (tories, source trees, and mail on Rio for a year with no loss) 54 425.48 P
(of data.) 54 414.48 T
2.17 (Rio impro) 75.6 401.48 P
2.17 (v) 118.46 401.48 P
2.17 (es both performance and reliability o) 123.31 401.48 P
2.17 (v) 281.5 401.48 P
2.17 (er) 286.35 401.48 P
-0.13 (current systems. Under normal operation, Rio impro) 54 390.48 P
-0.13 (v) 262.47 390.48 P
-0.13 (es per-) 267.32 390.48 P
0.13 (formance by ob) 54 379.48 P
0.13 (viating the need for synchronous I/O and by) 116.87 379.48 P
-0.01 (using an in\336nite write-back delay rather than the more com-) 54 368.48 P
0.49 (mon 0-30 second delay) 54 357.48 P
0.49 (. The longer delay allo) 147.86 357.48 P
0.49 (ws more data) 239.82 357.48 P
1.91 (to be deleted or o) 54 346.48 P
1.91 (v) 130.92 346.48 P
1.91 (erwritten in the \336le cache, and hence) 135.77 346.48 P
0.85 (fe) 54 335.48 P
0.85 (wer writes need to be propag) 61.52 335.48 P
0.85 (ated to disk. When the sys-) 181.54 335.48 P
2.37 (tem crashes, Rio impro) 54 324.48 P
2.37 (v) 153.72 324.48 P
2.37 (es reliability by preserving data) 158.57 324.48 P
(w) 54 313.48 T
(aiting to be written to disk.) 61.12 313.48 T
0.45 (There are tw) 75.6 300.48 P
0.45 (o main w) 126.93 300.48 P
0.45 (ays systems can use the reliable) 164.95 300.48 P
(memory Rio pro) 54 289.48 T
(vides:) 119.96 289.48 T
4 F
(write) 146.35 289.48 T
0 F
( and) 176.35 289.48 T
4 F
(mmap) 195.79 289.48 T
0 F
( \050Figure 2\051.) 219.79 289.48 T
0.86 (Applications commonly modify data in the \336le cache) 75.6 276.48 P
0.99 (using the) 54 265.48 P
4 F
2.37 (write) 94.86 265.48 P
0 F
0.99 (system call. This e) 133.23 265.48 P
0.99 (xplicit I/O operation) 210.49 265.48 P
0.15 (copies data from a user b) 54 254.48 P
0.15 (uf) 154.78 254.48 P
0.15 (fer to the \336le cache. In Rio, each) 162.86 254.48 P
4 F
2.88 (write) 54 243.48 P
0 F
1.2 ( also changes twice the protection on the modi\336ed) 84 243.48 P
3.14 (page. T) 54 232.48 P
3.14 (o guarantee immediate permanence, applications) 86.33 232.48 P
0.35 (running on non-Rio systems must use) 54 221.48 P
4 F
0.85 (fsync) 209.46 221.48 P
0 F
0.35 ( or other syn-) 239.46 221.48 P
0.2 (chronous I/O to force ne) 54 210.48 P
0.2 (w data to disk, or the) 152.31 210.48 P
0.2 (y must bypass) 237.05 210.48 P
0.12 (the \336le cache and write directly to the ra) 54 199.48 P
0.12 (w disk. On Rio, the) 215.87 199.48 P
0.59 (data being written is permanent as soon as it is copied into) 54 188.48 P
(the \336le cache.) 54 177.48 T
-0.18 (In contrast to) 75.6 164.48 P
4 F
-0.43 (write) 130.34 164.48 P
0 F
-0.18 (,) 160.34 164.48 P
4 F
-0.43 ( mmap) 162.84 164.48 P
0 F
-0.18 ( maps a portion of the \336le) 192.41 164.48 P
2.09 (cache directly into the application\325) 54 153.48 P
2.09 (s address space. Once) 200.66 153.48 P
3.51 (this mapping is established, applications can use store) 54 142.48 P
1.68 (instructions to manipulate the \336le cache data directly; no) 54 131.48 P
1.92 (cop) 54 120.48 P
1.92 (ying is needed. Applications using) 68.34 120.48 P
4 F
4.61 (mmap) 218.5 120.48 P
0 F
1.92 ( on non-Rio) 242.5 120.48 P
0.57 (systems must use) 54 109.48 P
4 F
1.36 (msync) 127.65 109.48 P
0 F
0.57 ( to ensure that ne) 157.65 109.48 P
0.57 (wly written data) 227.99 109.48 P
0.4 (is stored on disk. On Rio, ho) 54 98.48 P
0.4 (we) 170.57 98.48 P
0.4 (v) 181.98 98.48 P
0.4 (er) 186.83 98.48 P
0.4 (, data from each indi) 194.2 98.48 P
0.4 (vid-) 278.01 98.48 P
0.15 (ual store instruction is persistent immediately; no) 54 87.48 P
4 F
0.37 (msync) 254.8 87.48 P
0 F
0.15 ( is) 284.8 87.48 P
2.11 (needed. This allo) 54 76.48 P
2.11 (ws each store instruction to be its o) 126.57 76.48 P
2.11 (wn) 281.9 76.48 P
-0.05 (atomic, durable transaction, a capability that is feasible only) 317.88 731.33 P
1.84 (with some form of reliable memory) 317.88 720.33 P
1.84 (. V) 468.92 720.33 P
1.84 (ista b) 482.38 720.33 P
1.84 (uilds on this) 505.42 720.33 P
2.46 (layer to group se) 317.88 709.33 P
2.46 (v) 391.95 709.33 P
2.46 (eral memory operations into a single,) 396.8 709.33 P
(durable, atomic action.) 317.88 698.33 T
1.31 (Each method of modifying the \336le cache has adv) 339.48 685.33 P
1.31 (an-) 545.23 685.33 P
-0.12 (tages and disadv) 317.88 674.33 P
-0.12 (antages.) 383.5 674.33 P
4 F
-0.28 (mmap) 418.37 674.33 P
0 F
-0.12 ( has signi\336cantly lo) 442.37 674.33 P
-0.12 (wer o) 519.83 674.33 P
-0.12 (v) 542.05 674.33 P
-0.12 (er-) 546.9 674.33 P
-0.19 (heads, especially on Rio. Stores to a mapped re) 317.88 663.33 P
-0.19 (gion incur no) 505.05 663.33 P
0.67 (system calls, while writes require one system call. In addi-) 317.88 652.33 P
2.21 (tion,) 317.88 641.33 P
4 F
5.31 (write) 340.65 641.33 P
0 F
2.21 ( requires an e) 370.65 641.33 P
2.21 (xtra memory-to-memory cop) 430.73 641.33 P
2.21 (y) 551.15 641.33 P
2.21 (,) 555.5 641.33 P
(which can lead to k) 317.88 630.33 T
(eeping each datum in memory twice.) 395.54 630.33 T
1.25 (The main adv) 339.48 617.33 P
1.25 (antage of) 396.73 617.33 P
4 F
3.01 (write) 438.67 617.33 P
0 F
1.25 ( is that it may isolate) 468.67 617.33 P
0.2 (the \336le cache from application errors. The protection mech-) 317.88 606.33 P
1.05 (anism in Rio focuses only on k) 317.88 595.33 P
1.05 (ernel errors. Users are still) 447.99 595.33 P
1.5 (responsible for their o) 317.88 584.33 P
1.5 (wn errors and can corrupt their \336le) 410.16 584.33 P
1.45 (data through erroneous) 317.88 573.33 P
4 F
3.48 (write) 416.93 573.33 P
0 F
1.45 ( calls or store instructions.) 446.93 573.33 P
2.28 (Because store instructions are much more common than) 317.88 562.33 P
2.14 (calls to) 317.88 551.33 P
4 F
5.13 (write) 353.27 551.33 P
0 F
2.14 (, applications may damage the \336le cache) 383.27 551.33 P
2.66 (more easily using) 317.88 540.33 P
4 F
6.39 (mmap) 398.92 540.33 P
0 F
2.66 ( [GM92]. While other systems,) 422.92 540.33 P
1.09 (such as Mach\325) 317.88 529.33 P
1.09 (s Unix serv) 377.27 529.33 P
1.09 (er [Golub90], ha) 424.85 529.33 P
1.09 (v) 493.2 529.33 P
1.09 (e mapped \336les) 498.05 529.33 P
-0.03 (into the application address space, we are a) 317.88 518.33 P
-0.03 (w) 490.25 518.33 P
-0.03 (are of only tw) 497.37 518.33 P
-0.03 (o) 553 518.33 P
2.6 (papers that quantify the increased risk [Chen96, Ng97].) 317.88 507.33 P
-0.01 (Both papers indicate that \0501\051 the risk of corruption increases) 317.88 496.33 P
3.18 (only mar) 317.88 485.33 P
3.18 (ginally when mapping persistent data into the) 356.71 485.33 P
-0.15 (address space and \0502\051 memory protection can be used to fur-) 317.88 474.33 P
0.72 (ther reduce this risk to belo) 317.88 463.33 P
0.72 (w that of using a) 430.37 463.33 P
4 F
1.72 (write) 503.12 463.33 P
0 F
0.72 ( inter-) 533.12 463.33 P
0.84 (f) 317.88 452.33 P
0.84 (ace. The \336rst study w) 321.11 452.33 P
0.84 (as done on the Rio \336le cache and is) 410.19 452.33 P
-0.01 (discussed earlier in this section. The second study compares) 317.88 441.33 P
0.16 (the reliability of) 317.88 430.33 P
4 F
0.38 (mmap) 385.29 430.33 P
0 F
0.16 ( and) 409.29 430.33 P
4 F
0.38 (write) 429.05 430.33 P
0 F
0.16 ( in the Postgres database) 459.05 430.33 P
0.85 (and \336nds little dif) 317.88 419.33 P
0.85 (ference. Users can enhance reliability by) 391.02 419.33 P
1.01 (applying virtual memory techniques to their address space) 317.88 408.33 P
2.53 ([Sulli) 317.88 397.33 P
2.53 (v) 339.86 397.33 P
2.53 (an91, Chen96]. The) 344.61 397.33 P
2.53 (y can also use transactions to) 428.96 397.33 P
1.34 (reduce the risk of corrupting permanent data structures in) 317.88 386.33 P
(the e) 317.88 375.33 T
(v) 336.79 375.33 T
(ent of a crash.) 341.64 375.33 T
1 11 Q
(4. The V) 317.88 358.67 T
(ista Reco) 357.5 358.67 T
(v) 399.85 358.67 T
(erable Memory) 405.24 358.67 T
0 10 Q
0.39 (The Rio \336le cache automatically intercepts writes that) 339.48 345.33 P
1.75 (w) 317.88 334.33 P
1.75 (ould otherwise need to be propag) 325 334.33 P
1.75 (ated synchronously to) 466.73 334.33 P
1.37 (disk. F) 317.88 323.33 P
1.37 (or e) 346.33 323.33 P
1.37 (xample, when R) 362.83 323.33 P
1.37 (VM runs on Rio, writes to the) 430.04 323.33 P
1.57 (redo log and database are not forced further than the \336le) 317.88 312.33 P
1.55 (cache. Short-circuiting synchronous writes in this manner) 317.88 301.33 P
-0.24 (accelerates R) 317.88 290.33 P
-0.24 (VM by a f) 369.87 290.33 P
-0.24 (actor of 20. Ho) 410.44 290.33 P
-0.24 (we) 470.02 290.33 P
-0.24 (v) 481.43 290.33 P
-0.24 (er) 486.29 290.33 P
-0.24 (, it is possible to) 493.65 290.33 P
-0.09 (impro) 317.88 279.33 P
-0.09 (v) 341.62 279.33 P
-0.09 (e performance by another f) 346.47 279.33 P
-0.09 (actor of 100 by tailoring a) 454.3 279.33 P
(reco) 317.88 268.33 T
(v) 334.94 268.33 T
(erable-memory library for Rio.) 339.79 268.33 T
0.1 (V) 339.48 255.33 P
0.1 (ista is just such a reco) 346.1 255.33 P
0.1 (v) 433.92 255.33 P
0.1 (erable-memory library) 438.77 255.33 P
0.1 (. While) 528.46 255.33 P
0.66 (Rio accelerates e) 317.88 244.33 P
0.66 (xisting reco) 386.8 244.33 P
0.66 (v) 434.25 244.33 P
0.66 (erable memories by speeding) 439.1 244.33 P
2.49 (up disk operations, V) 317.88 233.33 P
2.49 (ista can eliminate some operations) 410.29 233.33 P
0.71 (entirely) 317.88 222.33 P
0.71 (. In particular) 347.78 222.33 P
0.71 (, V) 402.94 222.33 P
0.71 (ista eliminates the redo log, tw) 415.27 222.33 P
0.71 (o of) 541.46 222.33 P
-0.2 (the three copies in Figure 1, and all system calls. As a result,) 317.88 211.33 P
0.67 (V) 317.88 200.33 P
0.67 (ista runs 100 times as f) 324.5 200.33 P
0.67 (ast as e) 419.69 200.33 P
0.67 (xisting reco) 449.76 200.33 P
0.67 (v) 497.22 200.33 P
0.67 (erable memo-) 502.07 200.33 P
1.78 (ries, e) 317.88 189.33 P
1.78 (v) 343.29 189.33 P
1.78 (en when both run on Rio. Because V) 348.14 189.33 P
1.78 (ista is light-) 507.21 189.33 P
0.52 (weight \0505) 317.88 178.33 P
2 F
0.52 (m) 359.47 178.33 P
0 F
0.52 (sec o) 365.23 178.33 P
0.52 (v) 385.87 178.33 P
0.52 (erhead for small transactions\051 and simple) 390.72 178.33 P
0.79 (\050720 lines of code\051, it is an ideal b) 317.88 167.33 P
0.79 (uilding block for higher) 460.36 167.33 P
0.22 (layers. Lik) 317.88 156.33 P
0.22 (e R) 360.77 156.33 P
0.22 (VM, V) 373.81 156.33 P
0.22 (ista pro) 401.77 156.33 P
0.22 (vides only the basic transaction) 431.56 156.33 P
0.58 (features of atomicity and persistence; features such as con-) 317.88 145.33 P
1.57 (currenc) 317.88 134.33 P
1.57 (y control, nested transactions, and distrib) 347.71 134.33 P
1.57 (ution can) 519.49 134.33 P
1.18 (be b) 317.88 123.33 P
1.18 (uilt abo) 335.8 123.33 P
1.18 (v) 367.11 123.33 P
1.18 (e V) 371.96 123.33 P
1.18 (ista. Also lik) 386.7 123.33 P
1.18 (e R) 439.8 123.33 P
1.18 (VM, V) 453.8 123.33 P
1.18 (ista is tar) 482.71 123.33 P
1.18 (geted for) 521 123.33 P
(applications whose w) 317.88 112.33 T
(orking set \336ts in main memory) 403.88 112.33 T
(.) 526.29 112.33 T
-0.07 (Figure 3 sho) 339.48 99.33 P
-0.07 (ws the basic operation of V) 389.1 99.33 P
-0.07 (ista. After call-) 497.87 99.33 P
1.39 (ing) 317.88 88.33 P
4 F
3.34 (vista_init) 334.55 88.33 P
0 F
1.39 ( and) 394.55 88.33 P
4 F
3.34 (vista_map) 416.78 88.33 P
0 F
1.39 ( to map the database) 470.78 88.33 P
0.75 (into the address space, applications start a transaction with) 317.88 77.33 P
0 0 0 1 0 0 0 K
54 432.15 295.69 738 C
0 0 0 1 0 0 0 K
7 X
0 0 0 1 0 0 0 K
90 450 37.22 7.62 185.5 543.79 G
0.5 H
2 Z
0 X
90 450 37.22 7.62 185.5 543.79 A
7 X
90 450 37.22 7.61 185.5 548.87 G
0 X
90 450 37.22 7.61 185.5 548.87 A
7 X
90 450 37.22 7.61 185.5 553.95 G
0 X
90 450 37.22 7.61 185.5 553.95 A
7 X
90 450 37.22 7.61 185.5 559.02 G
0 X
90 450 37.22 7.61 185.5 559.02 A
0 10 Q
(disk) 176.98 554.49 T
144.89 583.55 226.1 620.77 R
7 X
V
0 X
N
(\336le cache) 168.82 586.49 T
185.5 576.76 183.81 576.76 185.5 582.65 187.19 576.76 4 Y
0 Z
N
185.5 576.76 183.81 576.76 185.5 582.65 187.19 576.76 4 Y
V
185.5 573.43 187.19 573.43 185.5 567.54 183.81 573.43 4 Y
N
185.5 573.43 187.19 573.43 185.5 567.54 183.81 573.43 4 Y
V
185.5 576.51 185.5 573.68 2 L
N
133.05 634.3 234.56 681.67 R
N
133.61 598.78 133.61 601.76 143.99 598.78 133.61 595.8 4 Y
N
133.61 598.78 133.61 601.76 143.99 598.78 133.61 595.8 4 Y
V
133.05 654.6 117.83 654.6 117.83 598.78 133.36 598.78 4 L
2 Z
N
4 F
(write) 84.54 621.12 T
197.34 600.47 214.26 607.24 R
4 X
V
0 X
N
183.8 640.73 231.17 659.68 R
4 X
V
0 X
N
J
197.34 600.47 183.8 641.07 2 L
J
197.34 600.47 196.15 604.03 2 L
N
[7.673 6.65] 7.673 I
196.15 604.03 184.99 637.51 2 L
N
J
184.99 637.51 183.8 641.07 2 L
N
J
214.26 600.47 231.17 641.07 2 L
J
214.26 600.47 215.7 603.93 2 L
N
[7.931 6.874] 7.931 I
215.7 603.93 229.73 637.61 2 L
N
J
229.73 637.61 231.17 641.07 2 L
N
J
(mmap) 229.73 621.49 T
0 F
(I/O) 188.88 570.84 T
1 F
1.74 (Figur) 55.85 522.25 P
1.74 (e 2: Using the Rio File Cache.) 79.56 522.25 P
0 F
1.74 ( Applications may) 215.81 522.25 P
1.2 (modify persistent data in the Rio \336le cache in tw) 55.85 511.25 P
1.2 (o w) 260.69 511.25 P
1.2 (ays:) 276.51 511.25 P
4 F
3.14 (write) 55.85 500.25 P
0 F
1.31 ( and) 85.85 500.25 P
4 F
3.14 (mmap) 107.91 500.25 P
0 F
1.31 (. Most applications use) 131.91 500.25 P
4 F
3.14 (write) 231.87 500.25 P
0 F
1.31 (, which) 261.87 500.25 P
1.86 (copies data from an application b) 55.85 489.25 P
1.86 (uf) 197.97 489.25 P
1.86 (fer to the \336le cache.) 206.05 489.25 P
4 F
4.54 (mmap) 55.85 478.25 P
0 F
1.89 ( maps a portion of the \336le cache directly into the) 79.85 478.25 P
6.46 (application\325) 55.85 467.25 P
6.46 (s address space. Once this mapping is) 103.07 467.25 P
3.68 (established, applications may use store instructions to) 55.85 456.25 P
55.85 434.92 292.62 441.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
56.16 438.08 557.7 438.08 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
54 432.15 295.69 738 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(manipulate \336le cache data directly; no cop) 55.85 445.25 T
(ying is needed.) 225.16 445.25 T
(application memory) 143.26 672.03 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
133.05 704.3 234.56 728.6 R
0.5 H
0 Z
N
(CPU) 174.08 713.46 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
( 4) 302.65 42.62 T
4 10 Q
2.42 (vista_begin_transaction) 54 423.95 P
0 F
1.01 (. As with R) 192 423.95 P
1.01 (VM, applica-) 239.79 423.95 P
1.81 (tions call) 54 412.95 P
4 F
4.34 (vista_set_range) 96.51 412.95 P
0 F
1.81 ( to declare which area of) 186.51 412.95 P
0.61 (memory a transaction will modify) 54 401.95 P
0.61 (. W) 191.89 401.95 P
0.61 (e insert these calls by) 206.14 401.95 P
4.07 (hand, b) 54 390.95 P
4.07 (ut the) 87.31 390.95 P
4.07 (y could also be inserted by a compiler) 113.73 390.95 P
-0.14 ([O) 54 379.95 P
-0.14 (T) 64.15 379.95 P
-0.14 (oole93]. V) 69.46 379.95 P
-0.14 (ista also has an option to automatically gener-) 111.49 379.95 P
2.39 (ate the range of modi\336cations on a page granularity by) 54 368.95 P
0.17 (using the virtual memory system [Lamb91]; ho) 54 357.95 P
0.17 (we) 243.63 357.95 P
0.17 (v) 255.04 357.95 P
0.17 (er this is) 259.89 357.95 P
1.01 (much slo) 54 346.95 P
1.01 (wer than calling) 91.15 346.95 P
4 F
2.43 (vista_set_range) 161.13 346.95 P
0 F
1.01 ( e) 251.13 346.95 P
1.01 (xplicitly) 258.93 346.95 P
1.01 (.) 291.62 346.95 P
0.53 (V) 54 335.95 P
0.53 (ista sa) 60.62 335.95 P
0.53 (v) 85.67 335.95 P
0.53 (es a before-image of the data to be modi\336ed in an) 90.52 335.95 P
1.19 (undo log. Lik) 54 324.95 P
1.19 (e the main database, the undo log resides in) 110.45 324.95 P
(mapped persistent memory pro) 54 313.95 T
(vided by Rio.) 178 313.95 T
3.33 (After in) 75.6 300.95 P
3.33 (v) 109.91 300.95 P
3.33 (oking) 114.71 300.95 P
4 F
7.99 (vista_set_range) 143.32 300.95 P
0 F
3.33 ( one or more) 233.32 300.95 P
3.35 (times, the transaction modi\336es the database by storing) 54 289.95 P
0.29 (directly to its mapped image. Because of Rio, each of these) 54 278.95 P
2.96 (stores is persistent. The transaction commits by calling) 54 267.95 P
4 F
4.97 (vista_end_transaction) 54 256.95 P
0 F
2.07 (. This function simply dis-) 180 256.95 P
0.51 (cards the undo log for the transaction. The transaction may) 54 245.95 P
3.52 (abort by calling) 54 234.95 P
4 F
8.44 (vista_abort_transaction) 129.82 234.95 P
0 F
3.52 (. This) 267.82 234.95 P
0.51 (function copies the original data from the undo log back to) 54 223.95 P
(the mapped database.) 54 212.95 T
0.34 (Rio and V) 75.6 199.95 P
0.34 (ista cooperate to reco) 116.8 199.95 P
0.34 (v) 202.93 199.95 P
0.34 (er data after a system) 207.78 199.95 P
2.21 (crash. During reboot, Rio writes the contents of the \336le) 54 188.95 P
0.36 (cache back to disk, including data from an) 54 177.95 P
0.36 (y V) 225.81 177.95 P
0.36 (ista se) 240.29 177.95 P
0.36 (gments) 265.23 177.95 P
-0 (that were mapped at the time of the crash. Each time a V) 54 166.95 P
-0 (ista) 280.23 166.95 P
1.28 (se) 54 155.95 P
1.28 (gment is mapped, V) 62.18 155.95 P
1.28 (ista inspects the se) 145.96 155.95 P
1.28 (gment and deter-) 223.8 155.95 P
1.77 (mines if it contains uncommitted transactions. V) 54 144.95 P
1.77 (ista rolls) 258.18 144.95 P
1.57 (back the changes from these uncommitted transactions in) 54 133.95 P
0.19 (the same manner as user) 54 122.95 P
0.19 (-initiated aborts. Reco) 152.3 122.95 P
0.19 (v) 241.12 122.95 P
0.19 (ery is idem-) 245.98 122.95 P
1.34 (potent, so if the system f) 54 111.95 P
1.34 (ails during reco) 158.94 111.95 P
1.34 (v) 223.69 111.95 P
1.34 (ery) 228.54 111.95 P
1.34 (, V) 240.66 111.95 P
1.34 (ista needs) 253.62 111.95 P
(only to replay the undo log ag) 54 100.95 T
(ain.) 173.94 100.95 T
1.7 (Designing a transaction library with Rio\325) 75.6 87.95 P
1.7 (s persistent) 247.7 87.95 P
0.98 (memory in mind yields an e) 54 76.95 P
0.98 (xtremely simple system. V) 170.68 76.95 P
0.98 (ista) 280.23 76.95 P
1.52 (totals only 720 lines \050not including comments\051, including) 317.88 423.95 P
-0.04 (the reco) 317.88 412.95 P
-0.04 (v) 349.62 412.95 P
-0.04 (ery code, be) 354.47 412.95 P
-0.04 (gin/end/abort transaction, tw) 402.83 412.95 P
-0.04 (o v) 517.36 412.95 P
-0.04 (ersions) 529.67 412.95 P
-0.16 (of) 317.88 401.95 P
4 F
-0.38 (vista_set_range) 328.55 401.95 P
0 F
-0.16 ( \050e) 418.55 401.95 P
-0.16 (xplicit calls and VM-generated\051,) 428.51 401.95 P
0.98 (and the persistent memory allocator described belo) 317.88 390.95 P
0.98 (w) 527.37 390.95 P
0.98 (. Se) 533.94 390.95 P
0.98 (v-) 549.67 390.95 P
(eral f) 317.88 379.95 T
(actors contrib) 338.6 379.95 T
(ute to V) 393.11 379.95 T
(ista\325) 424.73 379.95 T
(s simplicity:) 441.4 379.95 T
5 12 Q
(\245) 317.88 366.95 T
0 10 Q
0.68 (All modi\336cations to the mapped space pro) 331.62 366.95 P
0.68 (vided by Rio) 504.97 366.95 P
1.26 (are persistent. This enables V) 331.63 355.95 P
1.26 (ista to eliminate the redo) 454.09 355.95 P
0.21 (log and log truncation. Satyanarayanan, et al. report that) 331.63 344.95 P
0.36 (the log truncation w) 331.63 333.95 P
0.36 (as the most dif) 412.89 333.95 P
0.36 (\336cult part of R) 472.35 333.95 P
0.36 (VM to) 531.25 333.95 P
2.18 (implement, so eliminating the redo log reduces com-) 331.63 322.95 P
(ple) 331.63 311.95 T
(xity signi\336cantly [Satyanarayanan93].) 343.7 311.95 T
5 12 Q
(\245) 317.88 298.95 T
0 10 Q
1.08 (Reco) 331.62 298.95 P
1.08 (v) 352.02 298.95 P
1.08 (ery is simpli\336ed considerably without a redo log) 356.88 298.95 P
0.06 ([Haerder83]. Checkpointing and reco) 331.63 287.95 P
0.06 (v) 481.06 287.95 P
0.06 (ery code are often) 485.91 287.95 P
0.4 (e) 331.63 276.95 P
0.4 (xtremely comple) 335.92 276.95 P
0.4 (x parts of transaction systems. In con-) 403.67 276.95 P
0.1 (trast, V) 331.63 265.95 P
0.1 (ista does not need to checkpoint, and its reco) 360.57 265.95 P
0.1 (v) 540.38 265.95 P
0.1 (ery) 545.23 265.95 P
(code is fe) 331.63 254.95 T
(wer than 20 lines.) 369.7 254.95 T
5 12 Q
(\245) 317.88 241.95 T
0 10 Q
3.35 (High-performance transaction-processing systems use) 331.62 241.95 P
2.06 (optimizations such as group commit to amortize disk) 331.63 230.95 P
1.71 (I/Os across multiple transactions. V) 331.63 219.95 P
1.71 (ista issues no disk) 480.92 219.95 P
1.5 (I/Os and hence does not need these optimizations and) 331.63 208.95 P
(their accompan) 331.63 197.95 T
(ying comple) 392.85 197.95 T
(xity) 442.42 197.95 T
(.) 457.33 197.95 T
5 12 Q
(\245) 317.88 184.95 T
0 10 Q
0.33 (Lik) 331.62 184.95 P
0.33 (e R) 345.42 184.95 P
0.33 (VM, V) 358.55 184.95 P
0.33 (ista handles only the basic transaction fea-) 386.61 184.95 P
1.25 (tures of atomicity and persistence. W) 331.63 173.95 P
1.25 (e belie) 485.93 173.95 P
1.25 (v) 513.31 173.95 P
1.25 (e features) 518.16 173.95 P
0.02 (such as serializability are better handled by higher le) 331.63 162.95 P
0.02 (v) 542.04 162.95 P
0.02 (els) 546.89 162.95 P
2.71 (of softw) 331.63 151.95 P
2.71 (are. W) 367.3 151.95 P
2.71 (e considered and rejected locking the) 395.86 151.95 P
-0.19 (entire database to serialize all transactions. While V) 331.63 140.95 P
-0.19 (ista\325) 537.44 140.95 P
-0.19 (s) 554.11 140.95 P
0.9 (f) 331.63 129.95 P
0.9 (ast response times \0505) 334.86 129.95 P
2 F
0.9 (m) 424.55 129.95 P
0 F
0.9 (sec o) 430.31 129.95 P
0.9 (v) 451.33 129.95 P
0.9 (erhead for small transac-) 456.18 129.95 P
2.2 (tions\051 mak) 331.63 118.95 P
2.2 (es this practical, adopting an) 376.23 118.95 P
2.2 (y concurrenc) 499.03 118.95 P
2.2 (y) 553 118.95 P
0.81 (control scheme w) 331.63 107.95 P
0.81 (ould penalize the majority of applica-) 403.69 107.95 P
1.18 (tions, which are single-threaded and do not need lock-) 331.63 96.95 P
(ing.) 331.63 85.95 T
0 0 0 1 0 0 0 K
54 430.61 558 738 C
0 0 0 1 0 0 0 K
105.44 699.27 105.44 696.3 95.06 699.27 105.44 702.25 4 Y
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
105.44 699.27 105.44 696.3 95.06 699.27 105.44 702.25 4 Y
V
497.95 699.27 497.95 702.25 508.33 699.27 497.95 696.3 4 Y
N
497.95 699.27 497.95 702.25 508.33 699.27 497.95 696.3 4 Y
V
105.69 699.27 497.7 699.27 2 L
N
0 10 Q
(transaction) 187.75 720.55 T
349.43 702.23 349.43 696.32 2 L
2 Z
N
357.98 702.23 357.98 696.32 2 L
N
366.54 702.23 366.54 696.32 2 L
N
387.93 702.23 387.93 696.32 2 L
N
400.77 702.23 400.77 696.32 2 L
N
(writes) 362.33 707.81 T
208.78 702.23 208.78 696.32 2 L
N
471.13 702.23 471.13 696.32 2 L
N
(be) 198.65 707.53 T
(gin) 207.94 707.53 T
(transaction) 451.14 720.55 T
(end) 465.86 707.53 T
1 F
0.61 (Figur) 54.62 478.41 P
0.61 (e 3: Operations in V) 78.33 478.41 P
0.61 (ista.) 166.49 478.41 P
0 F
0.61 ( V) 183.99 478.41 P
0.61 (ista\325) 193.71 478.41 P
0.61 (s operation is tailored for Rio. The database is demand-paged into the \336le cache and) 210.38 478.41 P
0.08 (mapped into the application\325) 54.62 467.41 P
0.08 (s address space. At the start of a transaction, V) 169.02 467.41 P
0.08 (ista logs the original image of the data to an undo) 356.05 467.41 P
-0.24 (log, which is k) 54.62 456.41 P
-0.24 (ept in the persistent memory pro) 112.68 456.41 P
-0.24 (vided by Rio. During the transaction, the application mak) 241.03 456.41 P
-0.24 (es changes directly to) 468.98 456.41 P
54.62 435.07 554.62 442.07 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.92 438.23 556.47 438.23 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
54 430.61 558 738 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(the persistent, in-memory database. At the end of the transaction, V) 54.62 445.41 T
(ista simply discards the undo log.) 324.25 445.41 T
171.29 498.94 252.49 567.69 R
7 X
V
0.5 H
2 Z
0 X
N
(\336le cache) 191.58 505.72 T
159.45 581.22 260.95 628.59 R
0 Z
N
(application memory) 169.76 618.62 T
223.73 547.39 240.65 554.16 R
4 X
V
2 Z
0 X
N
210.2 587.65 257.57 606.6 R
4 X
V
0 X
N
J
223.73 547.39 210.2 587.99 2 L
J
223.73 547.39 222.55 550.95 2 L
N
[7.673 6.65] 7.673 I
222.55 550.95 211.38 584.43 2 L
N
J
211.38 584.43 210.2 587.99 2 L
N
J
240.65 547.39 257.57 587.99 2 L
J
240.65 547.39 242.09 550.85 2 L
N
[7.931 6.874] 7.931 I
242.09 550.85 256.12 584.53 2 L
N
J
256.12 584.53 257.57 587.99 2 L
N
J
(database) 215.09 538.15 T
180.1 547.39 187.68 554.16 R
4 X
V
0 X
N
174.04 587.65 195.26 606.6 R
4 X
V
0 X
N
J
180.1 547.39 174.04 587.99 2 L
J
180.1 547.39 179.55 551.1 2 L
N
[7.294 6.321] 7.294 I
179.55 551.1 174.6 584.28 2 L
N
J
174.6 584.28 174.04 587.99 2 L
N
J
187.68 547.39 195.26 587.99 2 L
J
187.68 547.39 188.37 551.08 2 L
N
[7.348 6.368] 7.348 I
188.37 551.08 194.57 584.31 2 L
N
J
194.57 584.31 195.26 587.99 2 L
N
J
(undo) 173.95 538.15 T
(log) 177.56 527.15 T
205.89 596.82 205.74 593.85 195.52 597.34 206.04 599.79 4 Y
0 Z
N
205.89 596.82 205.74 593.85 195.52 597.34 206.04 599.79 4 Y
V
210 596.61 206.14 596.81 2 L
2 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
159.09 643.31 260.6 667.6 R
0 Z
N
(CPU) 200.12 652.47 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
337.83 498.94 419.03 567.69 R
7 X
V
2 Z
0 X
N
(\336le cache) 358.12 505.72 T
325.98 581.22 427.49 628.59 R
0 Z
N
(application memory) 336.96 618.72 T
390.27 547.39 407.19 554.16 R
4 X
V
2 Z
0 X
N
376.74 587.65 424.11 606.6 R
4 X
V
0 X
N
J
390.27 547.39 376.74 587.99 2 L
J
390.27 547.39 389.09 550.95 2 L
N
[7.673 6.65] 7.673 I
389.09 550.95 377.92 584.43 2 L
N
J
377.92 584.43 376.74 587.99 2 L
N
J
407.19 547.39 424.11 587.99 2 L
J
407.19 547.39 408.63 550.85 2 L
N
[7.931 6.874] 7.931 I
408.63 550.85 422.67 584.53 2 L
N
J
422.67 584.53 424.11 587.99 2 L
N
J
(database) 381.63 538.15 T
346.64 547.39 354.22 554.16 R
4 X
V
0 X
N
340.58 587.65 361.8 606.6 R
4 X
V
0 X
N
J
346.64 547.39 340.58 587.99 2 L
J
346.64 547.39 346.09 551.1 2 L
N
[7.294 6.321] 7.294 I
346.09 551.1 341.14 584.28 2 L
N
J
341.14 584.28 340.58 587.99 2 L
N
J
354.22 547.39 361.8 587.99 2 L
J
354.22 547.39 354.91 551.08 2 L
N
[7.348 6.368] 7.348 I
354.91 551.08 361.11 584.31 2 L
N
J
361.11 584.31 361.8 587.99 2 L
N
J
(undo) 340.49 538.15 T
(log) 344.1 527.15 T
325.63 643.31 427.14 667.6 R
0 Z
N
(CPU) 366.66 652.47 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
399.23 617.9 402.21 617.9 399.23 607.52 396.26 617.9 4 Y
N
399.23 617.9 402.21 617.9 399.23 607.52 396.26 617.9 4 Y
V
399.23 643.54 399.23 618.15 2 L
2 Z
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
( 5) 302.65 42.62 T
0 10 Q
2.81 (V) 75.6 453.18 P
2.81 (ista pro) 82.22 453.18 P
2.81 (vides a general-purpose memory allocator) 114.6 453.18 P
0.78 (that applications can use to dynamically allocate persistent) 54 442.18 P
4.54 (memory) 54 431.18 P
4.54 (.) 86.68 431.18 P
4 F
10.89 (vista_malloc) 96.22 431.18 P
0 F
4.54 ( and) 168.22 431.18 P
4 F
10.89 (vista_free) 196.73 431.18 P
0 F
4.54 ( can be) 256.73 431.18 P
0.88 (in) 54 420.18 P
0.88 (v) 61.38 420.18 P
0.88 (ok) 66.18 420.18 P
0.88 (ed during a transaction and are automatically undone) 76.08 420.18 P
0.76 (if the transaction aborts. V) 54 409.18 P
0.76 (ista enables this feature by logi-) 162.82 409.18 P
0.2 (cally logging) 54 398.18 P
4 F
0.48 (vista_malloc) 109.4 398.18 P
0 F
0.2 ( and) 181.4 398.18 P
4 F
0.48 (vista_free) 201.23 398.18 P
0 F
0.2 ( calls. If) 261.23 398.18 P
2 (a transaction commits, all memory that w) 54 387.18 P
2 (as freed in the) 231.74 387.18 P
0.37 (transaction is returned to the heap. Similarly) 54 376.18 P
0.37 (, if the transac-) 233.04 376.18 P
0.46 (tion aborts, all memory that w) 54 365.18 P
0.46 (as allocated during the trans-) 176.75 365.18 P
4.62 (action is returned to the heap. As a result, aborted) 54 354.18 P
-0.24 (transactions lea) 54 343.18 P
-0.24 (v) 115.49 343.18 P
-0.24 (e the heap unchanged. V) 120.34 343.18 P
-0.24 (ista uses the persis-) 217.35 343.18 P
(tent heap internally to store undo records for transactions.) 54 332.18 T
0.52 (Persistent heaps pro) 75.6 319.18 P
0.52 (vide functionality similar to tradi-) 156.48 319.18 P
1.85 (tional \336le systems b) 54 308.18 P
1.85 (ut ha) 139.09 308.18 P
1.85 (v) 160.46 308.18 P
1.85 (e some unique adv) 165.32 308.18 P
1.85 (antages and) 245.34 308.18 P
1.19 (disadv) 54 297.18 P
1.19 (antages. Persistent heaps may be more \337e) 79.86 297.18 P
1.19 (xible than) 253.21 297.18 P
1.37 (\336le systems, because programs can manipulate permanent) 54 286.18 P
2.58 (data structures in their nati) 54 275.18 P
2.58 (v) 170.72 275.18 P
2.58 (e form\321programs need not) 175.57 275.18 P
4.98 (con) 54 264.18 P
4.98 (v) 68.04 264.18 P
4.98 (ert between persistent and non-persistent formats) 72.89 264.18 P
-0.23 ([Atkinson83]. F) 54 253.18 P
-0.23 (or e) 117.51 253.18 P
-0.23 (xample, programs can store nati) 132.39 253.18 P
-0.23 (v) 259.23 253.18 P
-0.23 (e mem-) 264.08 253.18 P
1.54 (ory pointers in the persistent heap, as long as the system) 54 242.18 P
(maps the heap in a \336x) 54 231.18 T
(ed location.) 141.34 231.18 T
-0.25 (W) 75.6 218.18 P
-0.25 (ith the increased \337e) 84.64 218.18 P
-0.25 (xibility of heaps comes increased) 161.79 218.18 P
0.17 (danger) 54 207.18 P
0.17 (, ho) 80.81 207.18 P
0.17 (we) 95.73 207.18 P
0.17 (v) 107.14 207.18 P
0.17 (er) 111.99 207.18 P
0.17 (. Whereas metadata of a \336le system is inac-) 119.21 207.18 P
0.33 (cessible to ordinary users, the metadata describing a persis-) 54 196.18 P
2.12 (tent heap is mapped into the user\325) 54 185.18 P
2.12 (s address space. V) 201.16 185.18 P
2.12 (ista) 280.23 185.18 P
0.53 (reduces the risk of inadv) 54 174.18 P
0.53 (ertent corruption by mapping each) 154.26 174.18 P
-0.1 (se) 54 163.18 P
-0.1 (gment\325) 62.18 163.18 P
-0.1 (s metadata into an isolated range of addresses \050Fig-) 89.96 163.18 P
0.83 (ure 4\051. This is similar to the technique used in anon) 54 152.18 P
0.83 (ymous) 267.45 152.18 P
0.96 (RPC [Y) 54 141.18 P
0.96 (arvin93]. Other approaches to protecting the meta-) 85.91 141.18 P
0.17 (data could also be used, such as softw) 54 130.18 P
0.17 (are f) 206.76 130.18 P
0.17 (ault isolation and) 224.88 130.18 P
(virtual memory protection [W) 54 119.18 T
(ahbe93].) 173.46 119.18 T
1 11 Q
(5. P) 54 102.51 T
(erf) 71.5 102.51 T
(ormance Ev) 84.66 102.51 T
(aluation) 141.07 102.51 T
0 10 Q
0.87 (V) 75.6 89.18 P
0.87 (ista\325) 82.22 89.18 P
0.87 (s main goal is to drastically lo) 98.89 89.18 P
0.87 (wer the o) 223.83 89.18 P
0.87 (v) 262.62 89.18 P
0.87 (erhead) 267.47 89.18 P
1.85 (of atomic, durable transactions. In order to e) 54 78.18 P
1.85 (v) 244.17 78.18 P
1.85 (aluate ho) 248.92 78.18 P
1.85 (w) 286.9 78.18 P
0.67 (well V) 317.88 731.33 P
0.67 (ista achie) 344.89 731.33 P
0.67 (v) 382.8 731.33 P
0.67 (es this goal, we compare the performance) 387.65 731.33 P
-0.09 (of three systems: V) 317.88 720.33 P
-0.09 (ista, R) 394.48 720.33 P
-0.09 (VM, and R) 419.15 720.33 P
-0.09 (VM-Rio \050R) 462.88 720.33 P
-0.09 (VM running) 508.38 720.33 P
(on a Rio \336le system\051.) 317.88 709.33 T
-0.15 (W) 339.48 696.33 P
-0.15 (e use R) 348.12 696.33 P
-0.15 (VM \050v) 376.47 696.33 P
-0.15 (ersion 1.3\051 as an e) 403.11 696.33 P
-0.15 (xample of a standard) 474.85 696.33 P
3.33 (reco) 317.88 685.33 P
3.33 (v) 334.94 685.33 P
3.33 (erable memory) 339.79 685.33 P
3.33 (. W) 402.73 685.33 P
3.33 (e maximize the performance of) 419.71 685.33 P
-0.14 (R) 317.88 674.33 P
-0.14 (VM by storing the database and log on tw) 323.75 674.33 P
-0.14 (o ra) 490.25 674.33 P
-0.14 (w disks. This) 505.23 674.33 P
-0.03 (sa) 317.88 663.33 P
-0.03 (v) 326.01 663.33 P
-0.03 (es the o) 330.86 663.33 P
-0.03 (v) 361.2 663.33 P
-0.03 (erhead of going through the \336le system and pre-) 366.05 663.33 P
1.62 (v) 317.88 652.33 P
1.62 (ents the system from w) 322.73 652.33 P
1.62 (asting \336le cache space on write-) 421.88 652.33 P
1.39 (mostly data. The log size is \336x) 317.88 641.33 P
1.39 (ed at 10% of the database) 448.58 641.33 P
(size.) 317.88 630.33 T
1.83 (W) 339.48 617.33 P
1.83 (e also run R) 348.12 617.33 P
1.83 (VM unmodi\336ed on a Rio \336le system) 400.87 617.33 P
-0.19 (\050R) 317.88 606.33 P
-0.19 (VM-Rio\051 to sho) 327.08 606.33 P
-0.19 (w ho) 390.33 606.33 P
-0.19 (w Rio accelerates a standard reco) 409.61 606.33 P
-0.19 (v) 542.05 606.33 P
-0.19 (er-) 546.9 606.33 P
0.09 (able memory) 317.88 595.33 P
0.09 (. Storing R) 369.81 595.33 P
0.09 (VM\325) 412.82 595.33 P
0.09 (s log and data on a Rio \336le sys-) 431.71 595.33 P
3.7 (tem accelerates R) 317.88 584.33 P
3.7 (VM by allo) 395.02 584.33 P
3.7 (wing Rio to short-circuit) 448.28 584.33 P
0.96 (R) 317.88 573.33 P
0.96 (VM\325) 323.75 573.33 P
0.96 (s synchronous writes. Ho) 342.64 573.33 P
0.96 (we) 446.37 573.33 P
0.96 (v) 457.78 573.33 P
0.96 (er) 462.63 573.33 P
0.96 (, it causes the system) 470 573.33 P
0.41 (to duplicate the database in both the \336le cache and applica-) 317.88 562.33 P
(tion memory) 317.88 551.33 T
(.) 368.62 551.33 T
1 F
(5.1. Benchmarks) 317.88 535.33 T
0 F
-0.06 (W) 339.48 523.33 P
-0.06 (e use three benchmarks to e) 348.12 523.33 P
-0.06 (v) 458.38 523.33 P
-0.06 (aluate performance. W) 463.13 523.33 P
-0.06 (e) 553.56 523.33 P
-0.16 (use a synthetic benchmark to quantify the o) 317.88 512.33 P
-0.16 (v) 490.73 512.33 P
-0.16 (erhead of trans-) 495.58 512.33 P
1.3 (actions as a function of transaction size. W) 317.88 501.33 P
1.3 (e also use tw) 497.82 501.33 P
1.3 (o) 553 501.33 P
0.07 (benchmarks based on TPC-B and TPC-C, industry-standard) 317.88 490.33 P
0.87 (benchmarks for measuring the performance of transaction-) 317.88 479.33 P
(processing systems.) 317.88 468.33 T
0.59 (Each transaction in our synthetic benchmark modi\336es) 339.48 455.33 P
0.41 (data at a random location in a 50 MB database. The size of) 317.88 444.33 P
0.5 (the database w) 317.88 433.33 P
0.5 (as chosen to \336t in main memory on all three) 377.65 433.33 P
-0.13 (systems. W) 317.88 422.33 P
-0.13 (e v) 363.06 422.33 P
-0.13 (ary the amount of data changed by each trans-) 374.63 422.33 P
0.89 (action from 8 bytes to 1 MB. W) 317.88 411.33 P
0.89 (e use the synthetic bench-) 451.11 411.33 P
3.05 (mark to calculate the o) 317.88 400.33 P
3.05 (v) 421.01 400.33 P
3.05 (erhead per transaction of each) 425.86 400.33 P
0.53 (system. Ov) 317.88 389.33 P
0.53 (erhead per transaction is de\336ned as the time per) 363.26 389.33 P
0.03 (transaction of a gi) 317.88 378.33 P
0.03 (v) 389.65 378.33 P
0.03 (en system minus the time per transaction) 394.5 378.33 P
1.32 (of a system that does not pro) 317.88 367.33 P
1.32 (vide atomic durability) 440.61 367.33 P
1.32 (. T) 530.92 367.33 P
1.32 (ime) 543 367.33 P
-0.02 (per transaction is the running time di) 317.88 356.33 P
-0.02 (vided by the number of) 464.74 356.33 P
(transactions.) 317.88 345.33 T
1.26 (TPC-B processes banking transactions [TPC90]. The) 339.48 332.33 P
2.87 (database consists of a number of branches, tellers, and) 317.88 321.33 P
0.27 (accounts. The accounts comprise o) 317.88 310.33 P
0.27 (v) 458.49 310.33 P
0.27 (er 99% of the database.) 463.35 310.33 P
1.13 (Each transaction updates the balance in a random account) 317.88 299.33 P
2.21 (and the balances in the corresponding branch and teller) 317.88 288.33 P
2.21 (.) 555.5 288.33 P
1.1 (Each transaction also appends a history record to an audit) 317.88 277.33 P
-0.06 (trail. Our v) 317.88 266.33 P
-0.06 (ariant of TPC-B, which we call) 361.67 266.33 P
1 F
-0.06 (debit-cr) 488.81 266.33 P
-0.06 (edit) 522.51 266.33 P
0 F
-0.06 (, fol-) 538.62 266.33 P
-0.2 (lo) 317.88 255.33 P
-0.2 (ws TPC-B closely) 325.41 255.33 P
-0.2 (. W) 397.14 255.33 P
-0.2 (e dif) 410.58 255.33 P
-0.2 (fer primarily by storing the audit) 428.18 255.33 P
-0.04 (trail in a 2 MB, circular b) 317.88 244.33 P
-0.04 (uf) 419.36 244.33 P
-0.04 (fer) 427.44 244.33 P
-0.04 (. W) 437.99 244.33 P
-0.04 (e limit the size of the audit) 451.59 244.33 P
0.08 (trail to 2 MB to k) 317.88 233.33 P
0.08 (eep it in memory and better match our tar-) 387.92 233.33 P
(get applications.) 317.88 222.33 T
1.53 (TPC-C models the acti) 339.48 209.33 P
1.53 (vities of a wholesale supplier) 435.22 209.33 P
2.64 (who recei) 317.88 198.33 P
2.64 (v) 359.42 198.33 P
2.64 (es orders, payments, and deli) 364.27 198.33 P
2.64 (v) 490.66 198.33 P
2.64 (eries for items) 495.51 198.33 P
0.03 ([TPC96]. The database consists of a number of w) 317.88 187.33 P
0.03 (arehouses,) 516.07 187.33 P
1.65 (districts, customers, orders, and items. Our v) 317.88 176.33 P
1.65 (ariant of the) 506.39 176.33 P
1.68 (benchmark, which we call) 317.88 165.33 P
1 F
1.68 (order) 432.07 165.33 P
1.68 (-entry) 455.58 165.33 P
0 F
1.68 (, uses three of the) 481.02 165.33 P
1.12 (\336v) 317.88 154.33 P
1.12 (e transaction types speci\336ed in TPC-C: ne) 328.29 154.33 P
1.12 (w-order) 503.11 154.33 P
1.12 (, pay-) 534.36 154.33 P
1.39 (ment, and deli) 317.88 143.33 P
1.39 (v) 377.34 143.33 P
1.39 (ery) 382.19 143.33 P
1.39 (. W) 394.31 143.33 P
1.39 (e do not implement the order) 409.34 143.33 P
1.39 (-status) 531.89 143.33 P
0.02 (and stock-le) 317.88 132.33 P
0.02 (v) 366.25 132.33 P
0.02 (el transactions, as these do not update an) 371.1 132.33 P
0.02 (y data) 533.82 132.33 P
1.75 (and account for only 8% of the transactions. Order) 317.88 121.33 P
1.75 (-entry) 534.12 121.33 P
2.16 (issues transactions dif) 317.88 110.33 P
2.16 (ferently from TPC-C. In TPC-C, a) 409.72 110.33 P
2.09 (number of concurrent users issue transactions at a gi) 317.88 99.33 P
2.09 (v) 543.71 99.33 P
2.09 (en) 548.56 99.33 P
1.2 (rate. In contrast, order) 317.88 88.33 P
1.2 (-entry issues transactions serially as) 409.87 88.33 P
1.19 (f) 317.88 77.33 P
1.19 (ast as possible. Order) 321.11 77.33 P
1.19 (-entry also does no terminal I/O, as) 410.03 77.33 P
0 0 0 1 0 0 0 K
54 459.84 293.69 738 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(heap management) 159.12 722.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(undo records for) 162.31 706.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(main database) 166.89 694.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(undo records for) 162.31 678.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(heap operations) 163.84 666.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(persistent heap) 165.5 554.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
147.58 733.13 147.58 549.63 2 L
V
0.5 H
0 Z
N
243.13 733.13 243.13 549.63 2 L
V
N
147.33 733.38 243.38 733.38 2 L
V
N
147.33 717.38 243.38 717.38 2 L
V
N
147.33 689.38 243.38 689.38 2 L
V
N
147.33 661.38 243.38 661.38 2 L
V
N
147.33 565.38 243.38 565.38 2 L
V
N
147.33 549.38 243.38 549.38 2 L
V
N
132.28 731.23 124.58 723.81 124.58 697.08 3 L
2 Z
N
132.09 662.63 124.39 670.05 124.39 696.78 3 L
N
132.28 569.38 124.58 566.13 124.58 554.45 3 L
N
132.09 539.38 124.39 542.63 124.39 554.32 3 L
N
1 F
-0.06 (Figur) 56.89 519.95 P
-0.06 (e 4: Memory Allocation in V) 80.6 519.95 P
-0.06 (ista.) 201.29 519.95 P
0 F
-0.06 ( Metadata such as) 218.79 519.95 P
1.71 (free lists and undo records are vulnerable to corruption) 56.89 508.95 P
2.02 (because the) 56.89 497.95 P
2.02 (y are mapped into the application\325) 105.13 497.95 P
2.02 (s address) 251.58 497.95 P
1.43 (space. V) 56.89 486.95 P
1.43 (ista reduces the risk of inadv) 92.15 486.95 P
1.43 (ertently corrupting) 213.83 486.95 P
56.89 465.61 289.97 472.61 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
57.2 468.77 558.74 468.77 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
54 459.84 293.69 738 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(this data by separating it from the user data.) 56.89 475.95 T
(not) 104.88 616.07 T
132.28 648.08 124.58 640.65 124.58 613.92 3 L
0.5 H
2 Z
N
132.09 579.48 124.39 586.9 124.39 613.63 3 L
N
(addressable) 71.78 604.71 T
(metadata) 83.67 695.29 T
(user data) 84.15 552.22 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
( 6) 302.65 42.62 T
0 10 Q
0.63 (we w) 54 460.95 P
0.63 (ould lik) 75.91 460.95 P
0.63 (e to isolate the performance of the underlying) 107.27 460.95 P
(transaction system.) 54 449.95 T
0.18 (F) 75.6 436.95 P
0.18 (or all graphs, we run each benchmark \336v) 81.01 436.95 P
0.18 (e times, dis-) 245.4 436.95 P
0.36 (card the best and w) 54 425.95 P
0.36 (orst runs, and present the a) 132.54 425.95 P
0.36 (v) 241.35 425.95 P
0.36 (erage of the) 246.2 425.95 P
-0.2 (remaining three runs. The standard de) 54 414.95 P
-0.2 (viation of these runs is) 204.37 414.95 P
-0.15 (generally less than 1% of the mean. W) 54 403.95 P
-0.15 (e run each benchmark) 206.55 403.95 P
1.03 (long enough to reach steady state; hence R) 54 392.95 P
1.03 (VM and R) 231.2 392.95 P
1.03 (VM-) 274.68 392.95 P
(Rio results include truncation costs.) 54 381.95 T
1 F
(5.2. En) 54 365.95 T
(vir) 83.33 365.95 T
(onment) 95.37 365.95 T
0 F
0.18 (All e) 75.6 353.95 P
0.18 (xperiments use a 175 MHz DEC 3000/600 Alpha) 95.35 353.95 P
0.5 (w) 54 342.95 P
0.5 (orkstation with 256 MB of memory) 61.12 342.95 P
0.5 (. W) 205.45 342.95 P
0.5 (e use Digital Unix) 219.58 342.95 P
(V3.0 modi\336ed to include the Rio \336le cache.) 54 331.95 T
0.9 (The w) 75.6 318.95 P
0.9 (orkstation has three data disks \050T) 101.67 318.95 P
0.9 (able 1\051. R) 237.85 318.95 P
0.9 (VM) 278.01 318.95 P
-0.17 (and R) 54 307.95 P
-0.17 (VM-Rio use ST31200N to page out the database when) 76.64 307.95 P
1.57 (it o) 54 296.95 P
1.57 (v) 68.48 296.95 P
1.57 (er\337o) 73.33 296.95 P
1.57 (ws memory) 91.41 296.95 P
1.57 (. This disk is attached via a separate) 139.27 296.95 P
-0.07 (SCSI b) 54 285.95 P
-0.07 (us from ST15150N and ST12550N. R) 82.35 285.95 P
-0.07 (VM and R) 233.4 285.95 P
-0.07 (VM-) 274.68 285.95 P
0.74 (Rio use ST15150N to store the redo log and ST12550N to) 54 274.95 P
0.89 (store the database. V) 54 263.95 P
0.89 (ista uses ST15150N to store the data-) 139.37 263.95 P
(base.) 54 252.95 T
1 F
(5.3. Results) 54 236.95 T
0 F
1.49 (The graphs in Figure 5 compare the performance of) 75.6 224.95 P
1.09 (V) 54 213.95 P
1.09 (ista, R) 60.62 213.95 P
1.09 (VM-Rio, and R) 86.47 213.95 P
1.09 (VM on our three benchmarks. The) 150.36 213.95 P
2.39 (synthetic benchmark measures transaction o) 54 202.95 P
2.39 (v) 240.06 202.95 P
2.39 (erhead as a) 244.91 202.95 P
2.86 (function of transaction size, so lo) 54 191.95 P
2.86 (wer v) 200.82 191.95 P
2.86 (alues are better) 225.92 191.95 P
2.86 (.) 291.62 191.95 P
1.69 (Debit-credit and order) 54 180.95 P
1.69 (-entry measure transaction through-) 146.04 180.95 P
0.38 (put, so higher v) 54 169.95 P
0.38 (alues are better) 117.11 169.95 P
0.38 (. Note that all y-ax) 177.85 169.95 P
0.38 (es use log) 253.92 169.95 P
(scales.) 54 158.95 T
1.54 (Results for the synthetic benchmark sho) 75.6 145.95 P
1.54 (w that V) 243.31 145.95 P
1.54 (ista) 280.23 145.95 P
0.65 (incurs only 5) 54 134.95 P
2 F
0.65 (m) 110.66 134.95 P
0 F
0.65 (sec of o) 116.42 134.95 P
0.65 (v) 148.66 134.95 P
0.65 (erhead for small transactions. This) 153.51 134.95 P
1.52 (o) 54 123.95 P
1.52 (v) 58.85 123.95 P
1.52 (erhead represents the cost of be) 63.7 123.95 P
1.52 (ginning the transaction,) 196.93 123.95 P
-0.06 (sa) 54 112.95 P
-0.06 (ving the old data with a single) 62.13 112.95 P
4 F
-0.15 (vista_set_range) 184.74 112.95 P
0 F
-0.06 (, and) 274.74 112.95 P
1.58 (committing the transaction. F) 54 101.95 P
1.58 (or transactions lar) 176.36 101.95 P
1.58 (ger than 1) 250.98 101.95 P
1.02 (KB, o) 54 90.95 P
1.02 (v) 78.76 90.95 P
1.02 (erhead scales roughly linearly with transaction size) 83.61 90.95 P
2.53 (at a rate of 17.9) 54 79.95 P
2 F
2.53 (m) 131.64 79.95 P
0 F
2.53 (sec/KB. The increasing o) 137.4 79.95 P
2.53 (v) 245.93 79.95 P
2.53 (erhead for) 250.78 79.95 P
0.87 (lar) 317.88 731.33 P
0.87 (ger transactions is due to the need to cop) 328.25 731.33 P
0.87 (y more data to) 497.89 731.33 P
0.91 (the undo log. Each transaction in R) 317.88 720.33 P
0.91 (VM-Rio incurs a mini-) 463.34 720.33 P
1.98 (mum o) 317.88 709.33 P
1.98 (v) 347.77 709.33 P
1.98 (erhead of 500) 352.62 709.33 P
2 F
1.98 (m) 416.05 709.33 P
0 F
1.98 (sec. The higher o) 421.8 709.33 P
1.98 (v) 496.47 709.33 P
1.98 (erhead comes) 501.32 709.33 P
1.2 (from the) 317.88 698.33 P
4 F
2.88 (write) 356.94 698.33 P
0 F
1.2 ( and) 386.94 698.33 P
4 F
2.88 (fsync) 408.77 698.33 P
0 F
1.2 ( system calls, cop) 438.77 698.33 P
1.2 (ying to the) 512.82 698.33 P
0.46 (redo log, and log truncation. W) 317.88 687.33 P
0.46 (ithout Rio, R) 445.02 687.33 P
0.46 (VM incurs one) 497.1 687.33 P
-0.07 (synchronous disk I/O to the redo log per transaction, as well) 317.88 676.33 P
0.18 (as some portion of an I/O per transaction during log trunca-) 317.88 665.33 P
0.95 (tion. This results in an o) 317.88 654.33 P
0.95 (v) 419.14 654.33 P
0.95 (erhead of 10 ms for the smallest) 423.99 654.33 P
(transaction.) 317.88 643.33 T
-0.18 (Debit-credit and order) 339.48 630.33 P
-0.18 (-entry sho) 427.78 630.33 P
-0.18 (w results similar to the) 467.62 630.33 P
-0.19 (synthetic benchmarks when the database \336ts in memory) 317.88 619.33 P
-0.19 (. F) 539.45 619.33 P
-0.19 (or) 549.67 619.33 P
0.95 (debit-credit, V) 317.88 608.33 P
0.95 (ista impro) 376.55 608.33 P
0.95 (v) 417.62 608.33 P
0.95 (es performance by a f) 422.47 608.33 P
0.95 (actor of 41) 512.79 608.33 P
1.33 (o) 317.88 597.33 P
1.33 (v) 322.73 597.33 P
1.33 (er R) 327.58 597.33 P
1.33 (VM-Rio and 556 o) 345.05 597.33 P
1.33 (v) 424.71 597.33 P
1.33 (er R) 429.56 597.33 P
1.33 (VM. F) 447.03 597.33 P
1.33 (or order) 474.88 597.33 P
1.33 (-entry) 507.93 597.33 P
1.33 (, V) 531.16 597.33 P
1.33 (ista) 544.11 597.33 P
0.28 (impro) 317.88 586.33 P
0.28 (v) 341.62 586.33 P
0.28 (es performance by a f) 346.47 586.33 P
0.28 (actor of 14 o) 434.11 586.33 P
0.28 (v) 485.62 586.33 P
0.28 (er R) 490.47 586.33 P
0.28 (VM-Rio and) 506.89 586.33 P
3.94 (150 o) 317.88 575.33 P
3.94 (v) 344.17 575.33 P
3.94 (er R) 349.02 575.33 P
3.94 (VM. These speedups are smaller than the) 369.11 575.33 P
0.87 (impro) 317.88 564.33 P
0.87 (v) 341.62 564.33 P
0.87 (ement sho) 346.47 564.33 P
0.87 (wn in the synthetic w) 387.92 564.33 P
0.87 (orkload because the) 476.84 564.33 P
1.49 (body of the debit-credit and order) 317.88 553.33 P
1.49 (-entry transactions ha) 459.83 553.33 P
1.49 (v) 548.71 553.33 P
1.49 (e) 553.56 553.33 P
2.91 (lar) 317.88 542.33 P
2.91 (ger \336x) 328.25 542.33 P
2.91 (ed o) 356.84 542.33 P
2.91 (v) 376.55 542.33 P
2.91 (erheads than synthetic, and because the) 381.4 542.33 P
2.91 (y) 553 542.33 P
(issue se) 317.88 531.33 T
(v) 348.46 531.33 T
(eral) 353.31 531.33 T
4 F
(vista_set_range) 370.8 531.33 T
0 F
( calls per transaction.) 460.8 531.33 T
-0.13 (R) 339.48 518.33 P
-0.13 (VM and V) 345.35 518.33 P
-0.13 (ista both be) 387.27 518.33 P
-0.13 (gin thrashing once the database) 432.98 518.33 P
1.73 (is lar) 317.88 507.33 P
1.73 (ger than a) 339.15 507.33 P
1.73 (v) 381.84 507.33 P
1.73 (ailable memory \050roughly 200 MB\051. Note) 386.59 507.33 P
0.71 (that R) 317.88 496.33 P
0.71 (VM-Rio be) 341.96 496.33 P
0.71 (gins thrashing at half the database size of) 388.35 496.33 P
1.1 (R) 317.88 485.33 P
1.1 (VM and V) 323.75 485.33 P
1.1 (ista due to) 368.11 485.33 P
3 F
1.1 (double b) 415.01 485.33 P
1.1 (uf) 450.62 485.33 P
1.1 (fering) 458.22 485.33 P
0 F
1.1 (. Double b) 482.11 485.33 P
1.1 (uf) 526.04 485.33 P
1.1 (fering) 534.12 485.33 P
0.62 (results from frequent writes to the database \336le, ef) 317.88 474.33 P
0.62 (fecti) 523.41 474.33 P
0.62 (v) 540.93 474.33 P
0.62 (ely) 545.78 474.33 P
1.12 (cop) 317.88 463.33 P
1.12 (ying the database into the \336le cache. The result is tw) 332.22 463.33 P
1.12 (o) 553 463.33 P
1.22 (copies of the database: one in the process\325) 317.88 452.33 P
1.22 (s address space) 494.46 452.33 P
(and another in the Rio \336le cache.) 317.88 441.33 T
-0.06 (Most transaction processing systems amortize the redo) 339.48 428.33 P
0.26 (log I/O across multiple concurrent transactions, a technique) 317.88 417.33 P
0.81 (kno) 317.88 406.33 P
0.81 (wn as) 332.63 406.33 P
3 F
0.81 (gr) 359.81 406.33 P
0.81 (oup commit) 368.25 406.33 P
0 F
0.81 ( [DeW) 416 406.33 P
0.81 (itt84]. Systems that perform) 443.34 406.33 P
0.65 (this optimization w) 317.88 395.33 P
0.65 (ait for a number of committing transac-) 396.32 395.33 P
1.79 (tions to accumulate, then synchronously write to disk all) 317.88 384.33 P
0.73 (commit records for this group in one I/O. W) 317.88 373.33 P
0.73 (e implement a) 499.87 373.33 P
2.38 (simple form of group commit in R) 317.88 362.33 P
2.38 (VM to measure ho) 469.17 362.33 P
2.38 (w) 550.78 362.33 P
0.82 (much it impro) 317.88 351.33 P
0.82 (v) 376.04 351.33 P
0.82 (es performance. Figure 6 sho) 380.89 351.33 P
0.82 (ws the perfor-) 500.27 351.33 P
1.1 (mance of R) 317.88 340.33 P
1.1 (VM when 1, 8, or 64 transactions are grouped) 365.37 340.33 P
0.12 (together to share a single write to the redo log. While group) 317.88 329.33 P
1.11 (commit does impro) 317.88 318.33 P
1.11 (v) 397.74 318.33 P
1.11 (e performance, it suf) 402.59 318.33 P
1.11 (fers from se) 488.42 318.33 P
1.11 (v) 538.16 318.33 P
1.11 (eral) 543.01 318.33 P
0.55 (problems. First, it does not impro) 317.88 307.33 P
0.55 (v) 454.11 307.33 P
0.55 (e response time; w) 458.96 307.33 P
0.55 (aiting) 535.22 307.33 P
2.59 (for a group of transactions to accumulate lengthens the) 317.88 296.33 P
-0.14 (response time of an indi) 317.88 285.33 P
-0.14 (vidual transaction. Second, through-) 413.16 285.33 P
1.81 (put for lar) 317.88 274.33 P
1.81 (ge transactions can be limited by the speed of) 361.31 274.33 P
0.63 (writing to the redo log. Third, group commit w) 317.88 263.33 P
0.63 (orks only if) 510.62 263.33 P
3.4 (there are man) 317.88 252.33 P
3.4 (y concurrent transactions. Single-threaded) 378.95 252.33 P
1.14 (applications with dependent transactions cannot use group) 317.88 241.33 P
3.83 (commit because earlier transactions are delayed; these) 317.88 230.33 P
(applications need the f) 317.88 219.33 T
(ast response times pro) 408.04 219.33 T
(vided by V) 496.49 219.33 T
(ista.) 540.33 219.33 T
-0.21 (The performance impro) 339.48 206.33 P
-0.21 (v) 433.88 206.33 P
-0.21 (ements we ha) 438.73 206.33 P
-0.21 (v) 492.54 206.33 P
-0.21 (e demonstrated) 497.39 206.33 P
1.14 (can be brok) 317.88 195.33 P
1.14 (en into tw) 366.7 195.33 P
1.14 (o components. As we e) 408.88 195.33 P
1.14 (xpected, Rio) 506.31 195.33 P
1.91 (impro) 317.88 184.33 P
1.91 (v) 341.62 184.33 P
1.91 (es performance for R) 346.47 184.33 P
1.91 (VM by a f) 436.1 184.33 P
1.91 (actor of 11-20 by) 483.11 184.33 P
0.42 (absorbing all synchronous disk writes. The biggest surprise) 317.88 173.33 P
0.11 (from our measurements w) 317.88 162.33 P
0.11 (as ho) 422.8 162.33 P
0.11 (w much V) 443.49 162.33 P
0.11 (ista impro) 484.77 162.33 P
0.11 (v) 525 162.33 P
0.11 (ed per-) 529.85 162.33 P
2.01 (formance o) 317.88 151.33 P
2.01 (v) 365 151.33 P
2.01 (er R) 369.85 151.33 P
2.01 (VM-Rio \050a f) 388.01 151.33 P
2.01 (actor of 14-100\051. Once Rio) 441.92 151.33 P
1.56 (remo) 317.88 140.33 P
1.56 (v) 338.28 140.33 P
1.56 (es disk writes, f) 343.13 140.33 P
1.56 (actors such as system calls, copies,) 410.49 140.33 P
0.81 (and manipulating the redo log comprise a lar) 317.88 129.33 P
0.81 (ge fraction of) 502.51 129.33 P
1.59 (the remaining o) 317.88 118.33 P
1.59 (v) 383.68 118.33 P
1.59 (erhead in a transaction. V) 388.53 118.33 P
1.59 (ista does a) 496.75 118.33 P
1.59 (w) 541.44 118.33 P
1.59 (ay) 548.56 118.33 P
0.68 (with the redo log, all system calls, and all b) 317.88 107.33 P
0.68 (ut one of these) 497.37 107.33 P
-0.2 (copies.) 317.88 96.33 P
-0.2 (The) 350.73 96.33 P
-0.2 ( performance) 368.78 96.33 P
-0.2 ( impro) 424.11 96.33 P
-0.2 (v) 450.15 96.33 P
-0.2 (ement) 455 96.33 P
-0.2 ( resulting) 481.94 96.33 P
-0.2 ( from the) 521.74 96.33 P
0 0 0 1 0 0 0 K
54 467.62 294.18 738 C
0 0 0 1 0 0 0 K
56.15 473.61 290.77 480.61 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
56.46 476.77 558.01 476.77 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
54 467.62 294.18 738 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 56.15 483.95 T
(able 1: Disk P) 61.9 483.95 T
(arameters.) 120.97 483.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Seag) 134.74 721.95 T
(ate ST31200N) 154.13 721.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(spindle speed) 87.07 705.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5411 RPM) 199.43 705.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(a) 88.65 689.95 T
(v) 92.89 689.95 T
(erage seek) 97.74 689.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10 ms) 209.15 689.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(transfer rate) 90.14 673.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3.3-5.9 MB/s) 194.71 673.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Seag) 134.74 640.95 T
(ate ST15150N) 154.13 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(spindle speed) 87.07 624.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(7200 RPM) 199.43 624.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(a) 88.65 608.95 T
(v) 92.89 608.95 T
(erage seek) 97.74 608.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9 ms) 211.65 608.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(transfer rate) 90.14 592.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5.9-9.0 MB/s) 194.71 592.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Seag) 134.74 559.95 T
(ate ST12550N) 154.13 559.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(spindle speed) 87.07 543.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(7200 RPM) 199.43 543.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(a) 88.65 527.95 T
(v) 92.89 527.95 T
(erage seek) 97.74 527.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(9 ms) 211.65 527.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(transfer rate) 90.14 511.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4.3-7.1 MB/s) 194.71 511.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
66.38 732.36 66.38 668.86 2 L
V
0.5 H
0 Z
N
161.93 715.11 161.93 668.36 2 L
V
N
280.55 732.36 280.55 668.86 2 L
V
N
66.13 732.61 280.8 732.61 2 L
V
N
66.63 717.86 280.3 717.86 2 L
V
N
66.63 715.36 280.3 715.36 2 L
V
N
66.13 700.61 280.8 700.61 2 L
V
N
66.13 684.61 280.8 684.61 2 L
V
N
66.13 668.61 280.8 668.61 2 L
V
N
66.38 651.36 66.38 587.86 2 L
V
N
161.93 634.11 161.93 587.36 2 L
V
N
280.55 651.36 280.55 587.86 2 L
V
N
66.13 651.61 280.8 651.61 2 L
V
N
66.63 636.86 280.3 636.86 2 L
V
N
66.63 634.36 280.3 634.36 2 L
V
N
66.13 619.61 280.8 619.61 2 L
V
N
66.13 603.61 280.8 603.61 2 L
V
N
66.13 587.61 280.8 587.61 2 L
V
N
66.38 570.36 66.38 506.86 2 L
V
N
161.93 553.11 161.93 506.36 2 L
V
N
280.55 570.36 280.55 506.86 2 L
V
N
66.13 570.61 280.8 570.61 2 L
V
N
66.63 555.86 280.3 555.86 2 L
V
N
66.63 553.36 280.3 553.36 2 L
V
N
66.13 538.61 280.8 538.61 2 L
V
N
66.13 522.61 280.8 522.61 2 L
V
N
66.13 506.61 280.8 506.61 2 L
V
N
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
( 7) 302.65 42.62 T
0 0 0 1 0 0 0 K
54 73.85 558 738 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
0.29 (Figur) 56.15 149.95 P
0.29 (e 5: P) 79.86 149.95 P
0.29 (erf) 104.12 149.95 P
0.29 (ormance of V) 116.08 149.95 P
0.29 (ista, R) 174.05 149.95 P
0.29 (VM-Rio, and R) 201.01 149.95 P
0.29 (VM.) 266.87 149.95 P
0 F
0.29 ( This \336gure sho) 286.03 149.95 P
0.29 (ws the performance of three reco) 349.15 149.95 P
0.29 (v) 482.34 149.95 P
0.29 (erable memories) 487.19 149.95 P
0.19 (on three benchmarks. Figure 5a sho) 56.15 138.95 P
0.19 (ws the o) 199.62 138.95 P
0.19 (v) 233.19 138.95 P
0.19 (erhead per transaction for a synthetic, 50 MB database. F) 238.04 138.95 P
0.19 (or small transactions,) 468.19 138.95 P
0.33 (V) 56.15 127.95 P
0.33 (ista impro) 62.77 127.95 P
0.33 (v) 103.23 127.95 P
0.33 (es performance by a f) 108.08 127.95 P
0.33 (actor of 100 o) 195.91 127.95 P
0.33 (v) 252.56 127.95 P
0.33 (er R) 257.41 127.95 P
0.33 (VM-Rio and a f) 273.88 127.95 P
0.33 (actor of 2000 o) 338.36 127.95 P
0.33 (v) 400.01 127.95 P
0.33 (er R) 404.86 127.95 P
0.33 (VM. Figures 5b and 5c sho) 421.32 127.95 P
0.33 (w the) 531.59 127.95 P
0.79 (throughput for debit-credit and order) 56.15 116.95 P
0.79 (-entry) 206.32 116.95 P
0.79 (. V) 229.55 116.95 P
0.79 (ista impro) 241.96 116.95 P
0.79 (v) 282.89 116.95 P
0.79 (es performance by a f) 287.74 116.95 P
0.79 (actor of 14-41 o) 377.44 116.95 P
0.79 (v) 443.82 116.95 P
0.79 (er R) 448.67 116.95 P
0.79 (VM-Rio and 150-556) 465.6 116.95 P
56.15 95.61 553.85 102.61 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
56.46 98.77 558.01 98.77 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
54 73.85 558 738 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(o) 56.15 105.95 T
(v) 61 105.95 T
(er R) 65.85 105.95 T
(VM.) 81.99 105.95 T
1 F
(\050a\051 synthetic \050o) 268.02 490.46 T
(v) 331.24 490.46 T
(erhead\051) 336.14 490.46 T
109.73 250.63 109.73 432.12 294.04 432.12 294.04 250.63 109.73 250.63 5 L
0.5 H
1 Z
N
109.73 250.63 109.73 252.93 2 L
N
140.43 250.63 140.43 252.93 2 L
N
171.13 250.63 171.13 252.93 2 L
N
201.88 250.63 201.88 252.93 2 L
N
232.58 250.63 232.58 252.93 2 L
N
263.28 250.63 263.28 252.93 2 L
N
294.04 250.63 294.04 252.93 2 L
N
109.73 432.12 109.73 429.82 2 L
N
140.43 432.12 140.43 429.82 2 L
N
171.13 432.12 171.13 429.82 2 L
N
201.88 432.12 201.88 429.82 2 L
N
232.58 432.12 232.58 429.82 2 L
N
263.28 432.12 263.28 429.82 2 L
N
294.04 432.12 294.04 429.82 2 L
N
109.73 250.63 109.73 255.23 2 L
N
171.13 250.63 171.13 255.23 2 L
N
232.58 250.63 232.58 255.23 2 L
N
294.04 250.63 294.04 255.23 2 L
N
109.73 432.12 109.73 427.51 2 L
N
171.13 432.12 171.13 427.51 2 L
N
232.58 432.12 232.58 427.51 2 L
N
0 F
(0) 107.23 236.18 T
(100) 163.63 236.18 T
(200) 225.08 236.18 T
(300) 286.54 236.18 T
(Database Size \050MB\051) 161.34 225.45 T
294.04 432.12 294.04 427.51 2 L
N
109.73 250.63 112.03 250.63 2 L
N
109.73 264.34 112.03 264.34 2 L
N
109.73 272.28 112.03 272.28 2 L
N
109.73 277.99 112.03 277.99 2 L
N
109.73 282.36 112.03 282.36 2 L
N
109.73 285.93 112.03 285.93 2 L
N
109.73 288.99 112.03 288.99 2 L
N
109.73 291.64 112.03 291.64 2 L
N
109.73 293.94 112.03 293.94 2 L
N
109.73 296.02 112.03 296.02 2 L
N
109.73 309.67 112.03 309.67 2 L
N
109.73 317.67 112.03 317.67 2 L
N
109.73 323.32 112.03 323.32 2 L
N
109.73 327.69 112.03 327.69 2 L
N
109.73 331.32 112.03 331.32 2 L
N
109.73 334.38 112.03 334.38 2 L
N
109.73 336.97 112.03 336.97 2 L
N
109.73 339.27 112.03 339.27 2 L
N
109.73 341.4 112.03 341.4 2 L
N
109.73 355.05 112.03 355.05 2 L
N
109.73 363 112.03 363 2 L
N
109.73 368.7 112.03 368.7 2 L
N
109.73 373.08 112.03 373.08 2 L
N
109.73 376.65 112.03 376.65 2 L
N
109.73 379.7 112.03 379.7 2 L
N
109.73 382.35 112.03 382.35 2 L
N
109.73 384.66 112.03 384.66 2 L
N
109.73 386.73 112.03 386.73 2 L
N
109.73 400.38 112.03 400.38 2 L
N
109.73 408.39 112.03 408.39 2 L
N
109.73 414.03 112.03 414.03 2 L
N
109.73 418.41 112.03 418.41 2 L
N
109.73 422.04 112.03 422.04 2 L
N
109.73 425.09 112.03 425.09 2 L
N
109.73 427.68 112.03 427.68 2 L
N
109.73 429.99 112.03 429.99 2 L
N
109.73 432.12 112.03 432.12 2 L
N
294.04 250.63 291.74 250.63 2 L
N
294.04 264.34 291.74 264.34 2 L
N
294.04 272.28 291.74 272.28 2 L
N
294.04 277.99 291.74 277.99 2 L
N
294.04 282.36 291.74 282.36 2 L
N
294.04 285.93 291.74 285.93 2 L
N
294.04 288.99 291.74 288.99 2 L
N
294.04 291.64 291.74 291.64 2 L
N
294.04 293.94 291.74 293.94 2 L
N
294.04 296.02 291.74 296.02 2 L
N
294.04 309.67 291.74 309.67 2 L
N
294.04 317.67 291.74 317.67 2 L
N
294.04 323.32 291.74 323.32 2 L
N
294.04 327.69 291.74 327.69 2 L
N
294.04 331.32 291.74 331.32 2 L
N
294.04 334.38 291.74 334.38 2 L
N
294.04 336.97 291.74 336.97 2 L
N
294.04 339.27 291.74 339.27 2 L
N
294.04 341.4 291.74 341.4 2 L
N
294.04 355.05 291.74 355.05 2 L
N
294.04 363 291.74 363 2 L
N
294.04 368.7 291.74 368.7 2 L
N
294.04 373.08 291.74 373.08 2 L
N
294.04 376.65 291.74 376.65 2 L
N
294.04 379.7 291.74 379.7 2 L
N
294.04 382.35 291.74 382.35 2 L
N
294.04 384.66 291.74 384.66 2 L
N
294.04 386.73 291.74 386.73 2 L
N
294.04 400.38 291.74 400.38 2 L
N
294.04 408.39 291.74 408.39 2 L
N
294.04 414.03 291.74 414.03 2 L
N
294.04 418.41 291.74 418.41 2 L
N
294.04 422.04 291.74 422.04 2 L
N
294.04 425.09 291.74 425.09 2 L
N
294.04 427.68 291.74 427.68 2 L
N
294.04 429.99 291.74 429.99 2 L
N
294.04 432.12 291.74 432.12 2 L
N
109.73 250.63 114.33 250.63 2 L
N
109.73 296.02 114.33 296.02 2 L
N
109.73 341.4 114.33 341.4 2 L
N
109.73 386.73 114.33 386.73 2 L
N
109.73 432.12 114.33 432.12 2 L
N
294.04 250.63 289.43 250.63 2 L
N
294.04 296.02 289.43 296.02 2 L
N
294.04 341.4 289.43 341.4 2 L
N
294.04 386.73 289.43 386.73 2 L
N
(10) 96.91 245.86 T
(100) 91.91 291.25 T
(1,000) 84.41 336.64 T
(10,000) 79.41 381.96 T
(100,000) 74.41 427.35 T
(Transactions/Second) 0 -270 74.81 298.92 TF
294.04 432.12 289.43 432.12 2 L
N
116.75 293.25 122.63 293.25 128.5 293.25 134.38 293.25 140.2 293.25 146.07 293.25 151.95 293.25
 157.82 293.25 163.64 293.25 169.51 293.25 175.39 293.25 181.26 293.25 187.08 293.25 192.96 293.25 198.83 293.25
 204.65 293.25 210.52 293.25 216.4 293.25 222.27 293.25 228.09 293.02 233.96 292.1 239.84 291.12 245.71 290.37
 251.53 289.56 257.41 288.7 263.28 286.28 269.1 285.65 274.98 281.96 28 L
N
J
116.75 344.45 122.63 344.34 128.5 344.22 134.38 344.05 140.2 343.59 146.07 343.42 151.95 343.19
 157.82 343.07 163.64 342.9 169.51 328.1 175.39 313.93 181.26 306.67 187.08 300.1 192.96 297.68 198.83 296.99
 204.65 293.94 210.52 291.35 216.4 292.79 222.27 292.1 228.09 291.35 233.96 290.6 239.84 288.99 245.71 288.12
 251.53 289.56 257.41 287.55 263.28 290.08 269.1 287.84 274.98 286.63 28 L
J
116.75 344.45 118.5 344.42 2 L
N
[1.848 2.376] 1.848 I
118.5 344.42 120.88 344.37 2 L
N
J
120.88 344.37 122.63 344.34 124.38 344.3 3 L
N
[1.848 2.376] 1.848 I
124.38 344.3 126.75 344.26 2 L
N
J
126.75 344.26 128.5 344.22 130.25 344.17 3 L
N
[1.849 2.378] 1.849 I
130.25 344.17 132.63 344.1 2 L
N
J
132.63 344.1 134.38 344.05 136.12 343.91 3 L
N
[1.817 2.336] 1.817 I
136.12 343.91 138.45 343.73 2 L
N
J
138.45 343.73 140.2 343.59 141.95 343.54 3 L
N
[1.849 2.378] 1.849 I
141.95 343.54 144.32 343.47 2 L
N
J
144.32 343.47 146.07 343.42 147.82 343.35 3 L
N
[1.851 2.38] 1.851 I
147.82 343.35 150.2 343.26 2 L
N
J
150.2 343.26 151.95 343.19 153.7 343.15 3 L
N
[1.848 2.376] 1.848 I
153.7 343.15 156.07 343.11 2 L
N
J
156.07 343.11 157.82 343.07 159.57 343.02 3 L
N
[1.804 2.32] 1.804 I
159.57 343.02 161.89 342.95 2 L
N
J
161.89 342.95 163.64 342.9 164.28 341.27 3 L
N
[3.479 4.473] 3.479 I
164.28 341.27 168.87 329.72 2 L
N
J
168.87 329.72 169.51 328.1 170.18 326.48 3 L
N
[3.315 4.262] 3.315 I
170.18 326.48 174.72 315.54 2 L
N
J
174.72 315.54 175.39 313.93 176.49 312.57 3 L
N
[4.54 5.837] 4.54 I
176.49 312.57 180.16 308.03 2 L
N
J
180.16 308.03 181.26 306.67 182.42 305.36 3 L
N
[4.101 5.272] 4.101 I
182.42 305.36 185.92 301.41 2 L
N
J
185.92 301.41 187.08 300.1 188.7 299.44 3 L
N
[2.219 2.854] 2.219 I
188.7 299.44 191.34 298.35 2 L
N
J
191.34 298.35 192.96 297.68 194.69 297.48 3 L
N
[1.879 2.415] 1.879 I
194.69 297.48 197.09 297.2 2 L
N
J
197.09 297.2 198.83 296.99 200.38 296.18 3 L
N
[2.387 3.07] 2.387 I
200.38 296.18 203.1 294.75 2 L
N
J
203.1 294.75 204.65 293.94 206.25 293.23 3 L
N
[2.272 2.921] 2.272 I
206.25 293.23 208.92 292.06 2 L
N
J
208.92 292.06 210.52 291.35 212.22 291.77 3 L
N
[1.982 2.549] 1.982 I
212.22 291.77 214.7 292.37 2 L
N
J
214.7 292.37 216.4 292.79 218.14 292.58 3 L
N
[1.879 2.415] 1.879 I
218.14 292.58 220.54 292.3 2 L
N
J
220.54 292.3 222.27 292.1 224.01 291.87 3 L
N
[1.84 2.365] 1.84 I
224.01 291.87 226.35 291.57 2 L
N
J
226.35 291.57 228.09 291.35 229.83 291.13 3 L
N
[1.884 2.422] 1.884 I
229.83 291.13 232.23 290.82 2 L
N
J
232.23 290.82 233.96 290.6 235.65 290.14 3 L
N
[2.016 2.592] 2.016 I
235.65 290.14 238.15 289.45 2 L
N
J
238.15 289.45 239.84 288.99 241.57 288.73 3 L
N
[1.896 2.438] 1.896 I
241.57 288.73 243.98 288.38 2 L
N
J
243.98 288.38 245.71 288.12 247.41 288.54 3 L
N
[1.939 2.493] 1.939 I
247.41 288.54 249.83 289.14 2 L
N
J
249.83 289.14 251.53 289.56 253.19 289 3 L
N
[2.109 2.711] 2.109 I
253.19 289 255.75 288.12 2 L
N
J
255.75 288.12 257.41 287.55 259.01 288.24 3 L
N
[2.254 2.898] 2.254 I
259.01 288.24 261.68 289.39 2 L
N
J
261.68 289.39 263.28 290.08 264.92 289.45 3 L
N
[2.128 2.736] 2.128 I
264.92 289.45 267.47 288.47 2 L
N
J
267.47 288.47 269.1 287.84 270.81 287.48 3 L
N
[1.943 2.498] 1.943 I
270.81 287.48 273.26 286.98 2 L
N
J
273.26 286.98 274.98 286.63 2 L
N
J
116.75 417.78 122.63 417.78 128.5 417.83 134.38 417.6 140.2 417.72 146.07 417.49 151.95 417.55
 157.82 417.2 163.64 416.97 169.51 417.26 175.39 417.2 181.26 417.2 187.08 416.91 192.96 417.32 198.83 417.32
 204.65 417.09 210.52 417.14 216.4 417.14 222.27 417.09 228.09 417.03 233.96 417.03 239.84 416.97 245.71 370.55
 251.53 340.6 257.41 331.84 263.28 327.46 269.1 323.83 274.98 320.95 28 L
1 H
N
(Vista) 120.77 406.61 T
(RVM-Rio) 121.54 348.15 T
(RVM) 120 298.15 T
1 F
(\050b\051 debit-cr) 169.27 199.69 T
(edit) 217.7 199.69 T
(\050c\051 order) 430.71 199.69 T
(-entry) 467.82 199.69 T
229.95 547.16 229.95 728.66 414.27 728.66 414.27 547.16 229.95 547.16 5 L
0.5 H
N
229.95 547.16 229.95 551.77 2 L
N
260.65 547.16 260.65 551.77 2 L
N
291.35 547.16 291.35 551.77 2 L
N
322.11 547.16 322.11 551.77 2 L
N
352.81 547.16 352.81 551.77 2 L
N
383.51 547.16 383.51 551.77 2 L
N
414.27 547.16 414.27 551.77 2 L
N
229.95 728.66 229.95 724.05 2 L
N
260.65 728.66 260.65 724.05 2 L
N
291.35 728.66 291.35 724.05 2 L
N
322.11 728.66 322.11 724.05 2 L
N
352.81 728.66 352.81 724.05 2 L
N
383.51 728.66 383.51 724.05 2 L
N
0 F
(10) 222.95 532.34 T
0 8 Q
(0) 232.95 536.34 T
0 10 Q
(10) 253.65 532.34 T
0 8 Q
(1) 263.65 536.34 T
0 10 Q
(10) 284.35 532.34 T
0 8 Q
(2) 294.35 536.34 T
0 10 Q
(10) 315.11 532.34 T
0 8 Q
(3) 325.11 536.34 T
0 10 Q
(10) 345.81 532.34 T
0 8 Q
(4) 355.81 536.34 T
0 10 Q
(10) 376.51 532.34 T
0 8 Q
(5) 386.51 536.34 T
0 10 Q
(10) 407.27 532.34 T
0 8 Q
(6) 417.27 536.34 T
0 10 Q
(Transaction Size \050bytes\051) 273.51 517.37 T
414.27 728.66 414.27 724.05 2 L
N
229.95 547.16 232.26 547.16 2 L
N
229.95 556.32 232.26 556.32 2 L
N
229.95 561.62 232.26 561.62 2 L
N
229.95 565.42 232.26 565.42 2 L
N
229.95 568.3 232.26 568.3 2 L
N
229.95 570.72 232.26 570.72 2 L
N
229.95 572.74 232.26 572.74 2 L
N
229.95 574.52 232.26 574.52 2 L
N
229.95 576.02 232.26 576.02 2 L
N
229.95 577.46 232.26 577.46 2 L
N
229.95 586.56 232.26 586.56 2 L
N
229.95 591.86 232.26 591.86 2 L
N
229.95 595.66 232.26 595.66 2 L
N
229.95 598.54 232.26 598.54 2 L
N
229.95 600.96 232.26 600.96 2 L
N
229.95 602.98 232.26 602.98 2 L
N
229.95 604.76 232.26 604.76 2 L
N
229.95 606.26 232.26 606.26 2 L
N
229.95 607.7 232.26 607.7 2 L
N
229.95 616.8 232.26 616.8 2 L
N
229.95 622.1 232.26 622.1 2 L
N
229.95 625.9 232.26 625.9 2 L
N
229.95 628.78 232.26 628.78 2 L
N
229.95 631.2 232.26 631.2 2 L
N
229.95 633.22 232.26 633.22 2 L
N
229.95 635 232.26 635 2 L
N
229.95 636.5 232.26 636.5 2 L
N
229.95 637.94 232.26 637.94 2 L
N
229.95 647.04 232.26 647.04 2 L
N
229.95 652.34 232.26 652.34 2 L
N
229.95 656.14 232.26 656.14 2 L
N
229.95 659.02 232.26 659.02 2 L
N
229.95 661.44 232.26 661.44 2 L
N
229.95 663.46 232.26 663.46 2 L
N
229.95 665.24 232.26 665.24 2 L
N
229.95 666.74 232.26 666.74 2 L
N
229.95 668.18 232.26 668.18 2 L
N
229.95 677.28 232.26 677.28 2 L
N
229.95 682.58 232.26 682.58 2 L
N
229.95 686.38 232.26 686.38 2 L
N
229.95 689.26 232.26 689.26 2 L
N
229.95 691.68 232.26 691.68 2 L
N
229.95 693.7 232.26 693.7 2 L
N
229.95 695.48 232.26 695.48 2 L
N
229.95 696.98 232.26 696.98 2 L
N
229.95 698.42 232.26 698.42 2 L
N
229.95 707.52 232.26 707.52 2 L
N
229.95 712.82 232.26 712.82 2 L
N
229.95 716.62 232.26 716.62 2 L
N
229.95 719.5 232.26 719.5 2 L
N
229.95 721.92 232.26 721.92 2 L
N
229.95 723.93 232.26 723.93 2 L
N
229.95 725.72 232.26 725.72 2 L
N
229.95 727.22 232.26 727.22 2 L
N
229.95 728.66 232.26 728.66 2 L
N
414.27 547.16 411.96 547.16 2 L
N
414.27 556.32 411.96 556.32 2 L
N
414.27 561.62 411.96 561.62 2 L
N
414.27 565.42 411.96 565.42 2 L
N
414.27 568.3 411.96 568.3 2 L
N
414.27 570.72 411.96 570.72 2 L
N
414.27 572.74 411.96 572.74 2 L
N
414.27 574.52 411.96 574.52 2 L
N
414.27 576.02 411.96 576.02 2 L
N
414.27 577.46 411.96 577.46 2 L
N
414.27 586.56 411.96 586.56 2 L
N
414.27 591.86 411.96 591.86 2 L
N
414.27 595.66 411.96 595.66 2 L
N
414.27 598.54 411.96 598.54 2 L
N
414.27 600.96 411.96 600.96 2 L
N
414.27 602.98 411.96 602.98 2 L
N
414.27 604.76 411.96 604.76 2 L
N
414.27 606.26 411.96 606.26 2 L
N
414.27 607.7 411.96 607.7 2 L
N
414.27 616.8 411.96 616.8 2 L
N
414.27 622.1 411.96 622.1 2 L
N
414.27 625.9 411.96 625.9 2 L
N
414.27 628.78 411.96 628.78 2 L
N
414.27 631.2 411.96 631.2 2 L
N
414.27 633.22 411.96 633.22 2 L
N
414.27 635 411.96 635 2 L
N
414.27 636.5 411.96 636.5 2 L
N
414.27 637.94 411.96 637.94 2 L
N
414.27 647.04 411.96 647.04 2 L
N
414.27 652.34 411.96 652.34 2 L
N
414.27 656.14 411.96 656.14 2 L
N
414.27 659.02 411.96 659.02 2 L
N
414.27 661.44 411.96 661.44 2 L
N
414.27 663.46 411.96 663.46 2 L
N
414.27 665.24 411.96 665.24 2 L
N
414.27 666.74 411.96 666.74 2 L
N
414.27 668.18 411.96 668.18 2 L
N
414.27 677.28 411.96 677.28 2 L
N
414.27 682.58 411.96 682.58 2 L
N
414.27 686.38 411.96 686.38 2 L
N
414.27 689.26 411.96 689.26 2 L
N
414.27 691.68 411.96 691.68 2 L
N
414.27 693.7 411.96 693.7 2 L
N
414.27 695.48 411.96 695.48 2 L
N
414.27 696.98 411.96 696.98 2 L
N
414.27 698.42 411.96 698.42 2 L
N
414.27 707.52 411.96 707.52 2 L
N
414.27 712.82 411.96 712.82 2 L
N
414.27 716.62 411.96 716.62 2 L
N
414.27 719.5 411.96 719.5 2 L
N
414.27 721.92 411.96 721.92 2 L
N
414.27 723.93 411.96 723.93 2 L
N
414.27 725.72 411.96 725.72 2 L
N
414.27 727.22 411.96 727.22 2 L
N
414.27 728.66 411.96 728.66 2 L
N
229.95 547.16 234.56 547.16 2 L
N
229.95 577.46 234.56 577.46 2 L
N
229.95 607.7 234.56 607.7 2 L
N
229.95 637.94 234.56 637.94 2 L
N
229.95 668.18 234.56 668.18 2 L
N
229.95 698.42 234.56 698.42 2 L
N
229.95 728.66 234.56 728.66 2 L
N
414.27 547.16 409.66 547.16 2 L
N
414.27 577.46 409.66 577.46 2 L
N
414.27 607.7 409.66 607.7 2 L
N
414.27 637.94 409.66 637.94 2 L
N
414.27 668.18 409.66 668.18 2 L
N
414.27 698.42 409.66 698.42 2 L
N
(10) 213.14 542.01 T
0 8 Q
(0) 223.14 546.01 T
0 10 Q
(10) 213.14 572.31 T
0 8 Q
(1) 223.14 576.31 T
0 10 Q
(10) 213.14 602.55 T
0 8 Q
(2) 223.14 606.55 T
0 10 Q
(10) 213.14 632.79 T
0 8 Q
(3) 223.14 636.79 T
0 10 Q
(10) 213.14 663.03 T
0 8 Q
(4) 223.14 667.03 T
0 10 Q
(10) 213.14 693.27 T
0 8 Q
(5) 223.14 697.27 T
0 10 Q
(10) 213.14 723.51 T
0 8 Q
(6) 223.14 727.51 T
0 10 Q
(Transaction Overhead \050) 0 -270 201.62 578.98 TF
2 F
(m) 0 -270 201.62 673.39 TF
0 F
(sec\051) 0 -270 201.62 679.15 TF
414.27 728.66 409.66 728.66 2 L
N
257.66 667.66 266.93 667.66 276.14 667.78 285.42 668.01 294.63 668.35 303.91 669.1 313.12 670.42
 322.4 672.73 331.67 676.01 340.89 680.1 350.16 686.84 359.37 689.89 368.65 693.12 377.86 698.19 387.14 707.4
 396.35 712.01 405.63 717.66 414.27 724.85 18 L
N
J
257.66 628.61 266.93 628.61 276.14 628.84 285.42 629.65 294.63 630.11 303.91 631.49 313.12 633.97
 322.4 638.63 331.67 643.47 340.89 648.48 350.16 653.78 359.37 658.04 368.65 662.53 377.86 668.47 387.14 678.37
 396.35 683.9 405.63 691.51 414.27 699.8 18 L
J
257.66 628.61 259.41 628.61 2 L
N
[4.49 5.773] 4.49 I
259.41 628.61 265.18 628.61 2 L
N
J
265.18 628.61 266.93 628.61 268.68 628.65 3 L
N
[4.448 5.719] 4.448 I
268.68 628.65 274.4 628.79 2 L
N
J
274.4 628.79 276.14 628.84 277.89 628.99 3 L
N
[4.518 5.808] 4.518 I
277.89 628.99 283.67 629.49 2 L
N
J
283.67 629.49 285.42 629.65 287.17 629.73 3 L
N
[4.454 5.727] 4.454 I
287.17 629.73 292.89 630.02 2 L
N
J
292.89 630.02 294.63 630.11 296.36 630.36 3 L
N
[4.57 5.876] 4.57 I
296.36 630.36 302.18 631.23 2 L
N
J
302.18 631.23 303.91 631.49 305.6 631.94 3 L
N
[4.7 6.043] 4.7 I
305.6 631.94 311.43 633.51 2 L
N
J
311.43 633.51 313.12 633.97 314.69 634.75 3 L
N
[5.352 6.881] 5.352 I
314.69 634.75 320.83 637.84 2 L
N
J
320.83 637.84 322.4 638.63 323.95 639.44 3 L
N
[5.413 6.96] 5.413 I
323.95 639.44 330.12 642.66 2 L
N
J
330.12 642.66 331.67 643.47 333.21 644.3 3 L
N
[5.437 6.99] 5.437 I
333.21 644.3 339.35 647.64 2 L
N
J
339.35 647.64 340.89 648.48 342.4 649.35 3 L
N
[5.585 7.181] 5.585 I
342.4 649.35 348.64 652.91 2 L
N
J
348.64 652.91 350.16 653.78 351.75 654.51 3 L
N
[5.175 6.654] 5.175 I
351.75 654.51 357.79 657.31 2 L
N
J
357.79 657.31 359.37 658.04 360.95 658.8 3 L
N
[5.292 6.804] 5.292 I
360.95 658.8 367.07 661.77 2 L
N
J
367.07 661.77 368.65 662.53 370.12 663.48 3 L
N
[5.802 7.46] 5.802 I
370.12 663.48 376.39 667.52 2 L
N
J
376.39 667.52 377.86 668.47 379.06 669.74 3 L
N
[2.82 3.625] 2.82 I
379.06 669.74 385.94 677.1 2 L
N
J
385.94 677.1 387.14 678.37 388.64 679.27 3 L
N
[5.637 7.247] 5.637 I
388.64 679.27 394.85 683 2 L
N
J
394.85 683 396.35 683.9 397.71 685.01 3 L
N
[2.378 3.057] 2.378 I
397.71 685.01 404.27 690.4 2 L
N
J
404.27 690.4 405.63 691.51 406.89 692.72 3 L
N
[2.373 3.052] 2.373 I
406.89 692.72 413 698.59 2 L
N
J
413 698.59 414.27 699.8 2 L
N
J
257.66 569.22 266.93 568.42 276.14 568.42 285.42 570.03 294.63 571.07 303.91 572.85 313.12 576.14
 322.4 580.74 331.67 587.08 340.89 594.28 350.16 602.23 359.37 610.7 368.65 619.62 377.86 629.01 387.14 638.8
 396.35 649.34 405.63 660.81 414.27 672.5 18 L
1 H
N
(Vista) 260 573.54 T
(RVM) 260 672 T
358.87 250.55 358.87 432.04 543.18 432.04 543.18 250.55 358.87 250.55 5 L
0.5 H
N
358.87 250.55 358.87 252.85 2 L
N
389.57 250.55 389.57 252.85 2 L
N
420.27 250.55 420.27 252.85 2 L
N
451.02 250.55 451.02 252.85 2 L
N
481.72 250.55 481.72 252.85 2 L
N
512.42 250.55 512.42 252.85 2 L
N
543.18 250.55 543.18 252.85 2 L
N
358.87 432.04 358.87 429.74 2 L
N
389.57 432.04 389.57 429.74 2 L
N
420.27 432.04 420.27 429.74 2 L
N
451.02 432.04 451.02 429.74 2 L
N
481.72 432.04 481.72 429.74 2 L
N
512.42 432.04 512.42 429.74 2 L
N
543.18 432.04 543.18 429.74 2 L
N
358.87 250.55 358.87 255.16 2 L
N
420.27 250.55 420.27 255.16 2 L
N
481.72 250.55 481.72 255.16 2 L
N
543.18 250.55 543.18 255.16 2 L
N
358.87 432.04 358.87 427.43 2 L
N
420.27 432.04 420.27 427.43 2 L
N
481.72 432.04 481.72 427.43 2 L
N
(0) 356.37 236.11 T
(100) 412.77 236.11 T
(200) 474.22 236.11 T
0 0 0 1 0 0 0 K
0 11 Q
(300) 534.93 236.11 T
0 0 0 1 0 0 0 K
0 10 Q
(Database Size \050MB\051) 410.48 225.37 T
543.18 432.04 543.18 427.43 2 L
N
358.87 250.55 361.17 250.55 2 L
N
358.87 264.26 361.17 264.26 2 L
N
358.87 272.21 361.17 272.21 2 L
N
358.87 277.91 361.17 277.91 2 L
N
358.87 282.29 361.17 282.29 2 L
N
358.87 285.86 361.17 285.86 2 L
N
358.87 288.91 361.17 288.91 2 L
N
358.87 291.56 361.17 291.56 2 L
N
358.87 293.86 361.17 293.86 2 L
N
358.87 295.94 361.17 295.94 2 L
N
358.87 309.59 361.17 309.59 2 L
N
358.87 317.6 361.17 317.6 2 L
N
358.87 323.24 361.17 323.24 2 L
N
358.87 327.62 361.17 327.62 2 L
N
358.87 331.25 361.17 331.25 2 L
N
358.87 334.3 361.17 334.3 2 L
N
358.87 336.89 361.17 336.89 2 L
N
358.87 339.19 361.17 339.19 2 L
N
358.87 341.33 361.17 341.33 2 L
N
358.87 354.98 361.17 354.98 2 L
N
358.87 362.92 361.17 362.92 2 L
N
358.87 368.63 361.17 368.63 2 L
N
358.87 373 361.17 373 2 L
N
358.87 376.58 361.17 376.58 2 L
N
358.87 379.63 361.17 379.63 2 L
N
358.87 382.28 361.17 382.28 2 L
N
358.87 384.58 361.17 384.58 2 L
N
358.87 386.65 361.17 386.65 2 L
N
358.87 400.31 361.17 400.31 2 L
N
358.87 408.31 361.17 408.31 2 L
N
358.87 413.96 361.17 413.96 2 L
N
358.87 418.33 361.17 418.33 2 L
N
358.87 421.96 361.17 421.96 2 L
N
358.87 425.02 361.17 425.02 2 L
N
358.87 427.61 361.17 427.61 2 L
N
358.87 429.91 361.17 429.91 2 L
N
358.87 432.04 361.17 432.04 2 L
N
543.18 250.55 540.88 250.55 2 L
N
543.18 264.26 540.88 264.26 2 L
N
543.18 272.21 540.88 272.21 2 L
N
543.18 277.91 540.88 277.91 2 L
N
543.18 282.29 540.88 282.29 2 L
N
543.18 285.86 540.88 285.86 2 L
N
543.18 288.91 540.88 288.91 2 L
N
543.18 291.56 540.88 291.56 2 L
N
543.18 293.86 540.88 293.86 2 L
N
543.18 295.94 540.88 295.94 2 L
N
543.18 309.59 540.88 309.59 2 L
N
543.18 317.6 540.88 317.6 2 L
N
543.18 323.24 540.88 323.24 2 L
N
543.18 327.62 540.88 327.62 2 L
N
543.18 331.25 540.88 331.25 2 L
N
543.18 334.3 540.88 334.3 2 L
N
543.18 336.89 540.88 336.89 2 L
N
543.18 339.19 540.88 339.19 2 L
N
543.18 341.33 540.88 341.33 2 L
N
543.18 354.98 540.88 354.98 2 L
N
543.18 362.92 540.88 362.92 2 L
N
543.18 368.63 540.88 368.63 2 L
N
543.18 373 540.88 373 2 L
N
543.18 376.58 540.88 376.58 2 L
N
543.18 379.63 540.88 379.63 2 L
N
543.18 382.28 540.88 382.28 2 L
N
543.18 384.58 540.88 384.58 2 L
N
543.18 386.65 540.88 386.65 2 L
N
543.18 400.31 540.88 400.31 2 L
N
543.18 408.31 540.88 408.31 2 L
N
543.18 413.96 540.88 413.96 2 L
N
543.18 418.33 540.88 418.33 2 L
N
543.18 421.96 540.88 421.96 2 L
N
543.18 425.02 540.88 425.02 2 L
N
543.18 427.61 540.88 427.61 2 L
N
543.18 429.91 540.88 429.91 2 L
N
543.18 432.04 540.88 432.04 2 L
N
358.87 250.55 363.48 250.55 2 L
N
358.87 295.94 363.48 295.94 2 L
N
358.87 341.33 363.48 341.33 2 L
N
358.87 386.65 363.48 386.65 2 L
N
358.87 432.04 363.48 432.04 2 L
N
543.18 250.55 538.57 250.55 2 L
N
543.18 295.94 538.57 295.94 2 L
N
543.18 341.33 538.57 341.33 2 L
N
543.18 386.65 538.57 386.65 2 L
N
(10) 346.05 245.78 T
(100) 341.05 291.17 T
(1,000) 333.55 336.56 T
(10,000) 328.55 381.89 T
(100,000) 323.55 427.28 T
(Transactions/Second) 0 -270 323.95 298.84 TF
543.18 432.04 538.57 432.04 2 L
N
379.26 291.79 399.7 291.04 420.15 291.27 440.6 291.27 461.05 291.04 481.44 291.04 501.88 288.05
 522.33 283.04 8 L
N
J
379.26 339.08 399.7 337.29 420.15 323.01 440.6 298.7 461.05 290.01 481.44 286.84 501.88 285.86
 522.33 282.69 8 L
J
379.26 339.08 381 338.93 2 L
N
[2.907 3.737] 2.907 I
381 338.93 397.96 337.45 2 L
N
J
397.96 337.45 399.7 337.29 401.14 336.29 3 L
N
[3.661 4.707] 3.661 I
401.14 336.29 418.72 324.01 2 L
N
J
418.72 324.01 420.15 323.01 421.28 321.67 3 L
N
[3.471 4.463] 3.471 I
421.28 321.67 439.47 300.04 2 L
N
J
439.47 300.04 440.6 298.7 442.21 298.02 3 L
N
[3.196 4.109] 3.196 I
442.21 298.02 459.44 290.69 2 L
N
J
459.44 290.69 461.05 290.01 462.78 289.74 3 L
N
[2.925 3.761] 2.925 I
462.78 289.74 479.71 287.11 2 L
N
J
479.71 287.11 481.44 286.84 483.18 286.75 3 L
N
[2.897 3.725] 2.897 I
483.18 286.75 500.14 285.94 2 L
N
J
500.14 285.94 501.88 285.86 503.61 285.59 3 L
N
[2.935 3.774] 2.935 I
503.61 285.59 520.6 282.96 2 L
N
J
520.6 282.96 522.33 282.69 2 L
N
J
379.26 390.46 399.7 390.23 420.15 389.82 440.6 389.77 461.05 389.82 481.44 389.65 501.88 330.32
 522.33 326.41 8 L
1 H
N
(Vista) 379.23 395.07 T
(RVM-Rio) 377.69 342.77 T
(RVM) 380 295.84 T
(RVM-Rio) 256.16 635.08 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
( 8) 302.65 42.62 T
0 0 0 1 0 0 0 K
54 88.61 558 738 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
-0.11 (Figur) 57.15 177.41 P
-0.11 (e 6: R) 80.86 177.41 P
-0.11 (VM Gr) 105.08 177.41 P
-0.11 (oup Commit P) 136.16 177.41 P
-0.11 (erf) 197.96 177.41 P
-0.11 (ormance.) 209.92 177.41 P
0 F
-0.11 ( Group commit impro) 249.63 177.41 P
-0.11 (v) 336.64 177.41 P
-0.11 (es throughput by amortizing the synchronous write to) 341.49 177.41 P
-0.18 (the redo log o) 57.15 166.41 P
-0.18 (v) 111.74 166.41 P
-0.18 (er multiple transactions \050the group commit size\051. Ho) 116.59 166.41 P
-0.18 (we) 324.53 166.41 P
-0.18 (v) 335.94 166.41 P
-0.18 (er) 340.79 166.41 P
-0.18 (, group commit only impro) 348.16 166.41 P
-0.18 (v) 455.36 166.41 P
-0.18 (es throughput; response) 460.21 166.41 P
0.77 (time for indi) 57.15 155.41 P
0.77 (vidual transactions actually gets slightly w) 108.44 155.41 P
0.77 (orse. Also, group commit w) 282.46 155.41 P
0.77 (orks only if there are man) 397.09 155.41 P
0.77 (y concurrent) 503.82 155.41 P
0.02 (transactions. Single-threaded applications with dependent transactions cannot use group commit because earlier transactions) 57.15 144.41 P
57.15 123.08 554.85 130.08 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
57.46 126.23 559 126.23 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
54 88.61 558 738 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(are delayed; these applications require f) 57.15 133.41 T
(ast response times. V) 216.17 133.41 T
(ista\325) 300.56 133.41 T
(s performance is sho) 317.23 133.41 T
(wn for reference.) 399.46 133.41 T
1 F
(\050b\051 debit-cr) 158.51 206.61 T
(edit) 206.93 206.61 T
(\050c\051 order) 420.71 206.61 T
(-entry) 457.82 206.61 T
(\050a\051 synthetic \050o) 255.55 499.97 T
(v) 318.77 499.97 T
(erhead\051) 323.67 499.97 T
0 F
(R) 260 624.31 T
(VM-group size 64) 265.87 624.31 T
(R) 232.31 655.08 T
(VM-group size 8) 238.18 655.08 T
(R) 260 673.54 T
(VM) 265.87 673.54 T
(R) 388.47 325.07 T
(VM-group size 64) 394.34 325.07 T
(R) 386.16 305.07 T
(VM-group size 8) 392.03 305.07 T
(R) 388.47 284.3 T
(VM) 394.34 284.3 T
228.01 546.51 228.01 728 412.32 728 412.32 546.51 228.01 546.51 5 L
0.5 H
1 Z
N
228.01 546.51 228.01 551.11 2 L
N
258.71 546.51 258.71 551.11 2 L
N
289.41 546.51 289.41 551.11 2 L
N
320.17 546.51 320.17 551.11 2 L
N
350.86 546.51 350.86 551.11 2 L
N
381.57 546.51 381.57 551.11 2 L
N
412.32 546.51 412.32 551.11 2 L
N
228.01 728 228.01 723.39 2 L
N
258.71 728 258.71 723.39 2 L
N
289.41 728 289.41 723.39 2 L
N
320.17 728 320.17 723.39 2 L
N
350.86 728 350.86 723.39 2 L
N
381.57 728 381.57 723.39 2 L
N
(10) 221.01 531.68 T
0 8 Q
(0) 231.01 535.68 T
0 10 Q
(10) 251.71 531.68 T
0 8 Q
(1) 261.71 535.68 T
0 10 Q
(10) 282.41 531.68 T
0 8 Q
(2) 292.41 535.68 T
0 10 Q
(10) 313.17 531.68 T
0 8 Q
(3) 323.17 535.68 T
0 10 Q
(10) 343.86 531.68 T
0 8 Q
(4) 353.86 535.68 T
0 10 Q
(10) 374.57 531.68 T
0 8 Q
(5) 384.57 535.68 T
0 10 Q
(10) 405.32 531.68 T
0 8 Q
(6) 415.32 535.68 T
0 10 Q
(Transaction Size \050bytes\051) 271.57 516.71 T
412.32 728 412.32 723.39 2 L
N
228.01 546.51 230.31 546.51 2 L
N
228.01 555.66 230.31 555.66 2 L
N
228.01 560.96 230.31 560.96 2 L
N
228.01 564.76 230.31 564.76 2 L
N
228.01 567.64 230.31 567.64 2 L
N
228.01 570.06 230.31 570.06 2 L
N
228.01 572.08 230.31 572.08 2 L
N
228.01 573.86 230.31 573.86 2 L
N
228.01 575.36 230.31 575.36 2 L
N
228.01 576.8 230.31 576.8 2 L
N
228.01 585.9 230.31 585.9 2 L
N
228.01 591.2 230.31 591.2 2 L
N
228.01 595 230.31 595 2 L
N
228.01 597.88 230.31 597.88 2 L
N
228.01 600.3 230.31 600.3 2 L
N
228.01 602.32 230.31 602.32 2 L
N
228.01 604.1 230.31 604.1 2 L
N
228.01 605.6 230.31 605.6 2 L
N
228.01 607.04 230.31 607.04 2 L
N
228.01 616.14 230.31 616.14 2 L
N
228.01 621.44 230.31 621.44 2 L
N
228.01 625.24 230.31 625.24 2 L
N
228.01 628.12 230.31 628.12 2 L
N
228.01 630.54 230.31 630.54 2 L
N
228.01 632.56 230.31 632.56 2 L
N
228.01 634.34 230.31 634.34 2 L
N
228.01 635.84 230.31 635.84 2 L
N
228.01 637.28 230.31 637.28 2 L
N
228.01 646.38 230.31 646.38 2 L
N
228.01 651.68 230.31 651.68 2 L
N
228.01 655.48 230.31 655.48 2 L
N
228.01 658.36 230.31 658.36 2 L
N
228.01 660.78 230.31 660.78 2 L
N
228.01 662.79 230.31 662.79 2 L
N
228.01 664.58 230.31 664.58 2 L
N
228.01 666.08 230.31 666.08 2 L
N
228.01 667.52 230.31 667.52 2 L
N
228.01 676.62 230.31 676.62 2 L
N
228.01 681.92 230.31 681.92 2 L
N
228.01 685.72 230.31 685.72 2 L
N
228.01 688.6 230.31 688.6 2 L
N
228.01 691.02 230.31 691.02 2 L
N
228.01 693.03 230.31 693.03 2 L
N
228.01 694.82 230.31 694.82 2 L
N
228.01 696.32 230.31 696.32 2 L
N
228.01 697.76 230.31 697.76 2 L
N
228.01 706.86 230.31 706.86 2 L
N
228.01 712.16 230.31 712.16 2 L
N
228.01 715.96 230.31 715.96 2 L
N
228.01 718.84 230.31 718.84 2 L
N
228.01 721.26 230.31 721.26 2 L
N
228.01 723.27 230.31 723.27 2 L
N
228.01 725.06 230.31 725.06 2 L
N
228.01 726.56 230.31 726.56 2 L
N
228.01 728 230.31 728 2 L
N
412.32 546.51 410.02 546.51 2 L
N
412.32 555.66 410.02 555.66 2 L
N
412.32 560.96 410.02 560.96 2 L
N
412.32 564.76 410.02 564.76 2 L
N
412.32 567.64 410.02 567.64 2 L
N
412.32 570.06 410.02 570.06 2 L
N
412.32 572.08 410.02 572.08 2 L
N
412.32 573.86 410.02 573.86 2 L
N
412.32 575.36 410.02 575.36 2 L
N
412.32 576.8 410.02 576.8 2 L
N
412.32 585.9 410.02 585.9 2 L
N
412.32 591.2 410.02 591.2 2 L
N
412.32 595 410.02 595 2 L
N
412.32 597.88 410.02 597.88 2 L
N
412.32 600.3 410.02 600.3 2 L
N
412.32 602.32 410.02 602.32 2 L
N
412.32 604.1 410.02 604.1 2 L
N
412.32 605.6 410.02 605.6 2 L
N
412.32 607.04 410.02 607.04 2 L
N
412.32 616.14 410.02 616.14 2 L
N
412.32 621.44 410.02 621.44 2 L
N
412.32 625.24 410.02 625.24 2 L
N
412.32 628.12 410.02 628.12 2 L
N
412.32 630.54 410.02 630.54 2 L
N
412.32 632.56 410.02 632.56 2 L
N
412.32 634.34 410.02 634.34 2 L
N
412.32 635.84 410.02 635.84 2 L
N
412.32 637.28 410.02 637.28 2 L
N
412.32 646.38 410.02 646.38 2 L
N
412.32 651.68 410.02 651.68 2 L
N
412.32 655.48 410.02 655.48 2 L
N
412.32 658.36 410.02 658.36 2 L
N
412.32 660.78 410.02 660.78 2 L
N
412.32 662.79 410.02 662.79 2 L
N
412.32 664.58 410.02 664.58 2 L
N
412.32 666.08 410.02 666.08 2 L
N
412.32 667.52 410.02 667.52 2 L
N
412.32 676.62 410.02 676.62 2 L
N
412.32 681.92 410.02 681.92 2 L
N
412.32 685.72 410.02 685.72 2 L
N
412.32 688.6 410.02 688.6 2 L
N
412.32 691.02 410.02 691.02 2 L
N
412.32 693.03 410.02 693.03 2 L
N
412.32 694.82 410.02 694.82 2 L
N
412.32 696.32 410.02 696.32 2 L
N
412.32 697.76 410.02 697.76 2 L
N
412.32 706.86 410.02 706.86 2 L
N
412.32 712.16 410.02 712.16 2 L
N
412.32 715.96 410.02 715.96 2 L
N
412.32 718.84 410.02 718.84 2 L
N
412.32 721.26 410.02 721.26 2 L
N
412.32 723.27 410.02 723.27 2 L
N
412.32 725.06 410.02 725.06 2 L
N
412.32 726.56 410.02 726.56 2 L
N
412.32 728 410.02 728 2 L
N
228.01 546.51 232.62 546.51 2 L
N
228.01 576.8 232.62 576.8 2 L
N
228.01 607.04 232.62 607.04 2 L
N
228.01 637.28 232.62 637.28 2 L
N
228.01 667.52 232.62 667.52 2 L
N
228.01 697.76 232.62 697.76 2 L
N
228.01 728 232.62 728 2 L
N
412.32 546.51 407.71 546.51 2 L
N
412.32 576.8 407.71 576.8 2 L
N
412.32 607.04 407.71 607.04 2 L
N
412.32 637.28 407.71 637.28 2 L
N
412.32 667.52 407.71 667.52 2 L
N
412.32 697.76 407.71 697.76 2 L
N
(10) 206.58 541.35 T
0 8 Q
(0) 216.58 545.35 T
0 10 Q
(10) 206.58 571.65 T
0 8 Q
(1) 216.58 575.65 T
0 10 Q
(10) 206.58 601.89 T
0 8 Q
(2) 216.58 605.89 T
0 10 Q
(10) 206.58 632.13 T
0 8 Q
(3) 216.58 636.13 T
0 10 Q
(10) 206.58 662.37 T
0 8 Q
(4) 216.58 666.37 T
0 10 Q
(10) 206.58 692.61 T
0 8 Q
(5) 216.58 696.61 T
0 10 Q
(10) 206.58 722.84 T
0 8 Q
(6) 216.58 726.84 T
0 10 Q
(Transaction Overhead \050) 0 -270 195.06 578.32 TF
2 F
(m) 0 -270 195.06 672.73 TF
0 F
(sec\051) 0 -270 195.06 678.49 TF
412.32 728 407.71 728 2 L
N
255.71 667 264.99 667 274.2 667.11 283.48 667.34 292.69 667.69 301.96 668.44 311.18 669.76
 320.45 672.07 329.73 675.35 338.94 679.44 348.21 686.18 357.43 689.23 366.7 692.46 375.92 697.53 385.19 706.74
 394.41 711.35 403.68 716.99 412.32 724.19 18 L
N
J
255.71 644.65 264.99 644.94 274.2 645.46 283.48 646.49 292.69 648.34 301.96 651.33 311.18 655.71
 320.45 661.53 329.73 668.09 338.94 674.6 348.21 683.82 357.43 688.48 366.7 691.13 375.92 696.2 385.19 704.5
 394.41 710.89 403.68 716.36 412.32 725.12 18 L
J
255.71 644.65 257.46 644.71 2 L
N
[4.494 5.778] 4.494 I
257.46 644.71 263.24 644.89 2 L
N
J
263.24 644.89 264.99 644.94 266.73 645.04 3 L
N
[4.457 5.73] 4.457 I
266.73 645.04 272.45 645.36 2 L
N
J
272.45 645.36 274.2 645.46 275.94 645.65 3 L
N
[4.535 5.831] 4.535 I
275.94 645.65 281.74 646.3 2 L
N
J
281.74 646.3 283.48 646.49 285.19 646.84 3 L
N
[4.587 5.898] 4.587 I
285.19 646.84 290.98 647.99 2 L
N
J
290.98 647.99 292.69 648.34 294.36 648.88 3 L
N
[4.857 6.245] 4.857 I
294.36 648.88 300.3 650.79 2 L
N
J
300.3 650.79 301.96 651.33 303.55 652.08 3 L
N
[5.213 6.702] 5.213 I
303.55 652.08 309.6 654.96 2 L
N
J
309.6 654.96 311.18 655.71 312.66 656.64 3 L
N
[5.792 7.447] 5.792 I
312.66 656.64 318.97 660.6 2 L
N
J
318.97 660.6 320.45 661.53 321.88 662.54 3 L
N
[6.115 7.863] 6.115 I
321.88 662.54 328.3 667.08 2 L
N
J
328.3 667.08 329.73 668.09 331.16 669.1 3 L
N
[6.053 7.782] 6.053 I
331.16 669.1 337.51 673.59 2 L
N
J
337.51 673.59 338.94 674.6 340.18 675.84 3 L
N
[2.681 3.447] 2.681 I
340.18 675.84 346.97 682.59 2 L
N
J
346.97 682.59 348.21 683.82 349.78 684.61 3 L
N
[5.312 6.829] 5.312 I
349.78 684.61 355.87 687.69 2 L
N
J
355.87 687.69 357.43 688.48 359.11 688.96 3 L
N
[4.779 6.144] 4.779 I
359.11 688.96 365.02 690.65 2 L
N
J
365.02 690.65 366.7 691.13 368.24 691.98 3 L
N
[5.458 7.018] 5.458 I
368.24 691.98 374.39 695.36 2 L
N
J
374.39 695.36 375.92 696.2 377.22 697.37 3 L
N
[2.504 3.219] 2.504 I
377.22 697.37 383.89 703.33 2 L
N
J
383.89 703.33 385.19 704.5 386.63 705.49 3 L
N
[6.002 7.716] 6.002 I
386.63 705.49 392.97 709.89 2 L
N
J
392.97 709.89 394.41 710.89 395.92 711.78 3 L
N
[5.652 7.267] 5.652 I
395.92 711.78 402.17 715.47 2 L
N
J
402.17 715.47 403.68 716.36 404.91 717.61 3 L
N
[2.464 3.168] 2.464 I
404.91 717.61 411.09 723.87 2 L
N
J
411.09 723.87 412.32 725.12 2 L
N
J
255.71 635.84 264.99 636.41 274.2 637.51 283.48 639.35 292.69 642.35 301.96 646.78 311.18 652.71
 320.45 659.74 329.73 667.52 338.94 674.26 348.21 683.41 357.43 687.22 366.7 689.41 375.92 695.63 385.19 703.23
 394.41 710.95 403.68 716.88 412.32 724.14 18 L
N
255.71 568.57 264.99 567.76 274.2 567.76 283.48 569.37 292.69 570.41 301.96 572.19 311.18 575.48
 320.45 580.08 329.73 586.42 338.94 593.62 348.21 601.57 357.43 610.04 366.7 618.96 375.92 628.35 385.19 638.14
 394.41 648.68 403.68 660.15 412.32 671.84 18 L
N
(V) 260.77 575.08 T
(ista) 267.39 575.08 T
106.35 253.66 106.35 435.16 290.67 435.16 290.67 253.66 106.35 253.66 5 L
N
106.35 253.66 106.35 255.97 2 L
N
137.05 253.66 137.05 255.97 2 L
N
167.75 253.66 167.75 255.97 2 L
N
198.51 253.66 198.51 255.97 2 L
N
229.21 253.66 229.21 255.97 2 L
N
259.91 253.66 259.91 255.97 2 L
N
290.67 253.66 290.67 255.97 2 L
N
106.35 435.16 106.35 432.85 2 L
N
137.05 435.16 137.05 432.85 2 L
N
167.75 435.16 167.75 432.85 2 L
N
198.51 435.16 198.51 432.85 2 L
N
229.21 435.16 229.21 432.85 2 L
N
259.91 435.16 259.91 432.85 2 L
N
290.67 435.16 290.67 432.85 2 L
N
106.35 253.66 106.35 258.27 2 L
N
167.75 253.66 167.75 258.27 2 L
N
229.21 253.66 229.21 258.27 2 L
N
290.67 253.66 290.67 258.27 2 L
N
106.35 435.16 106.35 430.55 2 L
N
167.75 435.16 167.75 430.55 2 L
N
229.21 435.16 229.21 430.55 2 L
N
(0) 103.85 239.22 T
(100) 160.25 239.22 T
(200) 221.71 239.22 T
(300) 283.17 239.22 T
(Database Size \050MB\051) 157.96 223.87 T
290.67 435.16 290.67 430.55 2 L
N
106.35 253.66 108.66 253.66 2 L
N
106.35 267.37 108.66 267.37 2 L
N
106.35 275.32 108.66 275.32 2 L
N
106.35 281.02 108.66 281.02 2 L
N
106.35 285.4 108.66 285.4 2 L
N
106.35 288.97 108.66 288.97 2 L
N
106.35 292.02 108.66 292.02 2 L
N
106.35 294.67 108.66 294.67 2 L
N
106.35 296.98 108.66 296.98 2 L
N
106.35 299.05 108.66 299.05 2 L
N
106.35 312.7 108.66 312.7 2 L
N
106.35 320.71 108.66 320.71 2 L
N
106.35 326.35 108.66 326.35 2 L
N
106.35 330.73 108.66 330.73 2 L
N
106.35 334.36 108.66 334.36 2 L
N
106.35 337.41 108.66 337.41 2 L
N
106.35 340.01 108.66 340.01 2 L
N
106.35 342.31 108.66 342.31 2 L
N
106.35 344.44 108.66 344.44 2 L
N
106.35 358.09 108.66 358.09 2 L
N
106.35 366.04 108.66 366.04 2 L
N
106.35 371.74 108.66 371.74 2 L
N
106.35 376.12 108.66 376.12 2 L
N
106.35 379.69 108.66 379.69 2 L
N
106.35 382.74 108.66 382.74 2 L
N
106.35 385.39 108.66 385.39 2 L
N
106.35 387.7 108.66 387.7 2 L
N
106.35 389.77 108.66 389.77 2 L
N
106.35 403.42 108.66 403.42 2 L
N
106.35 411.43 108.66 411.43 2 L
N
106.35 417.07 108.66 417.07 2 L
N
106.35 421.45 108.66 421.45 2 L
N
106.35 425.08 108.66 425.08 2 L
N
106.35 428.13 108.66 428.13 2 L
N
106.35 430.72 108.66 430.72 2 L
N
106.35 433.02 108.66 433.02 2 L
N
106.35 435.16 108.66 435.16 2 L
N
290.67 253.66 288.36 253.66 2 L
N
290.67 267.37 288.36 267.37 2 L
N
290.67 275.32 288.36 275.32 2 L
N
290.67 281.02 288.36 281.02 2 L
N
290.67 285.4 288.36 285.4 2 L
N
290.67 288.97 288.36 288.97 2 L
N
290.67 292.02 288.36 292.02 2 L
N
290.67 294.67 288.36 294.67 2 L
N
290.67 296.98 288.36 296.98 2 L
N
290.67 299.05 288.36 299.05 2 L
N
290.67 312.7 288.36 312.7 2 L
N
290.67 320.71 288.36 320.71 2 L
N
290.67 326.35 288.36 326.35 2 L
N
290.67 330.73 288.36 330.73 2 L
N
290.67 334.36 288.36 334.36 2 L
N
290.67 337.41 288.36 337.41 2 L
N
290.67 340.01 288.36 340.01 2 L
N
290.67 342.31 288.36 342.31 2 L
N
290.67 344.44 288.36 344.44 2 L
N
290.67 358.09 288.36 358.09 2 L
N
290.67 366.04 288.36 366.04 2 L
N
290.67 371.74 288.36 371.74 2 L
N
290.67 376.12 288.36 376.12 2 L
N
290.67 379.69 288.36 379.69 2 L
N
290.67 382.74 288.36 382.74 2 L
N
290.67 385.39 288.36 385.39 2 L
N
290.67 387.7 288.36 387.7 2 L
N
290.67 389.77 288.36 389.77 2 L
N
290.67 403.42 288.36 403.42 2 L
N
290.67 411.43 288.36 411.43 2 L
N
290.67 417.07 288.36 417.07 2 L
N
290.67 421.45 288.36 421.45 2 L
N
290.67 425.08 288.36 425.08 2 L
N
290.67 428.13 288.36 428.13 2 L
N
290.67 430.72 288.36 430.72 2 L
N
290.67 433.02 288.36 433.02 2 L
N
290.67 435.16 288.36 435.16 2 L
N
106.35 253.66 110.96 253.66 2 L
N
106.35 299.05 110.96 299.05 2 L
N
106.35 344.44 110.96 344.44 2 L
N
106.35 389.77 110.96 389.77 2 L
N
106.35 435.16 110.96 435.16 2 L
N
290.67 253.66 286.06 253.66 2 L
N
290.67 299.05 286.06 299.05 2 L
N
290.67 344.44 286.06 344.44 2 L
N
290.67 389.77 286.06 389.77 2 L
N
(10) 93.54 248.9 T
(100) 88.54 294.29 T
(1,000) 81.04 339.67 T
(10,000) 76.04 385 T
(100,000) 71.04 430.39 T
(Transactions/Second) 0 -270 71.43 301.96 TF
290.67 435.16 286.06 435.16 2 L
N
113.38 296.29 119.25 296.29 125.13 296.29 131 296.29 136.82 296.29 142.7 296.29 148.57 296.29
 154.45 296.29 160.26 296.29 166.14 296.29 172.01 296.29 177.89 296.29 183.71 296.29 189.58 296.29 195.46 296.29
 201.27 296.29 207.15 296.29 213.02 296.29 218.9 296.29 224.72 296.06 230.59 295.14 236.47 294.16 242.34 293.41
 248.16 292.6 254.03 291.74 259.91 289.32 265.73 288.68 271.6 285 28 L
N
J
113.38 326.58 119.25 325.95 125.13 325.83 131 325.66 136.82 325.61 142.7 325.49 148.57 325.49
 154.45 325.43 160.26 325.49 166.14 325.38 172.01 325.38 177.89 325.38 183.71 325.38 189.58 325.38 195.46 325.38
 201.27 325.38 207.15 325.38 213.02 325.38 218.9 325.38 224.72 324.63 230.59 320.02 236.47 307.58 242.34 305.27
 248.16 303.43 254.03 303.89 259.91 303.77 265.73 303.6 271.6 299.05 28 L
J
113.38 326.58 115.12 326.4 2 L
N
[1.874 2.409] 1.874 I
115.12 326.4 117.51 326.14 2 L
N
J
117.51 326.14 119.25 325.95 121 325.92 3 L
N
[1.848 2.376] 1.848 I
121 325.92 123.38 325.87 2 L
N
J
123.38 325.87 125.13 325.83 126.88 325.78 3 L
N
[1.849 2.378] 1.849 I
126.88 325.78 129.26 325.71 2 L
N
J
129.26 325.71 131 325.66 132.75 325.64 3 L
N
[1.803 2.318] 1.803 I
132.75 325.64 135.07 325.62 2 L
N
J
135.07 325.62 136.82 325.61 138.57 325.57 3 L
N
[1.848 2.376] 1.848 I
138.57 325.57 140.95 325.52 2 L
N
J
140.95 325.52 142.7 325.49 144.45 325.49 3 L
N
[1.847 2.375] 1.847 I
144.45 325.49 146.82 325.49 2 L
N
J
146.82 325.49 148.57 325.49 150.32 325.47 3 L
N
[1.847 2.375] 1.847 I
150.32 325.47 152.7 325.45 2 L
N
J
152.7 325.45 154.45 325.43 156.2 325.45 3 L
N
[1.803 2.318] 1.803 I
156.2 325.45 158.51 325.47 2 L
N
J
158.51 325.47 160.26 325.49 162.01 325.46 3 L
N
[1.848 2.376] 1.848 I
162.01 325.46 164.39 325.41 2 L
N
J
164.39 325.41 166.14 325.38 167.89 325.38 3 L
N
[1.847 2.375] 1.847 I
167.89 325.38 170.26 325.38 2 L
N
J
170.26 325.38 172.01 325.38 173.76 325.38 3 L
N
[1.847 2.375] 1.847 I
173.76 325.38 176.14 325.38 2 L
N
J
176.14 325.38 177.89 325.38 179.64 325.38 3 L
N
[1.802 2.317] 1.802 I
179.64 325.38 181.96 325.38 2 L
N
J
181.96 325.38 183.71 325.38 185.46 325.38 3 L
N
[1.847 2.375] 1.847 I
185.46 325.38 187.83 325.38 2 L
N
J
187.83 325.38 189.58 325.38 191.33 325.38 3 L
N
[1.847 2.375] 1.847 I
191.33 325.38 193.71 325.38 2 L
N
J
193.71 325.38 195.46 325.38 197.21 325.38 3 L
N
[1.802 2.317] 1.802 I
197.21 325.38 199.52 325.38 2 L
N
J
199.52 325.38 201.27 325.38 203.02 325.38 3 L
N
[1.847 2.375] 1.847 I
203.02 325.38 205.4 325.38 2 L
N
J
205.4 325.38 207.15 325.38 208.9 325.38 3 L
N
[1.847 2.375] 1.847 I
208.9 325.38 211.27 325.38 2 L
N
J
211.27 325.38 213.02 325.38 214.77 325.38 3 L
N
[1.847 2.375] 1.847 I
214.77 325.38 217.15 325.38 2 L
N
J
217.15 325.38 218.9 325.38 220.63 325.15 3 L
N
[1.84 2.365] 1.84 I
220.63 325.15 222.98 324.85 2 L
N
J
222.98 324.85 224.72 324.63 226.09 323.55 3 L
N
[3.085 3.966] 3.085 I
226.09 323.55 229.21 321.1 2 L
N
J
229.21 321.1 230.59 320.02 231.34 318.44 3 L
N
[2.872 3.693] 2.872 I
231.34 318.44 235.72 309.16 2 L
N
J
235.72 309.16 236.47 307.58 238.1 306.94 3 L
N
[2.186 2.811] 2.186 I
238.1 306.94 240.71 305.91 2 L
N
J
240.71 305.91 242.34 305.27 244.01 304.74 3 L
N
[2.024 2.602] 2.024 I
244.01 304.74 246.49 303.96 2 L
N
J
246.49 303.96 248.16 303.43 249.9 303.57 3 L
N
[1.861 2.393] 1.861 I
249.9 303.57 252.29 303.75 2 L
N
J
252.29 303.75 254.03 303.89 255.78 303.86 3 L
N
[1.848 2.376] 1.848 I
255.78 303.86 258.16 303.81 2 L
N
J
258.16 303.81 259.91 303.77 261.66 303.72 3 L
N
[1.804 2.32] 1.804 I
261.66 303.72 263.98 303.65 2 L
N
J
263.98 303.65 265.73 303.6 267.11 302.53 3 L
N
[3.057 3.931] 3.057 I
267.11 302.53 270.22 300.12 2 L
N
J
270.22 300.12 271.6 299.05 2 L
N
J
113.38 338.51 119.25 337.41 125.13 336.49 131 335.86 136.82 335.4 142.7 334.99 148.57 334.76
 154.45 334.42 160.26 334.3 166.14 334.13 172.01 333.96 177.89 333.84 183.71 333.73 189.58 333.5 195.46 333.5
 201.27 333.44 207.15 333.15 213.02 333.21 218.9 333.04 224.72 332.63 230.59 323.3 236.47 310.98 242.34 308.04
 248.16 302.33 254.03 301.13 259.91 300.2 265.73 303.43 271.6 302.33 28 L
N
113.38 420.82 119.25 420.82 125.13 420.87 131 420.64 136.82 420.76 142.7 420.53 148.57 420.58
 154.45 420.24 160.26 420.01 166.14 420.3 172.01 420.24 177.89 420.24 183.71 419.95 189.58 420.35 195.46 420.35
 201.27 420.12 207.15 420.18 213.02 420.18 218.9 420.12 224.72 420.07 230.59 420.07 236.47 420.01 242.34 373.58
 248.16 343.63 254.03 334.88 259.91 330.5 265.73 326.87 271.6 323.99 28 L
N
(R) 117.69 339.69 T
(VM-group size 64) 123.56 339.69 T
(R) 115.39 316.61 T
(VM-group size 8) 121.26 316.61 T
(R) 117.69 287.38 T
(VM) 123.56 287.38 T
(V) 116.92 411.23 T
(ista) 123.54 411.23 T
363.57 253.7 363.57 435.2 547.88 435.2 547.88 253.7 363.57 253.7 5 L
N
363.57 253.7 363.57 256.01 2 L
N
394.27 253.7 394.27 256.01 2 L
N
424.97 253.7 424.97 256.01 2 L
N
455.73 253.7 455.73 256.01 2 L
N
486.43 253.7 486.43 256.01 2 L
N
517.13 253.7 517.13 256.01 2 L
N
547.88 253.7 547.88 256.01 2 L
N
363.57 435.2 363.57 432.89 2 L
N
394.27 435.2 394.27 432.89 2 L
N
424.97 435.2 424.97 432.89 2 L
N
455.73 435.2 455.73 432.89 2 L
N
486.43 435.2 486.43 432.89 2 L
N
517.13 435.2 517.13 432.89 2 L
N
547.88 435.2 547.88 432.89 2 L
N
363.57 253.7 363.57 258.31 2 L
N
424.97 253.7 424.97 258.31 2 L
N
486.43 253.7 486.43 258.31 2 L
N
547.88 253.7 547.88 258.31 2 L
N
363.57 435.2 363.57 430.59 2 L
N
424.97 435.2 424.97 430.59 2 L
N
486.43 435.2 486.43 430.59 2 L
N
(0) 361.07 239.26 T
(100) 417.47 239.26 T
(200) 478.93 239.26 T
(300) 540.38 239.26 T
(Database Size \050MB\051) 415.18 223.91 T
547.88 435.2 547.88 430.59 2 L
N
363.57 253.7 365.88 253.7 2 L
N
363.57 267.41 365.88 267.41 2 L
N
363.57 275.36 365.88 275.36 2 L
N
363.57 281.06 365.88 281.06 2 L
N
363.57 285.44 365.88 285.44 2 L
N
363.57 289.01 365.88 289.01 2 L
N
363.57 292.06 365.88 292.06 2 L
N
363.57 294.71 365.88 294.71 2 L
N
363.57 297.02 365.88 297.02 2 L
N
363.57 299.09 365.88 299.09 2 L
N
363.57 312.74 365.88 312.74 2 L
N
363.57 320.75 365.88 320.75 2 L
N
363.57 326.39 365.88 326.39 2 L
N
363.57 330.77 365.88 330.77 2 L
N
363.57 334.4 365.88 334.4 2 L
N
363.57 337.45 365.88 337.45 2 L
N
363.57 340.04 365.88 340.04 2 L
N
363.57 342.35 365.88 342.35 2 L
N
363.57 344.48 365.88 344.48 2 L
N
363.57 358.13 365.88 358.13 2 L
N
363.57 366.08 365.88 366.08 2 L
N
363.57 371.78 365.88 371.78 2 L
N
363.57 376.16 365.88 376.16 2 L
N
363.57 379.73 365.88 379.73 2 L
N
363.57 382.78 365.88 382.78 2 L
N
363.57 385.43 365.88 385.43 2 L
N
363.57 387.73 365.88 387.73 2 L
N
363.57 389.81 365.88 389.81 2 L
N
363.57 403.46 365.88 403.46 2 L
N
363.57 411.46 365.88 411.46 2 L
N
363.57 417.11 365.88 417.11 2 L
N
363.57 421.49 365.88 421.49 2 L
N
363.57 425.12 365.88 425.12 2 L
N
363.57 428.17 365.88 428.17 2 L
N
363.57 430.76 365.88 430.76 2 L
N
363.57 433.06 365.88 433.06 2 L
N
363.57 435.2 365.88 435.2 2 L
N
547.88 253.7 545.58 253.7 2 L
N
547.88 267.41 545.58 267.41 2 L
N
547.88 275.36 545.58 275.36 2 L
N
547.88 281.06 545.58 281.06 2 L
N
547.88 285.44 545.58 285.44 2 L
N
547.88 289.01 545.58 289.01 2 L
N
547.88 292.06 545.58 292.06 2 L
N
547.88 294.71 545.58 294.71 2 L
N
547.88 297.02 545.58 297.02 2 L
N
547.88 299.09 545.58 299.09 2 L
N
547.88 312.74 545.58 312.74 2 L
N
547.88 320.75 545.58 320.75 2 L
N
547.88 326.39 545.58 326.39 2 L
N
547.88 330.77 545.58 330.77 2 L
N
547.88 334.4 545.58 334.4 2 L
N
547.88 337.45 545.58 337.45 2 L
N
547.88 340.04 545.58 340.04 2 L
N
547.88 342.35 545.58 342.35 2 L
N
547.88 344.48 545.58 344.48 2 L
N
547.88 358.13 545.58 358.13 2 L
N
547.88 366.08 545.58 366.08 2 L
N
547.88 371.78 545.58 371.78 2 L
N
547.88 376.16 545.58 376.16 2 L
N
547.88 379.73 545.58 379.73 2 L
N
547.88 382.78 545.58 382.78 2 L
N
547.88 385.43 545.58 385.43 2 L
N
547.88 387.73 545.58 387.73 2 L
N
547.88 389.81 545.58 389.81 2 L
N
547.88 403.46 545.58 403.46 2 L
N
547.88 411.46 545.58 411.46 2 L
N
547.88 417.11 545.58 417.11 2 L
N
547.88 421.49 545.58 421.49 2 L
N
547.88 425.12 545.58 425.12 2 L
N
547.88 428.17 545.58 428.17 2 L
N
547.88 430.76 545.58 430.76 2 L
N
547.88 433.06 545.58 433.06 2 L
N
547.88 435.2 545.58 435.2 2 L
N
363.57 253.7 368.18 253.7 2 L
N
363.57 299.09 368.18 299.09 2 L
N
363.57 344.48 368.18 344.48 2 L
N
363.57 389.81 368.18 389.81 2 L
N
363.57 435.2 368.18 435.2 2 L
N
547.88 253.7 543.28 253.7 2 L
N
547.88 299.09 543.28 299.09 2 L
N
547.88 344.48 543.28 344.48 2 L
N
547.88 389.81 543.28 389.81 2 L
N
(10) 350.76 248.94 T
(100) 345.76 294.33 T
(1,000) 338.26 339.71 T
(10,000) 333.26 385.04 T
(100,000) 328.26 430.43 T
(Transactions/Second) 0 -270 328.65 301.99 TF
547.88 435.2 543.28 435.2 2 L
N
383.96 294.94 404.41 294.2 424.86 294.43 445.3 294.43 465.75 294.2 486.14 294.2 506.59 291.2
 527.03 286.19 8 L
N
J
383.96 315.39 404.41 313.43 424.86 312.92 445.3 313.32 465.75 312.63 486.14 311.19 506.59 304.39
 527.03 296.56 8 L
J
383.96 315.39 385.7 315.23 2 L
N
[2.909 3.741] 2.909 I
385.7 315.23 402.67 313.6 2 L
N
J
402.67 313.6 404.41 313.43 406.16 313.39 3 L
N
[2.895 3.722] 2.895 I
406.16 313.39 423.11 312.96 2 L
N
J
423.11 312.96 424.86 312.92 426.61 312.95 3 L
N
[2.894 3.721] 2.894 I
426.61 312.95 443.55 313.28 2 L
N
J
443.55 313.28 445.3 313.32 447.05 313.26 3 L
N
[2.895 3.723] 2.895 I
447.05 313.26 464 312.69 2 L
N
J
464 312.69 465.75 312.63 467.49 312.5 3 L
N
[2.892 3.719] 2.892 I
467.49 312.5 484.39 311.31 2 L
N
J
484.39 311.31 486.14 311.19 487.8 310.64 3 L
N
[3.081 3.962] 3.081 I
487.8 310.64 504.93 304.94 2 L
N
J
504.93 304.94 506.59 304.39 508.22 303.76 3 L
N
[3.141 4.038] 3.141 I
508.22 303.76 525.4 297.18 2 L
N
J
525.4 297.18 527.03 296.56 2 L
N
J
383.96 320.58 404.41 318.5 424.86 317.7 445.3 317.93 465.75 316.83 486.14 315.05 506.59 306.81
 527.03 298.69 8 L
N
383.96 393.61 404.41 393.38 424.86 392.98 445.3 392.92 465.75 392.98 486.14 392.8 506.59 333.48
 527.03 329.56 8 L
N
(V) 384.62 384.3 T
(ista) 391.24 384.3 T
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
( 9) 302.65 42.62 T
0 10 Q
2.83 (simplicity of V) 54 731.33 P
2.83 (ista\321V) 119.62 731.33 P
2.83 (ista is less than 1/10 the size of) 150.13 731.33 P
(R) 54 720.33 T
(VM\321is hard to quantify b) 59.87 720.33 T
(ut is probably also signi\336cant.) 166.33 720.33 T
1.99 (Current architectural trends indicate that the perfor-) 75.6 707.33 P
0.82 (mance adv) 54 696.33 P
0.82 (antage of V) 97.61 696.33 P
0.82 (ista will continue to increase. R) 145.29 696.33 P
0.82 (VM-) 274.68 696.33 P
-0.07 (Rio is slo) 54 685.33 P
-0.07 (wer than V) 91.4 685.33 P
-0.07 (ista because of the e) 135.09 685.33 P
-0.07 (xtra copies and sys-) 215.18 685.33 P
-0.23 (tem calls, while R) 54 674.33 P
-0.23 (VM is slo) 124.72 674.33 P
-0.23 (wer than V) 163.46 674.33 P
-0.23 (ista primarily because) 206.82 674.33 P
0.49 (of synchronous disk I/Os. Man) 54 663.33 P
0.49 (y studies indicate that mem-) 179.4 663.33 P
-0.19 (ory-to-memory copies, system calls, and disk I/Os will scale) 54 652.33 P
0.81 (more slo) 54 641.33 P
0.81 (wly than clock speed [Ousterhout90, Anderson91,) 89.28 641.33 P
(Rosenblum95].) 54 630.33 T
1 11 Q
(6. Uses f) 54 613.67 T
(or V) 92.52 613.67 T
(ista) 113.19 613.67 T
0 10 Q
1.7 (Rio and V) 75.6 600.33 P
1.7 (ista pro) 119.51 600.33 P
1.7 (vide a v) 150.78 600.33 P
1.7 (ery useful set of services:) 185.68 600.33 P
2.09 (free persistent memory and nearly free transactions. The) 54 589.33 P
2.1 (minimal 5) 54 578.33 P
2 F
2.1 (m) 101.54 578.33 P
0 F
2.1 (sec o) 107.3 578.33 P
2.1 (v) 129.52 578.33 P
2.1 (erhead of a V) 134.37 578.33 P
2.1 (ista transaction is small) 194.21 578.33 P
0.67 (enough that it can be used e) 54 567.33 P
0.67 (v) 168.85 567.33 P
0.67 (en for \336ne-grained tasks such) 173.7 567.33 P
0.56 (as sw) 54 556.33 P
0.56 (apping tw) 76.4 556.33 P
0.56 (o pointers atomically\321tasks for which disk) 116.59 556.33 P
0.37 (I/Os are too e) 54 545.33 P
0.37 (xpensi) 109.12 545.33 P
0.37 (v) 134.98 545.33 P
0.37 (e. W) 139.83 545.33 P
0.37 (e are e) 158.28 545.33 P
0.37 (xploring a number of w) 184.97 545.33 P
0.37 (ays) 280.79 545.33 P
(to tak) 54 534.33 T
(e adv) 76.4 534.33 T
(antage of V) 97.53 534.33 T
(ista\325) 143.58 534.33 T
(s f) 160.25 534.33 T
(ast persistence and atomicity:) 169.87 534.33 T
5 12 Q
(\245) 54 521.33 T
0 10 Q
2.5 (P) 67.75 521.33 P
2.5 (articipants in tw) 73.15 521.33 P
2.5 (o-phase commit [Gray78] can store) 142.49 521.33 P
0.07 (commit records in V) 67.75 510.33 P
0.07 (ista rather than on disk to accelerate) 149.85 510.33 P
0.68 (an important technique for reliable, distrib) 67.75 499.33 P
0.68 (uted comput-) 240.39 499.33 P
(ing.) 67.75 488.33 T
5 12 Q
(\245) 54 475.33 T
0 10 Q
0.59 (F) 67.75 475.33 P
0.59 (ault-tolerant applications can b) 73.15 475.33 P
0.59 (uf) 198.32 475.33 P
0.59 (fer netw) 206.4 475.33 P
0.59 (ork messages) 239.93 475.33 P
0.17 (in V) 67.75 464.33 P
0.17 (ista, then atomically send these message as part of a) 84.82 464.33 P
1.81 (local transaction. Once the transaction commits, these) 67.75 453.33 P
(messages will be deli) 67.75 442.33 T
(v) 152.77 442.33 T
(ered e) 157.62 442.33 T
(v) 181.52 442.33 T
(en if the system crashes.) 186.37 442.33 T
5 12 Q
(\245) 54 429.33 T
0 10 Q
-0.08 (Softw) 67.75 429.33 P
-0.08 (are that uses a tok) 91.54 429.33 P
-0.08 (en-passing protocol can store the) 162.78 429.33 P
0.27 (tok) 67.75 418.33 P
0.27 (en in V) 80.43 418.33 P
0.27 (ista and pass the tok) 109.82 418.33 P
0.27 (en using messages within) 191.36 418.33 P
0.75 (local transactions. Such a system w) 67.75 407.33 P
0.75 (ould survi) 213.03 407.33 P
0.75 (v) 253.8 407.33 P
0.75 (e system) 258.65 407.33 P
(crashes without losing the tok) 67.75 396.33 T
(en.) 187.09 396.33 T
5 12 Q
(\245) 54 383.33 T
0 10 Q
1.65 (A distrib) 67.75 383.33 P
1.65 (uted shared memory can be b) 104.48 383.33 P
1.65 (uilt on V) 230.02 383.33 P
1.65 (ista to) 268.3 383.33 P
0.74 (pro) 67.75 372.33 P
0.74 (vide free persistence and transactions on the distrib-) 80.93 372.33 P
(uted memory) 67.75 361.33 T
(.) 120.15 361.33 T
1 11 Q
(7. Conclusions) 54 344.67 T
0 10 Q
0.46 (The persistent memory pro) 75.6 331.33 P
0.46 (vided by the Rio \336le cache) 184.88 331.33 P
-0.1 (is an ideal abstraction on which to b) 54 320.33 P
-0.1 (uild a reco) 197.25 320.33 P
-0.1 (v) 239.11 320.33 P
-0.1 (erable mem-) 243.96 320.33 P
-0.24 (ory) 54 309.33 P
-0.24 (. Because stores to Rio are automatically persistent, V) 66.68 309.33 P
-0.24 (ista) 280.23 309.33 P
1.29 (can eliminate the standard redo log and its accompan) 54 298.33 P
1.29 (ying) 276.34 298.33 P
1.43 (o) 54 287.33 P
1.43 (v) 58.85 287.33 P
1.43 (erhead, tw) 63.7 287.33 P
1.43 (o out of the three cop) 106.68 287.33 P
1.43 (y operations present in) 199 287.33 P
1.69 (standard reco) 54 276.33 P
1.69 (v) 109.13 276.33 P
1.69 (erable memories, and all system calls. The) 113.98 276.33 P
2 (resulting system achie) 54 265.33 P
2 (v) 146.62 265.33 P
2 (es a performance impro) 151.47 265.33 P
2 (v) 252 265.33 P
2 (ement of) 256.85 265.33 P
1.24 (three orders of magnitude and a reduction in code size of) 54 254.33 P
(one order of magnitude.) 54 243.33 T
0.11 (V) 75.6 230.33 P
0.11 (ista\325) 82.22 230.33 P
0.11 (s minimum o) 98.89 230.33 P
0.11 (v) 151.76 230.33 P
0.11 (erhead of 5) 156.61 230.33 P
2 F
0.11 (m) 204.43 230.33 P
0 F
0.11 (sec per transaction is) 210.19 230.33 P
0.33 (small enough that it can be used e) 54 219.33 P
0.33 (v) 191.35 219.33 P
0.33 (en for \336ne-grained tasks) 196.2 219.33 P
0.92 (such as atomically sw) 54 208.33 P
0.92 (apping tw) 144.16 208.33 P
0.92 (o pointers. W) 184.7 208.33 P
0.92 (e belie) 239.9 208.33 P
0.92 (v) 266.96 208.33 P
0.92 (e Rio) 271.81 208.33 P
0.14 (and V) 54 197.33 P
0.14 (ista ha) 77.7 197.33 P
0.14 (v) 103.47 197.33 P
0.14 (e brought transactions into the realm of e) 108.32 197.33 P
0.14 (v) 273.17 197.33 P
0.14 (ery-) 278.02 197.33 P
(day computing.) 54 186.33 T
0 8 Q
(1) 116.22 190.33 T
54 119 294.12 139 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 127 186 127 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
1.18 (1.  Source code for V) 54 112.33 P
1.18 (ista and all benchmarks used in this) 144.83 112.33 P
0.21 (paper are a) 54 101.33 P
0.21 (v) 98.07 101.33 P
0.21 (ailable at http://www) 102.82 101.33 P
0.21 (.eecs.umich.edu/Rio. V) 187.02 101.33 P
0.21 (ista) 280.23 101.33 P
-0.22 (can run on non-Rio systems, ho) 54 90.33 P
-0.22 (we) 179.32 90.33 P
-0.22 (v) 190.73 90.33 P
-0.22 (er recent changes will be) 195.58 90.33 P
(lost if the operating system crashes.) 54 79.33 T
1 11 Q
(8. Ackno) 317.88 730.67 T
(wledgments) 359.33 730.67 T
0 10 Q
-0.25 (W) 339.48 717.33 P
-0.25 (e are grateful to Jef) 348.12 717.33 P
-0.25 (f Chase \050our shepherd\051, Jim Gray) 424.08 717.33 P
-0.25 (,) 555.5 717.33 P
0.53 (Mar) 317.88 706.33 P
0.53 (go Seltzer) 334.36 706.33 P
0.53 (, W) 374.76 706.33 P
0.53 (illy Zw) 389.32 706.33 P
0.53 (aenepoel, and the SOSP re) 418.92 706.33 P
0.53 (vie) 527.15 706.33 P
0.53 (wers) 539.12 706.33 P
1.04 (for pro) 317.88 695.33 P
1.04 (viding timely insights that impro) 346.26 695.33 P
1.04 (v) 481.42 695.33 P
1.04 (ed this paper sig-) 486.27 695.33 P
(ni\336cantly) 317.88 684.33 T
(.) 355.01 684.33 T
1 11 Q
(9. Refer) 317.88 667.67 T
(ences) 354.94 667.67 T
0 10 Q
([Anderson91]) 317.88 651.33 T
6.93 (Thomas) 383.08 651.33 P
6.93 (E. Anderson, Henry) 417.8 651.33 P
6.93 (M. Levy,) 514.13 651.33 P
0.76 (Brian) 383.08 639.33 P
0.76 (N. Bershad, and Edward) 407.8 639.33 P
0.76 (D. Lazows-) 510.59 639.33 P
0.14 (ka. The Interaction of Architecture and Op-) 383.08 627.33 P
1.65 (erating System Design. In) 383.08 615.33 P
0 0 0 1 0 0 0 K
3 F
1.65 (Proceedings of) 496.08 615.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.6 (the 1991 International Conference on Ar-) 383.08 603.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.81 (chitectural Support for Programming Lan-) 383.08 591.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.79 (guages and Operating Systems \050ASPLOS-) 383.08 579.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(IV\051) 383.08 567.33 T
0 0 0 1 0 0 0 K
0 F
(, pages 108\320120, April 1991.) 395.85 567.33 T
([APC96]) 317.88 549.33 T
-0.22 (The Power Protection Handbook. Technical) 383.08 549.33 P
(report, American Power Conversion, 1996.) 383.08 537.33 T
([Atkinson83]) 317.88 519.33 T
3.45 (Malcolm Atkinson, Ken Chisholm, Paul) 383.08 519.33 P
3.6 (Cockshott, and Richard Marshall. Algo-) 383.08 507.33 P
3.54 (rithms for a Persistent Heap.) 383.08 495.33 P
0 0 0 1 0 0 0 K
3 F
3.54 (Software\320) 517.44 495.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3.04 (Practice and Experience) 383.08 483.33 P
0 0 0 1 0 0 0 K
0 F
3.04 (, 13\0503\051:259\320271,) 488.02 483.33 P
(March 1983.) 383.08 471.33 T
([Bensoussan72]) 317.88 453.33 T
-0.08 (A.) 384.26 453.33 P
-0.08 (Bensoussan, C.T. Clingen, and R.C. Da-) 396.48 453.33 P
-0.23 (ley. The Multics Virtual Memory: Concepts) 383.08 441.33 P
1.15 (and Design.) 383.08 429.33 P
0 0 0 1 0 0 0 K
3 F
1.15 (Communications of the ACM) 435.65 429.33 P
0 0 0 1 0 0 0 K
0 F
1.15 (,) 555.5 429.33 P
(15\0505\051:308\320318, May 1972.) 383.08 417.33 T
([Chang88]) 317.88 399.33 T
3.1 (Albert Chang and Mark) 383.08 399.33 P
3.1 (F. Mergen. 801) 490.14 399.33 P
4.06 (Storage: Architecture and Programming.) 383.08 387.33 P
0 0 0 1 0 0 0 K
3 F
1.86 (ACM Transactions on Computer Systems) 383.08 375.33 P
0 0 0 1 0 0 0 K
0 F
1.86 (,) 555.5 375.33 P
(6\0501\051:28\32050, February 1988.) 383.08 363.33 T
([Chen96]) 317.88 345.33 T
1.03 (Peter) 383.08 345.33 P
1.03 (M. Chen, Wee) 406.13 345.33 P
1.03 (Teck Ng, Subhachan-) 469.01 345.33 P
1.38 (dra Chandra, Christopher) 383.08 333.33 P
1.38 (M. Aycock, Gu-) 489.7 333.33 P
-0.62 (rushankar Rajamani, and David Lowell. The) 383.08 321.33 P
1.49 (Rio File Cache: Surviving Operating Sys-) 383.08 309.33 P
-0.25 (tem Crashes. In) 383.08 297.33 P
0 0 0 1 0 0 0 K
3 F
-0.25 (Proceedings of the 1996 In-) 447.33 297.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4.51 (ternational Conference on Architectural) 383.08 285.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.65 (Support for Programming Languages and) 383.08 273.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.57 (Operating Systems \050ASPLOS\051) 383.08 261.33 P
0 0 0 1 0 0 0 K
0 F
-0.57 (, pages 74\32083,) 501.37 261.33 P
(October 1996.) 383.08 249.33 T
([DeWitt84]) 317.88 231.33 T
2.15 (D.) 383.08 231.33 P
2.15 (J. DeWitt, R.) 395.3 231.33 P
2.15 (H. Katz, F.) 454.61 231.33 P
2.15 (Olken, L.) 505.58 231.33 P
2.15 (D.) 548.28 231.33 P
0.96 (Shapiro, M.) 383.08 219.33 P
0.96 (R. Stonebraker, and D.) 434.04 219.33 P
0.96 (Wood.) 531.06 219.33 P
-0.43 (Implementation Techniques for Main Mem-) 383.08 207.33 P
2.1 (ory Database Systems. In) 383.08 195.33 P
0 0 0 1 0 0 0 K
3 F
2.1 (Proceedings of) 495.63 195.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.4 (the 1984 ACM SIGMOD International Con-) 383.08 183.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.38 (ference on Management of Data) 383.08 171.33 P
0 0 0 1 0 0 0 K
0 F
-0.38 (, pages 1\3208,) 510.98 171.33 P
(June 1984.) 383.08 159.33 T
([GM92]) 317.88 141.33 T
0.76 (Hector Garcia-Molina and Kenneth Salem.) 383.08 141.33 P
-0.29 (Main Memory Database Systems: An Over-) 383.08 129.33 P
3.52 (view.) 383.08 117.33 P
0 0 0 1 0 0 0 K
3 F
3.52 (IEEE Transactions on Knowledge) 411.04 117.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.51 (and Data Engineering) 383.08 105.33 P
0 0 0 1 0 0 0 K
0 F
1.51 (, 4\0506\051:509\320516, De-) 475.54 105.33 P
(cember 1992.) 383.08 93.33 T
([Golub90]) 317.88 75.33 T
2.63 (David Golub, Randall Dean, Allessandro) 383.08 75.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
( 10) 300.65 42.62 T
0 10 Q
0.51 (Forin, and Richard Rashid. Unix as an Ap-) 119.2 731.33 P
2.43 (plication Program. In) 119.2 719.33 P
0 0 0 1 0 0 0 K
3 F
2.43 (Proceedings of the) 214.26 719.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1990 USENIX Summer Conference) 119.2 707.33 T
0 0 0 1 0 0 0 K
0 F
(, 1990.) 260.01 707.33 T
([Gray78]) 54 689.33 T
3.93 (J.) 119.2 689.33 P
3.93 (N. Gray.) 128.09 689.33 P
0 0 0 1 0 0 0 K
3 F
3.93 (Operating Systems: An Ad-) 173.17 689.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5.91 (vanced Course) 119.2 677.33 P
0 0 0 1 0 0 0 K
0 F
5.91 (. Springer-Verlag, 1978.) 184.82 677.33 P
(Notes on Database Operating Systems.) 119.2 665.33 T
([Gray93]) 54 647.33 T
0.55 (Jim Gray and Andreas Reuter.) 119.2 647.33 P
0 0 0 1 0 0 0 K
3 F
0.55 (Transaction) 245.78 647.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6.46 (Processing: Concepts and Techniques) 119.2 635.33 P
0 0 0 1 0 0 0 K
0 F
6.46 (.) 291.62 635.33 P
(Morgan Kaufmann Publishers, Inc., 1993.) 119.2 623.33 T
([Haerder83]) 54 605.33 T
1.11 (Theo Haerder and Andreas Reuter. Princi-) 119.2 605.33 P
0.97 (ples of Transaction-Oriented Database Re-) 119.2 593.33 P
12.85 (covery.) 119.2 581.33 P
0 0 0 1 0 0 0 K
3 F
12.85 (ACM Computing Surveys) 164.26 581.33 P
0 0 0 1 0 0 0 K
0 F
12.85 (,) 291.62 581.33 P
(15\0504\051:287\320317, December 1983.) 119.2 569.33 T
([Lamb91]) 54 551.33 T
0.94 (Charles Lamb, Gordon Landis, Jack Oren-) 119.2 551.33 P
1.94 (stein, and Dan Weinreb. The ObjectStore) 119.2 539.33 P
2.14 (Database System.) 119.2 527.33 P
0 0 0 1 0 0 0 K
3 F
2.14 (Communications of the) 197.07 527.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ACM) 119.2 515.33 T
0 0 0 1 0 0 0 K
0 F
(, 34\05010\051:50\32063, October 1991.) 140.31 515.33 T
([Lampson83]) 54 497.33 T
3.11 (Butler) 119.2 497.33 P
3.11 (W. Lampson. Hints for Computer) 146.7 497.33 P
0.22 (System Design. In) 119.2 485.33 P
0 0 0 1 0 0 0 K
3 F
0.22 (Proceedings of the 1983) 195.97 485.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3.04 (Symposium on Operating System Princi-) 119.2 473.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ples) 119.2 461.33 T
0 0 0 1 0 0 0 K
0 F
(, pages 33\32048, 1983.) 135.31 461.33 T
([Ng97]) 54 443.33 T
0.5 (Wee) 119.2 443.33 P
0.5 (Teck Ng and Peter) 140.02 443.33 P
0.5 (M. Chen. Integrat-) 218.7 443.33 P
0.32 (ing Reliable Memory in Databases. In) 119.2 431.33 P
0 0 0 1 0 0 0 K
3 F
0.32 (Pro-) 275.79 431.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
9.29 (ceedings of the 1997 International) 119.2 419.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4.05 (Conference on Very Large Data Bases) 119.2 407.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050VLDB\051) 119.2 395.33 T
0 0 0 1 0 0 0 K
0 F
(, August 1997.) 150.86 395.33 T
([OToole93]) 54 377.33 T
2.93 (James OToole, Scott Nettles, and David) 119.2 377.33 P
2.39 (Gifford. Concurrent Compacting Garbage) 119.2 365.33 P
-0.33 (Collection of a Persistent Heap. In) 119.2 353.33 P
0 0 0 1 0 0 0 K
3 F
-0.33 (Proceed-) 257.47 353.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.1 (ings of the 1993 Symposium on Operating) 119.2 341.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.57 (Systems Principles) 119.2 329.33 P
0 0 0 1 0 0 0 K
0 F
-0.57 (, pages 161\320174, Decem-) 193.9 329.33 P
(ber 1993.) 119.2 317.33 T
([Ousterhout90]) 54 299.33 T
1.59 (John) 119.2 299.33 P
1.59 (K. Ousterhout. Why aren\325t operating) 140.59 299.33 P
0.92 (systems getting faster as fast as hardware?) 119.2 287.33 P
2.07 (In) 119.2 275.33 P
0 0 0 1 0 0 0 K
3 F
2.07 (Proceedings USENIX Summer Confer-) 132.1 275.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ence) 119.2 263.33 T
0 0 0 1 0 0 0 K
0 F
(, pages 247\320256, June 1990.) 137.52 263.33 T
([Rosenblum95]) 54 245.33 T
5.99 (Mendel Rosenblum, Edouard Bugnion,) 119.2 245.33 P
-0.08 (Stephen) 119.2 233.33 P
-0.08 (Alan Herrod, Emmett Witchel, and) 153.92 233.33 P
0.77 (Anoop Gupta. The Impact of Architectural) 119.2 221.33 P
1.03 (Trends on Operating System Performance.) 119.2 209.33 P
1.01 (In) 119.2 197.33 P
0 0 0 1 0 0 0 K
3 F
1.01 (Proceedings of the 1995 Symposium on) 131.04 197.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.44 (Operating Systems Principles) 119.2 185.33 P
0 0 0 1 0 0 0 K
0 F
1.44 (, pages 285\320) 240.96 185.33 P
(298, December 1995.) 119.2 173.33 T
([Satyanarayanan93]) 54 155.33 T
5.09 (M.) 136.47 155.33 P
5.09 (Satyanarayanan, Henry) 150.36 155.33 P
5.09 (H. Mash-) 251.26 155.33 P
1.21 (burn, Puneet Kumar, David) 119.2 143.33 P
1.21 (C. Steere, and) 235.6 143.33 P
1.83 (James) 119.2 131.33 P
1.83 (J. Kistler. Lightweight Recoverable) 146.14 131.33 P
-0.61 (Virtual Memory. In) 119.2 119.33 P
0 0 0 1 0 0 0 K
3 F
-0.61 (Proceedings of the 1993) 198.46 119.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3.04 (Symposium on Operating System Princi-) 119.2 107.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ples) 119.2 95.33 T
0 0 0 1 0 0 0 K
0 F
(, pages 146\320160, December 1993.) 135.31 95.33 T
([Sullivan91]) 54 77.33 T
5.72 (M.) 119.2 77.33 P
5.72 (Sullivan and M.) 133.09 77.33 P
5.72 (Stonebraker. Using) 211.19 77.33 P
1.6 (write protected data structures to improve) 383.08 731.33 P
0.71 (software fault tolerance in highly available) 383.08 719.33 P
0.06 (database management systems. In) 383.08 707.33 P
0 0 0 1 0 0 0 K
3 F
0.06 (Proceed-) 521.35 707.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.38 (ings of the 1991 International Conference) 383.08 695.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1.15 (on Very Large Data Bases \050VLDB\051) 383.08 683.33 P
0 0 0 1 0 0 0 K
0 F
1.15 (, pages) 529.08 683.33 P
(171\320180, September 1991.) 383.08 671.33 T
([TPC90]) 317.88 653.33 T
0.75 (TPC Benchmark B Standard Specification.) 383.08 653.33 P
3.69 (Technical report, Transaction Processing) 383.08 641.33 P
(Performance Council, August 1990.) 383.08 629.33 T
([TPC96]) 317.88 611.33 T
0.75 (TPC Benchmark C Standard Specification,) 383.08 611.33 P
0.34 (Revision 3.2. Technical report, Transaction) 383.08 599.33 P
3.31 (Processing Performance Council, August) 383.08 587.33 P
(1996.) 383.08 575.33 T
([Wahbe93]) 317.88 557.33 T
2.21 (Robert Wahbe, Steven Lucco, Thomas) 383.08 557.33 P
2.21 (E.) 549.39 557.33 P
1.1 (Anderson, and Susan) 383.08 545.33 P
1.1 (L. Graham. Efficient) 472.49 545.33 P
-0.5 (Software-Based Fault Isolation. In) 383.08 533.33 P
0 0 0 1 0 0 0 K
3 F
-0.5 (Proceed-) 521.35 533.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.35 (ings of the 14th ACM Symposium on Oper-) 383.08 521.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2.21 (ating Systems Principles) 383.08 509.33 P
0 0 0 1 0 0 0 K
0 F
2.21 (, pages 203\320216,) 485.82 509.33 P
(December 1993.) 383.08 497.33 T
([Yarvin93]) 317.88 479.33 T
-0.18 (Curtis Yarvin, Richard Bukowski, and Tho-) 383.08 479.33 P
0.43 (mas Anderson. Anonymous RPC: Low La-) 383.08 467.33 P
0.04 (tency Protection in a 64-Bit Address Space.) 383.08 455.33 P
2.21 (In) 383.08 443.33 P
0 0 0 1 0 0 0 K
3 F
2.21 (Proceedings of the Summer 1993 US-) 396.12 443.33 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ENIX Conference) 383.08 431.33 T
0 0 0 1 0 0 0 K
0 F
(, 1993.) 453.9 431.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 10
%%DocumentFonts: Times-Roman
%%+ Times-Bold
%%+ Symbol
%%+ Times-Italic
%%+ Courier
%%+ Courier-Bold
%%EOF
